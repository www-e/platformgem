# Payment System Files Report - TSX Files
Generated on: 2025-08-09T20:19:38.391Z
Total files found: 53

## Table of Contents

1. [src\app\admin\categories\page.tsx](#1-src-app-admin-categories-page-tsx)
2. [src\app\admin\layout.tsx](#2-src-app-admin-layout-tsx)
3. [src\app\admin\payments\page.tsx](#3-src-app-admin-payments-page-tsx)
4. [src\app\admin\students\[studentId]\page.tsx](#4-src-app-admin-students--studentid--page-tsx)
5. [src\app\courses\[courseId]\payment\page.tsx](#5-src-app-courses--courseid--payment-page-tsx)
6. [src\app\courses\[courseId]\payment\result\page.tsx](#6-src-app-courses--courseid--payment-result-page-tsx)
7. [src\app\courses\[courseId]\payment\success\page.tsx](#7-src-app-courses--courseid--payment-success-page-tsx)
8. [src\app\courses\page.tsx](#8-src-app-courses-page-tsx)
9. [src\app\professor\analytics\page.tsx](#9-src-app-professor-analytics-page-tsx)
10. [src\app\professor\courses\page.tsx](#10-src-app-professor-courses-page-tsx)
11. [src\components\admin\AdminDashboard.tsx](#11-src-components-admin-admindashboard-tsx)
12. [src\components\admin\AdminPaymentManagement.tsx](#12-src-components-admin-adminpaymentmanagement-tsx)
13. [src\components\admin\AdminStudentDetail.tsx](#13-src-components-admin-adminstudentdetail-tsx)
14. [src\components\admin\PlatformOverview.tsx](#14-src-components-admin-platformoverview-tsx)
15. [src\components\admin\RevenueAnalytics.tsx](#15-src-components-admin-revenueanalytics-tsx)
16. [src\components\admin\SystemLogs.tsx](#16-src-components-admin-systemlogs-tsx)
17. [src\components\admin\payment-management\PaymentFilters.tsx](#17-src-components-admin-payment-management-paymentfilters-tsx)
18. [src\components\admin\payment-management\PaymentList.tsx](#18-src-components-admin-payment-management-paymentlist-tsx)
19. [src\components\admin\payment-management\PaymentListItem.tsx](#19-src-components-admin-payment-management-paymentlistitem-tsx)
20. [src\components\admin\payment-management\PaymentPagination.tsx](#20-src-components-admin-payment-management-paymentpagination-tsx)
21. [src\components\admin\payment-management\PaymentSummaryCards.tsx](#21-src-components-admin-payment-management-paymentsummarycards-tsx)
22. [src\components\admin\revenue-analytics\PaymentMethodsChart.tsx](#22-src-components-admin-revenue-analytics-paymentmethodschart-tsx)
23. [src\components\admin\revenue-analytics\RecentPayments.tsx](#23-src-components-admin-revenue-analytics-recentpayments-tsx)
24. [src\components\admin\revenue-analytics\RevenueSummaryCards.tsx](#24-src-components-admin-revenue-analytics-revenuesummarycards-tsx)
25. [src\components\admin\student-detail\PaymentList.tsx](#25-src-components-admin-student-detail-paymentlist-tsx)
26. [src\components\admin\student-detail\StudentDataTabs.tsx](#26-src-components-admin-student-detail-studentdatatabs-tsx)
27. [src\components\admin\student-detail\StudentStats.tsx](#27-src-components-admin-student-detail-studentstats-tsx)
28. [src\components\admin\system-logs\LogsStatsCards.tsx](#28-src-components-admin-system-logs-logsstatscards-tsx)
29. [src\components\analytics\admin\DetailedAnalyticsTabs.tsx](#29-src-components-analytics-admin-detailedanalyticstabs-tsx)
30. [src\components\course\CourseAccessGuard.tsx](#30-src-components-course-courseaccessguard-tsx)
31. [src\components\landing\FAQSection.tsx](#31-src-components-landing-faqsection-tsx)
32. [src\components\navigation\MobileNavigation.tsx](#32-src-components-navigation-mobilenavigation-tsx)
33. [src\components\payment\CourseInfo.tsx](#33-src-components-payment-courseinfo-tsx)
34. [src\components\payment\PaymentButton.tsx](#34-src-components-payment-paymentbutton-tsx)
35. [src\components\payment\PaymentDetailsModal.tsx](#35-src-components-payment-paymentdetailsmodal-tsx)
36. [src\components\payment\PaymentFlow.tsx](#36-src-components-payment-paymentflow-tsx)
37. [src\components\payment\PaymentForm.tsx](#37-src-components-payment-paymentform-tsx)
38. [src\components\payment\PaymentIframe.tsx](#38-src-components-payment-paymentiframe-tsx)
39. [src\components\payment\PaymentMethodSelector.tsx](#39-src-components-payment-paymentmethodselector-tsx)
40. [src\components\payment\PaymentResult.tsx](#40-src-components-payment-paymentresult-tsx)
41. [src\components\payment\PaymentResultPage.tsx](#41-src-components-payment-paymentresultpage-tsx)
42. [src\components\payment\PaymentStatus.tsx](#42-src-components-payment-paymentstatus-tsx)
43. [src\components\professor\EarningsReport.tsx](#43-src-components-professor-earningsreport-tsx)
44. [src\components\professor\earnings-report\RecentTransactions.tsx](#44-src-components-professor-earnings-report-recenttransactions-tsx)
45. [src\components\shared\PaymentStatusBadge.tsx](#45-src-components-shared-paymentstatusbadge-tsx)
46. [src\components\student\PaymentHistory.tsx](#46-src-components-student-paymenthistory-tsx)
47. [src\components\student\StudentDashboard.tsx](#47-src-components-student-studentdashboard-tsx)
48. [src\components\student\payment-history\LoadingState.tsx](#48-src-components-student-payment-history-loadingstate-tsx)
49. [src\components\student\payment-history\MonthlySpendingCard.tsx](#49-src-components-student-payment-history-monthlyspendingcard-tsx)
50. [src\components\student\payment-history\PaymentFilters.tsx](#50-src-components-student-payment-history-paymentfilters-tsx)
51. [src\components\student\payment-history\PaymentMethodsCard.tsx](#51-src-components-student-payment-history-paymentmethodscard-tsx)
52. [src\components\student\payment-history\PaymentStatsCards.tsx](#52-src-components-student-payment-history-paymentstatscards-tsx)
53. [src\components\student\payment-history\TransactionsList.tsx](#53-src-components-student-payment-history-transactionslist-tsx)

## 1. src\app\admin\categories\page.tsx

**File Type:** TSX
**File Name:** page.tsx
**Full Path:** src\app\admin\categories\page.tsx

**File Size:** 5790 characters, 157 lines

### Content:

```tsx
   1 | // src/app/admin/categories/page.tsx
   2 | import { auth } from "@/lib/auth";
   3 | import { redirect } from "next/navigation";
   4 | import prisma from "@/lib/prisma";
   5 | import { CategoryDialog } from "@/components/admin/CategoryDialog";
   6 | import { CategoryManagement } from "@/components/admin/CategoryManagement";
   7 | import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
   8 | import { FolderOpen, BookOpen, Users, TrendingUp } from "lucide-react";
   9 | 
  10 | export default async function CategoriesPage() {
  11 |   const session = await auth();
  12 |   
  13 |   if (!session?.user || session.user.role !== 'ADMIN') {
  14 |     redirect('/login');
  15 |   }
  16 | 
  17 |   const [categories, stats] = await Promise.all([
  18 |     prisma.category.findMany({
  19 |       include: {
  20 |         _count: {
  21 |           select: { courses: true }
  22 |         },
  23 |         courses: {
  24 |           include: {
  25 |             // Add the missing professor relation
  26 |             professor: {
  27 |               select: { id: true, name: true }
  28 |             },
  29 |             _count: {
  30 |               select: { enrollments: true }
  31 |             }
  32 |           }
  33 |         }
  34 |       },
  35 |       orderBy: { createdAt: 'desc' }
  36 |     }),
  37 |     prisma.$transaction([
  38 |       prisma.category.count(),
  39 |       prisma.category.count({ where: { isActive: true } }),
  40 |       prisma.course.count(),
  41 |       prisma.enrollment.count()
  42 |     ])
  43 |   ]);
  44 | 
  45 |   const [totalCategories, activeCategories, totalCourses, totalEnrollments] = stats;
  46 | 
  47 |   // Calculate category statistics
  48 |   const categoryStats = categories.map(category => ({
  49 |     ...category,
  50 |     createdAt: category.createdAt.toISOString(), // Convert Date to string
  51 |     updatedAt: category.updatedAt.toISOString(), // Convert Date to string
  52 |     totalEnrollments: category.courses.reduce((sum, course) => sum + course._count.enrollments, 0),
  53 |     courses: category.courses.map(course => ({
  54 |       id: course.id,
  55 |       title: course.title,
  56 |       description: course.description,
  57 |       thumbnailUrl: course.thumbnailUrl,
  58 |       price: course.price ? Number(course.price) : null, // Convert Decimal to number
  59 |       currency: course.currency,
  60 |       professor: course.professor,
  61 |       _count: course._count
  62 |     }))
  63 |   }));
  64 | 
  65 |   return (
  66 |     <div className="container mx-auto p-6 space-y-6">
  67 |       <div className="flex justify-between items-center">
  68 |         <div>
  69 |           <h1 className="text-3xl font-bold">إدارة الفئات</h1>
  70 |           <p className="text-muted-foreground">إدارة فئات الدورات التعليمية</p>
  71 |         </div>
  72 |         <CategoryDialog />
  73 |       </div>
  74 | 
  75 |       {/* Statistics Cards */}
  76 |       <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
  77 |         <Card>
  78 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  79 |             <CardTitle className="text-sm font-medium">إجمالي الفئات</CardTitle>
  80 |             <FolderOpen className="h-4 w-4 text-muted-foreground" />
  81 |           </CardHeader>
  82 |           <CardContent>
  83 |             <div className="text-2xl font-bold">{totalCategories}</div>
  84 |             <p className="text-xs text-muted-foreground">
  85 |               {activeCategories} نشطة
  86 |             </p>
  87 |           </CardContent>
  88 |         </Card>
  89 | 
  90 |         <Card>
  91 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  92 |             <CardTitle className="text-sm font-medium">إجمالي الدورات</CardTitle>
  93 |             <BookOpen className="h-4 w-4 text-muted-foreground" />
  94 |           </CardHeader>
  95 |           <CardContent>
  96 |             <div className="text-2xl font-bold">{totalCourses}</div>
  97 |             <p className="text-xs text-muted-foreground">
  98 |               في جميع الفئات
  99 |             </p>
 100 |           </CardContent>
 101 |         </Card>
 102 | 
 103 |         <Card>
 104 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 105 |             <CardTitle className="text-sm font-medium">إجمالي التسجيلات</CardTitle>
 106 |             <Users className="h-4 w-4 text-muted-foreground" />
 107 |           </CardHeader>
 108 |           <CardContent>
 109 |             <div className="text-2xl font-bold">{totalEnrollments}</div>
 110 |             <p className="text-xs text-muted-foreground">
 111 |               ملتحق مسجل
 112 |             </p>
 113 |           </CardContent>
 114 |         </Card>
 115 | 
 116 |         <Card>
 117 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 118 |             <CardTitle className="text-sm font-medium">متوسط الدورات</CardTitle>
 119 |             <TrendingUp className="h-4 w-4 text-muted-foreground" />
 120 |           </CardHeader>
 121 |           <CardContent>
 122 |             <div className="text-2xl font-bold">
 123 |               {totalCategories > 0 ? Math.round(totalCourses / totalCategories * 10) / 10 : 0}
 124 |             </div>
 125 |             <p className="text-xs text-muted-foreground">
 126 |               دورة لكل فئة
 127 |             </p>
 128 |           </CardContent>
 129 |         </Card>
 130 |       </div>
 131 | 
 132 |       {/* Categories List */}
 133 |       <Card>
 134 |         <CardHeader>
 135 |           <CardTitle>قائمة الفئات</CardTitle>
 136 |           <CardDescription>
 137 |             جميع فئات الدورات التعليمية في المنصة
 138 |           </CardDescription>
 139 |         </CardHeader>
 140 |         <CardContent>
 141 |           {categories.length === 0 ? (
 142 |             <div className="text-center py-8">
 143 |               <FolderOpen className="mx-auto h-12 w-12 text-muted-foreground" />
 144 |               <h3 className="mt-2 text-sm font-semibold text-gray-900">لا توجد فئات</h3>
 145 |               <p className="mt-1 text-sm text-muted-foreground">ابدأ بإضافة أول فئة للمنصة</p>
 146 |               <div className="mt-6">
 147 |                 <CategoryDialog />
 148 |               </div>
 149 |             </div>
 150 |           ) : (
 151 |             <CategoryManagement categories={categoryStats} />
 152 |           )}
 153 |         </CardContent>
 154 |       </Card>
 155 |     </div>
 156 |   );
 157 | }
```

================================================================================

## 2. src\app\admin\layout.tsx

**File Type:** TSX
**File Name:** layout.tsx
**Full Path:** src\app\admin\layout.tsx

**File Size:** 8973 characters, 237 lines

### Content:

```tsx
   1 | // src/app/admin/layout.tsx
   2 | "use client";
   3 | 
   4 | import { redirect, usePathname } from "next/navigation";
   5 | import Link from "next/link";
   6 | import { useState } from "react";
   7 | import { LayoutDashboard, Book, Users, GraduationCap, Menu, CreditCard, Activity, Settings, ChevronLeft, ChevronRight } from "lucide-react";
   8 | import { cn } from "@/lib/utils";
   9 | import { SessionProvider, useSession } from "next-auth/react";
  10 | import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
  11 | import { Button } from "@/components/ui/button";
  12 | import { motion, AnimatePresence } from "framer-motion";
  13 | 
  14 | // Enhanced navigation component with hover animations
  15 | function AdminNavLinks({ isCollapsed = false, onItemClick }: { isCollapsed?: boolean; onItemClick?: () => void }) {
  16 |   const pathname = usePathname();
  17 |   const navLinks = [
  18 |     { href: "/admin", label: "لوحة التحكم", icon: LayoutDashboard },
  19 |     { href: "/admin/courses", label: "الدورات", icon: Book },
  20 |     { href: "/admin/students", label: "الملتحقين", icon: Users },
  21 |     { href: "/admin/professors", label: "المدربين", icon: Users },
  22 |     { href: "/admin/payments", label: "المدفوعات", icon: CreditCard },
  23 |     { href: "/admin/logs", label: "سجلات النظام", icon: Activity },
  24 |     { href: "/admin/settings", label: "الإعدادات", icon: Settings },
  25 |   ];
  26 | 
  27 |   return (
  28 |     <nav className="flex flex-col space-y-2">
  29 |       {navLinks.map((link, index) => {
  30 |         const isActive = pathname === link.href || (link.href !== "/admin" && pathname.startsWith(link.href));
  31 |         return (
  32 |           <motion.div
  33 |             key={link.href}
  34 |             initial={{ opacity: 0, x: -20 }}
  35 |             animate={{ opacity: 1, x: 0 }}
  36 |             transition={{ delay: index * 0.1 }}
  37 |           >
  38 |             <Link 
  39 |               href={link.href} 
  40 |               onClick={onItemClick}
  41 |               className={cn(
  42 |                 "flex items-center gap-3 p-3 rounded-xl transition-all duration-300 group relative overflow-hidden",
  43 |                 isActive 
  44 |                   ? "bg-gradient-to-r from-primary to-primary/80 text-primary-foreground shadow-lg" 
  45 |                   : "text-muted-foreground hover:bg-accent/50 hover:text-foreground hover:shadow-md"
  46 |               )}
  47 |             >
  48 |               <link.icon className={cn(
  49 |                 "w-5 h-5 transition-transform duration-300",
  50 |                 isActive ? "scale-110" : "group-hover:scale-110"
  51 |               )} />
  52 |               <AnimatePresence>
  53 |                 {!isCollapsed && (
  54 |                   <motion.span
  55 |                     initial={{ opacity: 0, width: 0 }}
  56 |                     animate={{ opacity: 1, width: "auto" }}
  57 |                     exit={{ opacity: 0, width: 0 }}
  58 |                     transition={{ duration: 0.2 }}
  59 |                     className="font-medium whitespace-nowrap"
  60 |                   >
  61 |                     {link.label}
  62 |                   </motion.span>
  63 |                 )}
  64 |               </AnimatePresence>
  65 |               {isActive && (
  66 |                 <motion.div
  67 |                   layoutId="activeIndicator"
  68 |                   className="absolute left-0 top-0 bottom-0 w-1 bg-primary-foreground rounded-r-full"
  69 |                   transition={{ type: "spring", stiffness: 300, damping: 30 }}
  70 |                 />
  71 |               )}
  72 |             </Link>
  73 |           </motion.div>
  74 |         );
  75 |       })}
  76 |     </nav>
  77 |   );
  78 | }
  79 | 
  80 | // Enhanced sidebar component with auto-hide functionality
  81 | function EnhancedSidebar({ children }: { children: React.ReactNode }) {
  82 |   const [isCollapsed, setIsCollapsed] = useState(true);
  83 |   const [isHovered, setIsHovered] = useState(false);
  84 | 
  85 |   const shouldExpand = isHovered || !isCollapsed;
  86 | 
  87 |   return (
  88 |     <div className="relative">
  89 |       {/* Desktop Sidebar */}
  90 |       <motion.aside
  91 |         initial={{ width: 80 }}
  92 |         animate={{ width: shouldExpand ? 280 : 80 }}
  93 |         transition={{ duration: 0.3, ease: "easeInOut" }}
  94 |         onMouseEnter={() => setIsHovered(true)}
  95 |         onMouseLeave={() => setIsHovered(false)}
  96 |         className="fixed left-0 top-0 h-full bg-card/95 backdrop-blur-sm border-r border-border/50 z-50 hidden md:flex flex-col shadow-xl"
  97 |       >
  98 |         {/* Header */}
  99 |         <div className="p-6 border-b border-border/50">
 100 |           <div className="flex items-center gap-3">
 101 |             <motion.div
 102 |               animate={{ rotate: shouldExpand ? 0 : 180 }}
 103 |               transition={{ duration: 0.3 }}
 104 |             >
 105 |               <GraduationCap className="h-8 w-8 text-primary" />
 106 |             </motion.div>
 107 |             <AnimatePresence>
 108 |               {shouldExpand && (
 109 |                 <motion.div
 110 |                   initial={{ opacity: 0, x: -20 }}
 111 |                   animate={{ opacity: 1, x: 0 }}
 112 |                   exit={{ opacity: 0, x: -20 }}
 113 |                   transition={{ duration: 0.2 }}
 114 |                 >
 115 |                   <h2 className="text-xl font-bold text-foreground">لوحة التحكم</h2>
 116 |                   <p className="text-sm text-muted-foreground">نظام إدارة التعلم</p>
 117 |                 </motion.div>
 118 |               )}
 119 |             </AnimatePresence>
 120 |           </div>
 121 |         </div>
 122 | 
 123 |         {/* Navigation */}
 124 |         <div className="flex-1 p-4 overflow-y-auto">
 125 |           <AdminNavLinks isCollapsed={!shouldExpand} />
 126 |         </div>
 127 | 
 128 |         {/* Footer */}
 129 |         <div className="p-4 border-t border-border/50">
 130 |           <Button
 131 |             variant="ghost"
 132 |             size="sm"
 133 |             onClick={() => setIsCollapsed(!isCollapsed)}
 134 |             className="w-full justify-center"
 135 |           >
 136 |             {isCollapsed ? <ChevronRight className="w-4 h-4" /> : <ChevronLeft className="w-4 h-4" />}
 137 |           </Button>
 138 |         </div>
 139 |       </motion.aside>
 140 | 
 141 |       {/* Main Content with dynamic margin */}
 142 |       <motion.div
 143 |         initial={{ marginLeft: 80 }}
 144 |         animate={{ marginLeft: shouldExpand ? 280 : 80 }}
 145 |         transition={{ duration: 0.3, ease: "easeInOut" }}
 146 |         className="min-h-screen hidden md:block"
 147 |       >
 148 |         {children}
 149 |       </motion.div>
 150 | 
 151 |       {/* Mobile Layout */}
 152 |       <div className="md:hidden min-h-screen">
 153 |         {children}
 154 |       </div>
 155 |     </div>
 156 |   );
 157 | }
 158 | 
 159 | // Wrapper to use session and hooks in a client component
 160 | function AdminLayoutContent({ children }: { children: React.ReactNode }) {
 161 |   const { data: session, status } = useSession({
 162 |     required: true,
 163 |     onUnauthenticated() {
 164 |       redirect('/login');
 165 |     }
 166 |   });
 167 | 
 168 |   if (status === 'loading') {
 169 |     return (
 170 |       <div className="flex items-center justify-center min-h-screen bg-background text-foreground">
 171 |         <motion.div
 172 |           animate={{ rotate: 360 }}
 173 |           transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
 174 |         >
 175 |           <GraduationCap className="w-8 h-8 text-primary" />
 176 |         </motion.div>
 177 |       </div>
 178 |     );
 179 |   }
 180 | 
 181 |   // This check is now secondary to the middleware, but a good safeguard
 182 |   if (!session?.user?.isAdmin) {
 183 |     redirect("/"); 
 184 |   }
 185 | 
 186 |   return (
 187 |     <div className="min-h-screen bg-gradient-to-br from-background to-muted/20">
 188 |       <EnhancedSidebar>
 189 |         {/* Mobile Header */}
 190 |         <header className="md:hidden flex items-center justify-between p-4 border-b border-border bg-card/95 backdrop-blur-sm sticky top-0 z-40">
 191 |           <Link href="/admin" className="flex items-center gap-2">
 192 |             <GraduationCap className="h-6 w-6 text-primary" />
 193 |             <span className="font-bold">لوحة التحكم</span>
 194 |           </Link>
 195 |           <Sheet>
 196 |             <SheetTrigger asChild>
 197 |               <Button variant="outline" size="icon">
 198 |                 <Menu className="h-5 w-5" />
 199 |               </Button>
 200 |             </SheetTrigger>
 201 |             <SheetContent side="right" className="p-6 w-80">
 202 |               <div className="mb-6">
 203 |                 <div className="flex items-center gap-3">
 204 |                   <GraduationCap className="h-8 w-8 text-primary" />
 205 |                   <div>
 206 |                     <h2 className="text-xl font-bold text-foreground">لوحة التحكم</h2>
 207 |                     <p className="text-sm text-muted-foreground">نظام إدارة التعلم</p>
 208 |                   </div>
 209 |                 </div>
 210 |               </div>
 211 |               <AdminNavLinks />
 212 |             </SheetContent>
 213 |           </Sheet>
 214 |         </header>
 215 |         
 216 |         <main className="flex-grow p-4 sm:p-8 overflow-auto">
 217 |           <motion.div
 218 |             initial={{ opacity: 0, y: 20 }}
 219 |             animate={{ opacity: 1, y: 0 }}
 220 |             transition={{ duration: 0.5 }}
 221 |           >
 222 |             {children}
 223 |           </motion.div>
 224 |         </main>
 225 |       </EnhancedSidebar>
 226 |     </div>
 227 |   );
 228 | }
 229 | 
 230 | // The main export remains a Server Component that provides the session
 231 | export default function AdminLayout({ children }: { children: React.ReactNode }) {
 232 |   return (
 233 |     <SessionProvider>
 234 |       <AdminLayoutContent>{children}</AdminLayoutContent>
 235 |     </SessionProvider>
 236 |   )
 237 | }
```

================================================================================

## 3. src\app\admin\payments\page.tsx

**File Type:** TSX
**File Name:** page.tsx
**Full Path:** src\app\admin\payments\page.tsx

**File Size:** 29285 characters, 813 lines

### Content:

```tsx
   1 | // src/app/admin/payments/page.tsx
   2 | "use client";
   3 | 
   4 | import { useState, useEffect } from "react";
   5 | import { motion } from "framer-motion";
   6 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
   7 | import { Button } from "@/components/ui/button";
   8 | import { Badge } from "@/components/ui/badge";
   9 | import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
  10 | import {
  11 |   ModernFilters,
  12 |   FilterOption,
  13 |   FilterValue,
  14 | } from "@/components/admin/ModernFilters";
  15 | import {
  16 |   CreditCard,
  17 |   DollarSign,
  18 |   TrendingUp,
  19 |   AlertCircle,
  20 |   CheckCircle,
  21 |   Clock,
  22 |   XCircle,
  23 |   Eye,
  24 |   MoreHorizontal,
  25 |   RefreshCw,
  26 |   Download,
  27 |   Users,
  28 |   Calendar,
  29 |   Phone,
  30 |   Mail,
  31 |   BookOpen
  32 | } from "lucide-react";
  33 | import { cn } from "@/lib/utils";
  34 | import { formatAdminDateTime, formatRelativeTime } from "@/lib/date-utils";
  35 | import {
  36 |   DropdownMenu,
  37 |   DropdownMenuContent,
  38 |   DropdownMenuItem,
  39 |   DropdownMenuSeparator,
  40 |   DropdownMenuTrigger,
  41 | } from "@/components/ui/dropdown-menu";
  42 | import {
  43 |   Dialog,
  44 |   DialogContent,
  45 |   DialogHeader,
  46 |   DialogTitle,
  47 |   DialogTrigger,
  48 | } from "@/components/ui/dialog";
  49 | 
  50 | interface Payment {
  51 |   id: string;
  52 |   amount: number;
  53 |   currency: string;
  54 |   status: "PENDING" | "COMPLETED" | "FAILED" | "CANCELLED" | "REFUNDED";
  55 |   createdAt: string;
  56 |   completedAt?: string;
  57 |   failureReason?: string;
  58 |   paymobOrderId?: string;
  59 |   paymobTransactionId?: number;
  60 |   user: {
  61 |     id: string;
  62 |     name: string;
  63 |     email?: string;
  64 |     phone: string;
  65 |   };
  66 |   course: {
  67 |     id: string;
  68 |     title: string;
  69 |     thumbnailUrl: string;
  70 |     professor: {
  71 |       name: string;
  72 |     };
  73 |   };
  74 |   lastWebhook?: {
  75 |     id: string;
  76 |     processedAt: string;
  77 |     processingAttempts: number;
  78 |     lastError?: string;
  79 |   };
  80 | }
  81 | 
  82 | interface PaymentSummary {
  83 |   total: number;
  84 |   completed: number;
  85 |   pending: number;
  86 |   failed: number;
  87 |   cancelled: number;
  88 |   totalRevenue: number;
  89 | }
  90 | 
  91 | const ITEMS_PER_PAGE = 12;
  92 | 
  93 | export default function AdminPaymentsPage() {
  94 |   const [payments, setPayments] = useState<Payment[]>([]);
  95 |   const [summary, setSummary] = useState<PaymentSummary | null>(null);
  96 |   const [isLoading, setIsLoading] = useState(true);
  97 |   const [currentPage, setCurrentPage] = useState(1);
  98 |   const [totalCount, setTotalCount] = useState(0);
  99 |   const [filters, setFilters] = useState<FilterValue>({});
 100 |   const [selectedPayment, setSelectedPayment] = useState<Payment | null>(null);
 101 | 
 102 |   const filterOptions: FilterOption[] = [
 103 |     {
 104 |       key: "status",
 105 |       label: "حالة الدفع",
 106 |       type: "select",
 107 |       options: [
 108 |         { value: "PENDING", label: "في الانتظار" },
 109 |         { value: "COMPLETED", label: "مكتمل" },
 110 |         { value: "FAILED", label: "فاشل" },
 111 |         { value: "CANCELLED", label: "ملغي" },
 112 |         { value: "REFUNDED", label: "مسترد" },
 113 |       ],
 114 |       placeholder: "اختر حالة الدفع",
 115 |     },
 116 |     {
 117 |       key: "amountRange",
 118 |       label: "نطاق المبلغ",
 119 |       type: "select",
 120 |       options: [
 121 |         { value: "0-100", label: "0 - 100 جنيه" },
 122 |         { value: "100-500", label: "100 - 500 جنيه" },
 123 |         { value: "500-1000", label: "500 - 1,000 جنيه" },
 124 |         { value: "1000+", label: "أكثر من 1,000 جنيه" },
 125 |       ],
 126 |       placeholder: "اختر نطاق المبلغ",
 127 |     },
 128 |     {
 129 |       key: "dateFrom",
 130 |       label: "من تاريخ",
 131 |       type: "date",
 132 |       placeholder: "اختر التاريخ",
 133 |     },
 134 |     {
 135 |       key: "dateTo",
 136 |       label: "إلى تاريخ",
 137 |       type: "date",
 138 |       placeholder: "اختر التاريخ",
 139 |     },
 140 |   ];
 141 | 
 142 |   useEffect(() => {
 143 |     fetchPayments();
 144 |     fetchSummary();
 145 |   }, [currentPage, filters]);
 146 | 
 147 |   const fetchPayments = async () => {
 148 |     setIsLoading(true);
 149 |     try {
 150 |       const queryParams = new URLSearchParams({
 151 |         page: currentPage.toString(),
 152 |         limit: ITEMS_PER_PAGE.toString(),
 153 |         ...Object.fromEntries(
 154 |           Object.entries(filters).filter(
 155 |             ([_, value]) => value !== undefined && value !== ""
 156 |           )
 157 |         ),
 158 |       });
 159 | 
 160 |       const response = await fetch(`/api/admin/payments?${queryParams}`);
 161 |       const data = await response.json();
 162 | 
 163 |       if (response.ok && data.success) {
 164 |         setPayments(data.data.payments || []);
 165 |         setTotalCount(data.data.pagination?.total || 0);
 166 |       }
 167 |     } catch (error) {
 168 |       console.error("Failed to fetch payments:", error);
 169 |     } finally {
 170 |       setIsLoading(false);
 171 |     }
 172 |   };
 173 | 
 174 |   const fetchSummary = async () => {
 175 |     try {
 176 |       const response = await fetch("/api/admin/payments/stats");
 177 |       const data = await response.json();
 178 | 
 179 |       if (response.ok && data.success) {
 180 |         setSummary(data.data);
 181 |       }
 182 |     } catch (error) {
 183 |       console.error("Failed to fetch payment summary:", error);
 184 |     }
 185 |   };
 186 | 
 187 |   const handlePaymentAction = async (
 188 |     paymentId: string,
 189 |     action: string,
 190 |     additionalData?: any
 191 |   ) => {
 192 |     try {
 193 |       const response = await fetch(`/api/admin/payments/${paymentId}`, {
 194 |         method: "PATCH",
 195 |         headers: { "Content-Type": "application/json" },
 196 |         body: JSON.stringify({ action, ...additionalData }),
 197 |       });
 198 | 
 199 |       const result = await response.json();
 200 | 
 201 |       if (result.success) {
 202 |         fetchPayments();
 203 |         fetchSummary();
 204 |       }
 205 |     } catch (error) {
 206 |       console.error("Payment action failed:", error);
 207 |     }
 208 |   };
 209 | 
 210 |   const handleFiltersChange = (newFilters: FilterValue) => {
 211 |     setFilters(newFilters);
 212 |     setCurrentPage(1);
 213 |   };
 214 | 
 215 |   const handleResetFilters = () => {
 216 |     setFilters({});
 217 |     setCurrentPage(1);
 218 |   };
 219 | 
 220 |   const handleExport = async () => {
 221 |     try {
 222 |       const queryParams = new URLSearchParams({
 223 |         ...Object.fromEntries(
 224 |           Object.entries(filters).filter(
 225 |             ([_, value]) => value !== undefined && value !== ""
 226 |           )
 227 |         ),
 228 |       });
 229 | 
 230 |       const response = await fetch(`/api/admin/payments/export?${queryParams}`);
 231 | 
 232 |       if (response.ok) {
 233 |         const blob = await response.blob();
 234 |         const url = window.URL.createObjectURL(blob);
 235 |         const a = document.createElement("a");
 236 |         a.href = url;
 237 |         a.download = `payments-export-${
 238 |           new Date().toISOString().split("T")[0]
 239 |         }.csv`;
 240 |         document.body.appendChild(a);
 241 |         a.click();
 242 |         document.body.removeChild(a);
 243 |         window.URL.revokeObjectURL(url);
 244 |       }
 245 |     } catch (error) {
 246 |       console.error("Export failed:", error);
 247 |     }
 248 |   };
 249 | 
 250 |   const getStatusIcon = (status: string) => {
 251 |     switch (status) {
 252 |       case "COMPLETED":
 253 |         return <CheckCircle className="w-4 h-4 text-green-500" />;
 254 |       case "PENDING":
 255 |         return <Clock className="w-4 h-4 text-yellow-500" />;
 256 |       case "FAILED":
 257 |         return <XCircle className="w-4 h-4 text-red-500" />;
 258 |       case "CANCELLED":
 259 |         return <XCircle className="w-4 h-4 text-gray-500" />;
 260 |       case "REFUNDED":
 261 |         return <RefreshCw className="w-4 h-4 text-blue-500" />;
 262 |       default:
 263 |         return <AlertCircle className="w-4 h-4 text-gray-500" />;
 264 |     }
 265 |   };
 266 | 
 267 |   const getStatusBadge = (status: string) => {
 268 |     const variants = {
 269 |       COMPLETED: "bg-green-100 text-green-800 border-green-200",
 270 |       PENDING: "bg-yellow-100 text-yellow-800 border-yellow-200",
 271 |       FAILED: "bg-red-100 text-red-800 border-red-200",
 272 |       CANCELLED: "bg-gray-100 text-gray-800 border-gray-200",
 273 |       REFUNDED: "bg-blue-100 text-blue-800 border-blue-200",
 274 |     };
 275 | 
 276 |     const labels = {
 277 |       COMPLETED: "مكتمل",
 278 |       PENDING: "في الانتظار",
 279 |       FAILED: "فاشل",
 280 |       CANCELLED: "ملغي",
 281 |       REFUNDED: "مسترد",
 282 |     };
 283 | 
 284 |     return (
 285 |       <Badge
 286 |         className={cn("text-xs", variants[status as keyof typeof variants])}
 287 |       >
 288 |         {labels[status as keyof typeof labels] || status}
 289 |       </Badge>
 290 |     );
 291 |   };
 292 | 
 293 |   const totalPages = Math.ceil(totalCount / ITEMS_PER_PAGE);
 294 | 
 295 |   const PaymentCard = ({
 296 |     payment,
 297 |     index,
 298 |   }: {
 299 |     payment: Payment;
 300 |     index: number;
 301 |   }) => (
 302 |     <motion.div
 303 |       initial={{ opacity: 0, y: 20 }}
 304 |       animate={{ opacity: 1, y: 0 }}
 305 |       transition={{ delay: index * 0.05 }}
 306 |     >
 307 |       <Card className="hover:shadow-lg transition-all duration-200 border-0 bg-card/50 backdrop-blur-sm">
 308 |         <CardContent className="p-6">
 309 |           <div className="flex items-start justify-between gap-4">
 310 |             <div className="flex items-start gap-4 flex-1">
 311 |               <div className="w-16 h-12 bg-gradient-to-br from-primary/10 to-primary/5 rounded-lg flex items-center justify-center">
 312 |                 {payment.course.thumbnailUrl ? (
 313 |                   <img
 314 |                     src={payment.course.thumbnailUrl}
 315 |                     alt={payment.course.title}
 316 |                     className="w-full h-full object-cover rounded-lg"
 317 |                   />
 318 |                 ) : (
 319 |                   <CreditCard className="w-6 h-6 text-primary" />
 320 |                 )}
 321 |               </div>
 322 | 
 323 |               <div className="flex-1 min-w-0">
 324 |                 <div className="flex items-center gap-2 mb-2">
 325 |                   <h4 className="font-semibold text-lg truncate">
 326 |                     {payment.course.title}
 327 |                   </h4>
 328 |                   {getStatusBadge(payment.status)}
 329 |                 </div>
 330 | 
 331 |                 <div className="space-y-2 text-sm text-muted-foreground">
 332 |                   <div className="flex items-center gap-2">
 333 |                     <Users className="w-4 h-4" />
 334 |                     <span>{payment.user.name}</span>
 335 |                   </div>
 336 | 
 337 |                   <div className="flex items-center gap-2">
 338 |                     <Phone className="w-4 h-4" />
 339 |                     <span dir="ltr">{payment.user.phone}</span>
 340 |                   </div>
 341 | 
 342 |                   {payment.user.email && (
 343 |                     <div className="flex items-center gap-2">
 344 |                       <Mail className="w-4 h-4" />
 345 |                       <span dir="ltr">{payment.user.email}</span>
 346 |                     </div>
 347 |                   )}
 348 | 
 349 |                   <div className="flex items-center gap-2">
 350 |                     <Calendar className="w-4 h-4" />
 351 |                     <span>{formatRelativeTime(payment.createdAt)}</span>
 352 |                   </div>
 353 |                 </div>
 354 | 
 355 |                 {payment.failureReason && (
 356 |                   <div className="mt-3 p-2 bg-red-50 border border-red-200 rounded-lg">
 357 |                     <p className="text-xs text-red-600">
 358 |                       <AlertCircle className="w-3 h-3 inline mr-1" />
 359 |                       {payment.failureReason}
 360 |                     </p>
 361 |                   </div>
 362 |                 )}
 363 | 
 364 |                 {payment.lastWebhook?.lastError && (
 365 |                   <div className="mt-3 p-2 bg-orange-50 border border-orange-200 rounded-lg">
 366 |                     <p className="text-xs text-orange-600">
 367 |                       <AlertCircle className="w-3 h-3 inline mr-1" />
 368 |                       خطأ في المعالجة: {payment.lastWebhook.lastError}
 369 |                     </p>
 370 |                   </div>
 371 |                 )}
 372 |               </div>
 373 |             </div>
 374 | 
 375 |             <div className="flex flex-col items-end gap-3">
 376 |               <div className="text-right">
 377 |                 <div className="text-2xl font-bold text-primary">
 378 |                   {new Intl.NumberFormat("ar-EG", {
 379 |                     style: "currency",
 380 |                     currency: payment.currency,
 381 |                     minimumFractionDigits: 0,
 382 |                   }).format(payment.amount)}
 383 |                 </div>
 384 |                 <div className="text-xs text-muted-foreground">
 385 |                   {formatAdminDateTime(payment.createdAt)}
 386 |                 </div>
 387 |               </div>
 388 | 
 389 |               <div className="flex items-center gap-2">
 390 |                 <Dialog>
 391 |                   <DialogTrigger asChild>
 392 |                     <Button
 393 |                       variant="outline"
 394 |                       size="sm"
 395 |                       onClick={() => setSelectedPayment(payment)}
 396 |                     >
 397 |                       <Eye className="w-4 h-4 mr-2" />
 398 |                       التفاصيل
 399 |                     </Button>
 400 |                   </DialogTrigger>
 401 |                   <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
 402 |                     <DialogHeader>
 403 |                       <DialogTitle className="flex items-center gap-2">
 404 |                         {getStatusIcon(payment.status)}
 405 |                         تفاصيل المدفوعة
 406 |                       </DialogTitle>
 407 |                     </DialogHeader>
 408 | 
 409 |                     {selectedPayment && (
 410 |                       <div className="space-y-6">
 411 |                         <div className="grid grid-cols-2 gap-4">
 412 |                           <div>
 413 |                             <label className="text-sm font-medium">
 414 |                               المبلغ
 415 |                             </label>
 416 |                             <p className="text-lg font-bold text-primary">
 417 |                               {new Intl.NumberFormat("ar-EG", {
 418 |                                 style: "currency",
 419 |                                 currency: selectedPayment.currency,
 420 |                                 minimumFractionDigits: 0,
 421 |                               }).format(selectedPayment.amount)}
 422 |                             </p>
 423 |                           </div>
 424 |                           <div>
 425 |                             <label className="text-sm font-medium">
 426 |                               الحالة
 427 |                             </label>
 428 |                             <div className="mt-1">
 429 |                               {getStatusBadge(selectedPayment.status)}
 430 |                             </div>
 431 |                           </div>
 432 |                         </div>
 433 | 
 434 |                         <div>
 435 |                           <label className="text-sm font-medium">الدورة</label>
 436 |                           <div className="flex items-center gap-3 mt-2 p-3 bg-muted/50 rounded-lg">
 437 |                             <div className="w-12 h-8 bg-primary/10 rounded overflow-hidden">
 438 |                               {selectedPayment.course.thumbnailUrl && (
 439 |                                 <img
 440 |                                   src={selectedPayment.course.thumbnailUrl}
 441 |                                   alt={selectedPayment.course.title}
 442 |                                   className="w-full h-full object-cover"
 443 |                                 />
 444 |                               )}
 445 |                             </div>
 446 |                             <div>
 447 |                               <p className="font-medium">
 448 |                                 {selectedPayment.course.title}
 449 |                               </p>
 450 |                               <p className="text-sm text-muted-foreground">
 451 |                                 المدرس: {selectedPayment.course.professor.name}
 452 |                               </p>
 453 |                             </div>
 454 |                           </div>
 455 |                         </div>
 456 | 
 457 |                         <div>
 458 |                           <label className="text-sm font-medium">
 459 |                             بيانات الملتحق
 460 |                           </label>
 461 |                           <div className="mt-2 p-3 bg-muted/50 rounded-lg space-y-2">
 462 |                             <p>
 463 |                               <strong>الاسم:</strong>{" "}
 464 |                               {selectedPayment.user.name}
 465 |                             </p>
 466 |                             <p>
 467 |                               <strong>الهاتف:</strong>{" "}
 468 |                               {selectedPayment.user.phone}
 469 |                             </p>
 470 |                             {selectedPayment.user.email && (
 471 |                               <p>
 472 |                                 <strong>البريد الإلكتروني:</strong>{" "}
 473 |                                 {selectedPayment.user.email}
 474 |                               </p>
 475 |                             )}
 476 |                           </div>
 477 |                         </div>
 478 | 
 479 |                         <div className="grid grid-cols-2 gap-4">
 480 |                           <div>
 481 |                             <label className="text-sm font-medium">
 482 |                               تاريخ الإنشاء
 483 |                             </label>
 484 |                             <p className="text-sm mt-1">
 485 |                               {formatAdminDateTime(selectedPayment.createdAt)}
 486 |                             </p>
 487 |                           </div>
 488 |                           {selectedPayment.completedAt && (
 489 |                             <div>
 490 |                               <label className="text-sm font-medium">
 491 |                                 تاريخ الإكمال
 492 |                               </label>
 493 |                               <p className="text-sm mt-1">
 494 |                                 {formatAdminDateTime(
 495 |                                   selectedPayment.completedAt
 496 |                                 )}
 497 |                               </p>
 498 |                             </div>
 499 |                           )}
 500 |                         </div>
 501 | 
 502 |                         {selectedPayment.paymobTransactionId && (
 503 |                           <div>
 504 |                             <label className="text-sm font-medium">
 505 |                               معرف المعاملة
 506 |                             </label>
 507 |                             <p className="text-sm mt-1 font-mono">
 508 |                               {selectedPayment.paymobTransactionId}
 509 |                             </p>
 510 |                           </div>
 511 |                         )}
 512 |                       </div>
 513 |                     )}
 514 |                   </DialogContent>
 515 |                 </Dialog>
 516 | 
 517 |                 <DropdownMenu modal={false}>
 518 |                   <DropdownMenuTrigger asChild>
 519 |                     <Button
 520 |                       variant="ghost"
 521 |                       size="sm"
 522 |                       className="h-8 w-8 p-0"
 523 |                       onMouseDown={(e) => e.preventDefault()}
 524 |                     >
 525 |                       <MoreHorizontal className="w-4 h-4" />
 526 |                     </Button>
 527 |                   </DropdownMenuTrigger>
 528 |                   <DropdownMenuContent
 529 |                     align="end"
 530 |                     className="w-48 bg-background/95 backdrop-blur-sm border shadow-lg"
 531 |                     sideOffset={5}
 532 |                     onCloseAutoFocus={(e) => e.preventDefault()}
 533 |                   >
 534 |                     {payment.status === "PENDING" && (
 535 |                       <>
 536 |                         <DropdownMenuItem
 537 |                           onClick={(e) => {
 538 |                             e.preventDefault();
 539 |                             handlePaymentAction(payment.id, "manual_complete");
 540 |                           }}
 541 |                           className="cursor-pointer"
 542 |                         >
 543 |                           <CheckCircle className="h-4 w-4 ml-2" />
 544 |                           <span>إكمال يدوياً</span>
 545 |                         </DropdownMenuItem>
 546 |                         <DropdownMenuItem
 547 |                           className="text-red-500 focus:text-red-500 cursor-pointer"
 548 |                           onClick={(e) => {
 549 |                             e.preventDefault();
 550 |                             handlePaymentAction(payment.id, "cancel", {
 551 |                               reason: "Cancelled by admin",
 552 |                             });
 553 |                           }}
 554 |                         >
 555 |                           <XCircle className="h-4 w-4 ml-2" />
 556 |                           <span>إلغاء</span>
 557 |                         </DropdownMenuItem>
 558 |                       </>
 559 |                     )}
 560 |                     {payment.status === "COMPLETED" &&
 561 |                       payment.lastWebhook?.lastError && (
 562 |                         <DropdownMenuItem
 563 |                           onClick={(e) => {
 564 |                             e.preventDefault();
 565 |                             handlePaymentAction(payment.id, "retry_enrollment");
 566 |                           }}
 567 |                           className="cursor-pointer"
 568 |                         >
 569 |                           <RefreshCw className="h-4 w-4 ml-2" />
 570 |                           <span>إعادة محاولة التسجيل</span>
 571 |                         </DropdownMenuItem>
 572 |                       )}
 573 |                     {payment.status === "FAILED" && (
 574 |                       <DropdownMenuItem
 575 |                         onClick={(e) => {
 576 |                           e.preventDefault();
 577 |                           handlePaymentAction(payment.id, "manual_complete");
 578 |                         }}
 579 |                         className="cursor-pointer"
 580 |                       >
 581 |                         <CheckCircle className="h-4 w-4 ml-2" />
 582 |                         <span>إكمال يدوياً</span>
 583 |                       </DropdownMenuItem>
 584 |                     )}
 585 |                     <DropdownMenuSeparator />
 586 |                     <DropdownMenuItem
 587 |                       onClick={(e) => {
 588 |                         e.preventDefault();
 589 |                         setSelectedPayment(payment);
 590 |                       }}
 591 |                       className="cursor-pointer"
 592 |                     >
 593 |                       <Eye className="h-4 w-4 ml-2" />
 594 |                       <span>عرض التفاصيل</span>
 595 |                     </DropdownMenuItem>
 596 |                   </DropdownMenuContent>
 597 |                 </DropdownMenu>
 598 |               </div>
 599 |             </div>
 600 |           </div>
 601 |         </CardContent>
 602 |       </Card>
 603 |     </motion.div>
 604 |   );
 605 | 
 606 |   return (
 607 |     <div className="space-y-6">
 608 |       {/* Header */}
 609 |       <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
 610 |         <div>
 611 |           <h1 className="text-3xl font-bold bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text">
 612 |             إدارة المدفوعات
 613 |           </h1>
 614 |           <p className="text-muted-foreground mt-1">
 615 |             مراقبة وإدارة جميع المدفوعات والمعاملات في النظام
 616 |           </p>
 617 |         </div>
 618 | 
 619 |         <div className="flex items-center gap-2">
 620 |           <Button
 621 |             variant="outline"
 622 |             onClick={fetchPayments}
 623 |             disabled={isLoading}
 624 |           >
 625 |             <RefreshCw
 626 |               className={cn("w-4 h-4 mr-2", isLoading && "animate-spin")}
 627 |             />
 628 |             تحديث
 629 |           </Button>
 630 |           <Button variant="outline" onClick={handleExport}>
 631 |             <Download className="w-4 h-4 mr-2" />
 632 |             تصدير
 633 |           </Button>
 634 |         </div>
 635 |       </div>
 636 | 
 637 |       {/* Stats Cards */}
 638 |       {summary && (
 639 |         <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
 640 |           <Card className="border-0 bg-gradient-to-r from-blue-500/10 to-blue-600/10">
 641 |             <CardContent className="p-4">
 642 |               <div className="flex items-center justify-between">
 643 |                 <div>
 644 |                   <p className="text-sm text-muted-foreground">
 645 |                     إجمالي المدفوعات
 646 |                   </p>
 647 |                   <p className="text-2xl font-bold text-blue-600">
 648 |                     {summary.total}
 649 |                   </p>
 650 |                 </div>
 651 |                 <CreditCard className="w-8 h-8 text-blue-500" />
 652 |               </div>
 653 |             </CardContent>
 654 |           </Card>
 655 | 
 656 |           <Card className="border-0 bg-gradient-to-r from-green-500/10 to-green-600/10">
 657 |             <CardContent className="p-4">
 658 |               <div className="flex items-center justify-between">
 659 |                 <div>
 660 |                   <p className="text-sm text-muted-foreground">مكتملة</p>
 661 |                   <p className="text-2xl font-bold text-green-600">
 662 |                     {summary.completed}
 663 |                   </p>
 664 |                 </div>
 665 |                 <CheckCircle className="w-8 h-8 text-green-500" />
 666 |               </div>
 667 |             </CardContent>
 668 |           </Card>
 669 | 
 670 |           <Card className="border-0 bg-gradient-to-r from-yellow-500/10 to-yellow-600/10">
 671 |             <CardContent className="p-4">
 672 |               <div className="flex items-center justify-between">
 673 |                 <div>
 674 |                   <p className="text-sm text-muted-foreground">في الانتظار</p>
 675 |                   <p className="text-2xl font-bold text-yellow-600">
 676 |                     {summary.pending}
 677 |                   </p>
 678 |                 </div>
 679 |                 <Clock className="w-8 h-8 text-yellow-500" />
 680 |               </div>
 681 |             </CardContent>
 682 |           </Card>
 683 | 
 684 |           <Card className="border-0 bg-gradient-to-r from-red-500/10 to-red-600/10">
 685 |             <CardContent className="p-4">
 686 |               <div className="flex items-center justify-between">
 687 |                 <div>
 688 |                   <p className="text-sm text-muted-foreground">فاشلة</p>
 689 |                   <p className="text-2xl font-bold text-red-600">
 690 |                     {summary.failed}
 691 |                   </p>
 692 |                 </div>
 693 |                 <XCircle className="w-8 h-8 text-red-500" />
 694 |               </div>
 695 |             </CardContent>
 696 |           </Card>
 697 | 
 698 |           <Card className="border-0 bg-gradient-to-r from-purple-500/10 to-purple-600/10">
 699 |             <CardContent className="p-4">
 700 |               <div className="flex items-center justify-between">
 701 |                 <div>
 702 |                   <p className="text-sm text-muted-foreground">
 703 |                     إجمالي الإيرادات
 704 |                   </p>
 705 |                   <p className="text-2xl font-bold text-purple-600">
 706 |                     {new Intl.NumberFormat("ar-EG", {
 707 |                       style: "currency",
 708 |                       currency: "EGP",
 709 |                       minimumFractionDigits: 0,
 710 |                     }).format(summary.totalRevenue)}
 711 |                   </p>
 712 |                 </div>
 713 |                 <DollarSign className="w-8 h-8 text-purple-500" />
 714 |               </div>
 715 |             </CardContent>
 716 |           </Card>
 717 |         </div>
 718 |       )}
 719 | 
 720 |       {/* Filters */}
 721 |       <ModernFilters
 722 |         filters={filterOptions}
 723 |         values={filters}
 724 |         onChange={handleFiltersChange}
 725 |         onReset={handleResetFilters}
 726 |         showExport={false}
 727 |         isLoading={isLoading}
 728 |       />
 729 | 
 730 |       {/* Payments List */}
 731 |       {isLoading ? (
 732 |         <div className="space-y-4">
 733 |           {Array.from({ length: 6 }).map((_, i) => (
 734 |             <Card key={i} className="animate-pulse">
 735 |               <CardContent className="p-6">
 736 |                 <div className="flex items-start gap-4">
 737 |                   <div className="w-16 h-12 bg-muted rounded-lg" />
 738 |                   <div className="flex-1 space-y-3">
 739 |                     <div className="h-4 bg-muted rounded w-1/2" />
 740 |                     <div className="h-3 bg-muted rounded w-3/4" />
 741 |                     <div className="h-3 bg-muted rounded w-1/3" />
 742 |                   </div>
 743 |                   <div className="w-24 h-8 bg-muted rounded" />
 744 |                 </div>
 745 |               </CardContent>
 746 |             </Card>
 747 |           ))}
 748 |         </div>
 749 |       ) : payments.length > 0 ? (
 750 |         <>
 751 |           <div className="space-y-4">
 752 |             {payments.map((payment, index) => (
 753 |               <PaymentCard key={payment.id} payment={payment} index={index} />
 754 |             ))}
 755 |           </div>
 756 | 
 757 |           {/* Pagination */}
 758 |           {totalPages > 1 && (
 759 |             <div className="flex justify-center items-center gap-2 mt-8">
 760 |               <Button
 761 |                 variant="outline"
 762 |                 onClick={() => setCurrentPage((prev) => Math.max(1, prev - 1))}
 763 |                 disabled={currentPage === 1}
 764 |               >
 765 |                 السابق
 766 |               </Button>
 767 | 
 768 |               <div className="flex items-center gap-1">
 769 |                 {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
 770 |                   const pageNum = i + 1;
 771 |                   return (
 772 |                     <Button
 773 |                       key={pageNum}
 774 |                       variant={currentPage === pageNum ? "primary" : "outline"}
 775 |                       size="sm"
 776 |                       onClick={() => setCurrentPage(pageNum)}
 777 |                       className="w-10 h-10"
 778 |                     >
 779 |                       {pageNum}
 780 |                     </Button>
 781 |                   );
 782 |                 })}
 783 |               </div>
 784 | 
 785 |               <Button
 786 |                 variant="outline"
 787 |                 onClick={() =>
 788 |                   setCurrentPage((prev) => Math.min(totalPages, prev + 1))
 789 |                 }
 790 |                 disabled={currentPage === totalPages}
 791 |               >
 792 |                 التالي
 793 |               </Button>
 794 |             </div>
 795 |           )}
 796 |         </>
 797 |       ) : (
 798 |         <Card className="border-0 bg-card/50">
 799 |           <CardContent className="p-12 text-center">
 800 |             <CreditCard className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
 801 |             <h3 className="text-lg font-semibold mb-2">لا توجد مدفوعات</h3>
 802 |             <p className="text-muted-foreground">
 803 |               {Object.keys(filters).length > 0
 804 |                 ? "لم يتم العثور على مدفوعات مطابقة للفلاتر المحددة"
 805 |                 : "لا توجد مدفوعات في النظام حتى الآن"}
 806 |             </p>
 807 |           </CardContent>
 808 |         </Card>
 809 |       )}
 810 |     </div>
 811 |   );
 812 | }
 813 | 
```

================================================================================

## 4. src\app\admin\students\[studentId]\page.tsx

**File Type:** TSX
**File Name:** page.tsx
**Full Path:** src\app\admin\students\[studentId]\page.tsx

**File Size:** 2693 characters, 103 lines

### Content:

```tsx
   1 | // src/app/admin/students/[studentId]/page.tsx
   2 | 
   3 | import prisma from "@/lib/prisma";
   4 | import { redirect } from "next/navigation";
   5 | import { Metadata } from 'next';
   6 | import AdminStudentDetail from '@/components/admin/AdminStudentDetail';
   7 | 
   8 | interface StudentDetailPageProps {
   9 |   params: Promise<{ studentId: string }>;
  10 | }
  11 | 
  12 | export async function generateMetadata({ params }: StudentDetailPageProps): Promise<Metadata> {
  13 |   const { studentId } = await params;
  14 |   const student = await prisma.user.findUnique({
  15 |     where: { id: studentId },
  16 |     select: { name: true }
  17 |   });
  18 | 
  19 |   return {
  20 |     title: student ? `${student.name} - إدارة الملتحقين` : 'ملتحق غير موجود',
  21 |     description: student ? `إدارة بيانات الملتحق ${student.name}` : 'الملتحق المطلوب غير موجود',
  22 |   };
  23 | }
  24 | 
  25 | export default async function StudentDetailPage({ params }: StudentDetailPageProps) {
  26 |   const { studentId } = await params;
  27 |   
  28 |   const student = await prisma.user.findUnique({
  29 |     where: { id: studentId },
  30 |     include: {
  31 |       enrollments: {
  32 |         include: {
  33 |           course: {
  34 |             select: {
  35 |               id: true,
  36 |               title: true,
  37 |               thumbnailUrl: true,
  38 |               price: true,
  39 |               currency: true,
  40 |               professor: {
  41 |                 select: {
  42 |                   name: true
  43 |                 }
  44 |               }
  45 |             }
  46 |           }
  47 |         },
  48 |         orderBy: {
  49 |           enrolledAt: 'desc'
  50 |         }
  51 |       },
  52 |       payments: {
  53 |         include: {
  54 |           course: {
  55 |             select: {
  56 |               id: true,
  57 |               title: true,
  58 |               thumbnailUrl: true
  59 |             }
  60 |           }
  61 |         },
  62 |         orderBy: {
  63 |           createdAt: 'desc'
  64 |         }
  65 |       },
  66 |       certificates: {
  67 |         include: {
  68 |           course: {
  69 |             select: {
  70 |               title: true
  71 |             }
  72 |           }
  73 |         },
  74 |         orderBy: {
  75 |           issuedAt: 'desc'
  76 |         }
  77 |       }
  78 |     }
  79 |   });
  80 | 
  81 |   if (!student || student.role !== 'STUDENT') {
  82 |     redirect('/admin/students');
  83 |   }
  84 | 
  85 |   // Transform data to handle Decimal serialization
  86 |   const transformedStudent = {
  87 |     ...student,
  88 |     enrollments: student.enrollments.map(enrollment => ({
  89 |       ...enrollment,
  90 |       course: {
  91 |         ...enrollment.course,
  92 |         price: enrollment.course.price ? Number(enrollment.course.price) : null
  93 |       }
  94 |     })),
  95 |     payments: student.payments.map(payment => ({
  96 |       ...payment,
  97 |       amount: Number(payment.amount),
  98 |       paymobTransactionId: payment.paymobTransactionId ? Number(payment.paymobTransactionId) : null
  99 |     }))
 100 |   };
 101 | 
 102 |   return <AdminStudentDetail student={transformedStudent} />;
 103 | }
```

================================================================================

## 5. src\app\courses\[courseId]\payment\page.tsx

**File Type:** TSX
**File Name:** page.tsx
**Full Path:** src\app\courses\[courseId]\payment\page.tsx

**File Size:** 2416 characters, 83 lines

### Content:

```tsx
   1 | // src/app/courses/[courseId]/payment/page.tsx
   2 | "use client";
   3 | 
   4 | import { useEffect, useState } from "react";
   5 | import { useParams, useRouter } from "next/navigation";
   6 | import { PaymentFlow } from "@/components/payment/PaymentFlow";
   7 | import { coursesApi, Course } from "@/lib/api/courses";
   8 | import { Loader2, ArrowLeft } from "lucide-react";
   9 | import { Button } from "@/components/ui/button";
  10 | import Link from "next/link";
  11 | 
  12 | export default function PaymentPage() {
  13 |   const params = useParams();
  14 |   const router = useRouter();
  15 |   const courseId = params.courseId as string;
  16 |   
  17 |   const [course, setCourse] = useState<Course | null>(null);
  18 |   const [loading, setLoading] = useState(true);
  19 |   const [error, setError] = useState<string | null>(null);
  20 | 
  21 |   useEffect(() => {
  22 |     const fetchCourse = async () => {
  23 |       try {
  24 |         const courseData = await coursesApi.getById(courseId);
  25 |         setCourse(courseData);
  26 |       } catch (error) {
  27 |         console.error('Error fetching course:', error);
  28 |         setError('فشل في تحميل بيانات الدورة');
  29 |       } finally {
  30 |         setLoading(false);
  31 |       }
  32 |     };
  33 | 
  34 |     if (courseId) {
  35 |       fetchCourse();
  36 |     }
  37 |   }, [courseId]);
  38 | 
  39 |   const handlePaymentSuccess = (paymentId: string) => {
  40 |     router.push(`/courses/${courseId}/payment/success?paymentId=${paymentId}`);
  41 |   };
  42 | 
  43 |   const handlePaymentCancel = () => {
  44 |     router.push(`/courses/${courseId}`);
  45 |   };
  46 | 
  47 |   if (loading) {
  48 |     return (
  49 |       <div className="min-h-screen flex items-center justify-center">
  50 |         <div className="text-center">
  51 |           <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" />
  52 |           <p>جاري تحميل بيانات الدورة...</p>
  53 |         </div>
  54 |       </div>
  55 |     );
  56 |   }
  57 | 
  58 |   if (error || !course) {
  59 |     return (
  60 |       <div className="min-h-screen flex items-center justify-center">
  61 |         <div className="text-center">
  62 |           <p className="text-red-600 mb-4">{error || 'الدورة غير موجودة'}</p>
  63 |           <Link href="/courses">
  64 |             <Button variant="outline">
  65 |               <ArrowLeft className="w-4 h-4 mr-2" />
  66 |               العودة للدورات
  67 |             </Button>
  68 |           </Link>
  69 |         </div>
  70 |       </div>
  71 |     );
  72 |   }
  73 | 
  74 |   return (
  75 |     <div className="min-h-screen bg-gray-50">
  76 |       <PaymentFlow
  77 |         course={course}
  78 |         onSuccess={handlePaymentSuccess}
  79 |         onCancel={handlePaymentCancel}
  80 |       />
  81 |     </div>
  82 |   );
  83 | }
```

================================================================================

## 6. src\app\courses\[courseId]\payment\result\page.tsx

**File Type:** TSX
**File Name:** page.tsx
**Full Path:** src\app\courses\[courseId]\payment\result\page.tsx

**File Size:** 4579 characters, 175 lines

### Content:

```tsx
   1 | // src/app/courses/[courseId]/payment/result/page.tsx
   2 | // Payment result page after PayMob redirect
   3 | 
   4 | import { Metadata } from 'next';
   5 | import { notFound, redirect } from 'next/navigation';
   6 | import { auth } from '@/lib/auth';
   7 | import { CourseService } from '@/lib/services/course/index.service';
   8 | import PaymentResultPage from '@/components/payment/PaymentResultPage';
   9 | import prisma from '@/lib/prisma';
  10 | 
  11 | interface PaymentResultPageProps {
  12 |   params: {
  13 |     courseId: string;
  14 |   };
  15 |   searchParams: {
  16 |     payment_id?: string;
  17 |     transaction_id?: string;
  18 |     success?: string;
  19 |     pending?: string;
  20 |   };
  21 | }
  22 | 
  23 | export async function generateMetadata({ params }: PaymentResultPageProps): Promise<Metadata> {
  24 |   const course = await CourseService.getCourseById(params.courseId);
  25 |   
  26 |   if (!course) {
  27 |     return {
  28 |       title: 'نتيجة الدفع',
  29 |     };
  30 |   }
  31 | 
  32 |   return {
  33 |     title: `نتيجة الدفع - ${course.title}`,
  34 |     description: `نتيجة عملية الدفع للتسجيل في دورة ${course.title}`,
  35 |     robots: {
  36 |       index: false,
  37 |       follow: false,
  38 |     },
  39 |   };
  40 | }
  41 | 
  42 | export default async function CoursePaymentResultPage({ 
  43 |   params, 
  44 |   searchParams 
  45 | }: PaymentResultPageProps) {
  46 |   const session = await auth();
  47 |   
  48 |   // Require authentication
  49 |   if (!session?.user?.id) {
  50 |     redirect('/login');
  51 |   }
  52 | 
  53 |   const courseId = params.courseId;
  54 |   const { payment_id, transaction_id, success, pending } = searchParams;
  55 | 
  56 |   // Get course details
  57 |   const course = await CourseService.getCourseById(courseId, session.user.id, session.user.role);
  58 |   
  59 |   if (!course) {
  60 |     notFound();
  61 |   }
  62 | 
  63 |   // Find payment record
  64 |   let payment = null;
  65 |   if (payment_id) {
  66 |     payment = await prisma.payment.findFirst({
  67 |       where: {
  68 |         id: payment_id,
  69 |         userId: session.user.id,
  70 |         courseId: courseId
  71 |       },
  72 |       include: {
  73 |         webhooks: {
  74 |           orderBy: {
  75 |             createdAt: 'desc'
  76 |           },
  77 |           take: 1
  78 |         }
  79 |       }
  80 |     });
  81 |   } else if (transaction_id) {
  82 |     // Try to find by PayMob transaction ID
  83 |     payment = await prisma.payment.findFirst({
  84 |       where: {
  85 |         paymobTransactionId: BigInt(transaction_id),
  86 |         userId: session.user.id,
  87 |         courseId: courseId
  88 |       },
  89 |       include: {
  90 |         webhooks: {
  91 |           orderBy: {
  92 |             createdAt: 'desc'
  93 |           },
  94 |           take: 1
  95 |         }
  96 |       }
  97 |     });
  98 |   } else {
  99 |     // Try to find the most recent payment for this user and course
 100 |     payment = await prisma.payment.findFirst({
 101 |       where: {
 102 |         userId: session.user.id,
 103 |         courseId: courseId
 104 |       },
 105 |       orderBy: {
 106 |         createdAt: 'desc'
 107 |       },
 108 |       include: {
 109 |         webhooks: {
 110 |           orderBy: {
 111 |             createdAt: 'desc'
 112 |           },
 113 |           take: 1
 114 |         }
 115 |       }
 116 |     });
 117 |   }
 118 | 
 119 |   if (!payment) {
 120 |     // No payment found, redirect to course page
 121 |     redirect(`/courses/${courseId}`);
 122 |   }
 123 | 
 124 |   // Check enrollment status
 125 |   const enrollment = await prisma.enrollment.findUnique({
 126 |     where: {
 127 |       userId_courseId: {
 128 |         userId: session.user.id,
 129 |         courseId: courseId
 130 |       }
 131 |     },
 132 |     select: {
 133 |       id: true,
 134 |       enrolledAt: true
 135 |     }
 136 |   });
 137 | 
 138 |   // Determine result status based on URL params and payment status
 139 |   let resultStatus: 'success' | 'pending' | 'failed' = 'pending';
 140 |   
 141 |   if (success === 'true' || payment.status === 'COMPLETED') {
 142 |     resultStatus = 'success';
 143 |   } else if (success === 'false' || payment.status === 'FAILED') {
 144 |     resultStatus = 'failed';
 145 |   } else if (pending === 'true' || payment.status === 'PENDING') {
 146 |     resultStatus = 'pending';
 147 |   }
 148 | 
 149 |   return (
 150 |     <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50">
 151 |       <div className="container mx-auto px-4 py-8">
 152 |         <PaymentResultPage
 153 |           course={course}
 154 |           payment={{
 155 |             id: payment.id,
 156 |             status: payment.status,
 157 |             amount: Number(payment.amount),
 158 |             currency: payment.currency,
 159 |             createdAt: payment.createdAt,
 160 |             completedAt: payment.completedAt,
 161 |             failureReason: payment.failureReason,
 162 |             paymobTransactionId: payment.paymobTransactionId ? Number(payment.paymobTransactionId) : null
 163 |           }}
 164 |           enrollment={enrollment}
 165 |           resultStatus={resultStatus}
 166 |           user={{
 167 |             id: session.user.id,
 168 |             name: session.user.name || '',
 169 |             email: session.user.email || ''
 170 |           }}
 171 |         />
 172 |       </div>
 173 |     </div>
 174 |   );
 175 | }
```

================================================================================

## 7. src\app\courses\[courseId]\payment\success\page.tsx

**File Type:** TSX
**File Name:** page.tsx
**Full Path:** src\app\courses\[courseId]\payment\success\page.tsx

**File Size:** 3061 characters, 96 lines

### Content:

```tsx
   1 | // src/app/courses/[courseId]/payment/success/page.tsx
   2 | "use client";
   3 | 
   4 | import { useEffect, useState } from "react";
   5 | import { useParams, useSearchParams, useRouter } from "next/navigation";
   6 | import { CheckCircle, ArrowLeft, Play } from "lucide-react";
   7 | import { Button } from "@/components/ui/button";
   8 | import { Card, CardContent } from "@/components/ui/card";
   9 | import Link from "next/link";
  10 | import { coursesApi, Course } from "@/lib/api/courses";
  11 | 
  12 | export default function PaymentSuccessPage() {
  13 |   const params = useParams();
  14 |   const searchParams = useSearchParams();
  15 |   const router = useRouter();
  16 |   
  17 |   const courseId = params.courseId as string;
  18 |   const paymentId = searchParams.get('paymentId');
  19 |   
  20 |   const [course, setCourse] = useState<Course | null>(null);
  21 |   const [loading, setLoading] = useState(true);
  22 | 
  23 |   useEffect(() => {
  24 |     const fetchCourse = async () => {
  25 |       try {
  26 |         const courseData = await coursesApi.getById(courseId);
  27 |         setCourse(courseData);
  28 |       } catch (error) {
  29 |         console.error('Error fetching course:', error);
  30 |       } finally {
  31 |         setLoading(false);
  32 |       }
  33 |     };
  34 | 
  35 |     if (courseId) {
  36 |       fetchCourse();
  37 |     }
  38 |   }, [courseId]);
  39 | 
  40 |   if (loading) {
  41 |     return (
  42 |       <div className="min-h-screen flex items-center justify-center">
  43 |         <div className="animate-pulse">جاري التحميل...</div>
  44 |       </div>
  45 |     );
  46 |   }
  47 | 
  48 |   return (
  49 |     <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
  50 |       <Card className="w-full max-w-md">
  51 |         <CardContent className="text-center p-8">
  52 |           <CheckCircle className="w-16 h-16 text-green-600 mx-auto mb-4" />
  53 |           
  54 |           <h1 className="text-2xl font-bold text-green-600 mb-2">
  55 |             تم الدفع بنجاح!
  56 |           </h1>
  57 |           
  58 |           <p className="text-muted-foreground mb-6">
  59 |             تم تسجيلك في الدورة بنجاح. يمكنك الآن الوصول إلى جميع الدروس.
  60 |           </p>
  61 | 
  62 |           {course && (
  63 |             <div className="bg-muted/50 rounded-lg p-4 mb-6">
  64 |               <h3 className="font-semibold">{course.title}</h3>
  65 |               <p className="text-sm text-muted-foreground">
  66 |                 بواسطة: {course.professor.name}
  67 |               </p>
  68 |             </div>
  69 |           )}
  70 | 
  71 |           {paymentId && (
  72 |             <p className="text-xs text-muted-foreground mb-6">
  73 |               رقم العملية: {paymentId}
  74 |             </p>
  75 |           )}
  76 | 
  77 |           <div className="space-y-3">
  78 |             <Link href={`/courses/${courseId}`} className="block">
  79 |               <Button className="w-full" size="lg">
  80 |                 <Play className="w-5 h-5 mr-2" />
  81 |                 ابدأ الدورة الآن
  82 |               </Button>
  83 |             </Link>
  84 |             
  85 |             <Link href="/dashboard">
  86 |               <Button variant="outline" className="w-full">
  87 |                 <ArrowLeft className="w-4 h-4 mr-2" />
  88 |                 العودة للوحة التحكم
  89 |               </Button>
  90 |             </Link>
  91 |           </div>
  92 |         </CardContent>
  93 |       </Card>
  94 |     </div>
  95 |   );
  96 | }
```

================================================================================

## 8. src\app\courses\page.tsx

**File Type:** TSX
**File Name:** page.tsx
**Full Path:** src\app\courses\page.tsx

**File Size:** 3799 characters, 117 lines

### Content:

```tsx
   1 | // src/app/courses/page.tsx
   2 | import { Metadata } from 'next';
   3 | import { auth } from '@/lib/auth';
   4 | import prisma from '@/lib/prisma';
   5 | import { ModernCourseCatalog } from '@/components/course/ModernCourseCatalog';
   6 | import { StructuredData } from '@/components/seo/StructuredData';
   7 | 
   8 | export const metadata: Metadata = {
   9 |   title: 'تصفح الدورات التعليمية - منصة التعلم الإلكتروني',
  10 |   description: 'اكتشف مجموعة واسعة من الدورات التعليمية في مختلف المجالات. ابحث وصفي الدورات حسب الفئة والسعر والمستوى.',
  11 |   keywords: 'دورات تعليمية, تصفح الدورات, دورات أونلاين, تعلم إلكتروني, فلترة الدورات',
  12 |   openGraph: {
  13 |     title: 'تصفح الدورات التعليمية - منصة التعلم الإلكتروني',
  14 |     description: 'اكتشف مجموعة واسعة من الدورات التعليمية في مختلف المجالات.',
  15 |     url: '/courses',
  16 |     type: 'website',
  17 |   },
  18 |   twitter: {
  19 |     card: 'summary_large_image',
  20 |     title: 'تصفح الدورات التعليمية',
  21 |     description: 'اكتشف مجموعة واسعة من الدورات التعليمية في مختلف المجالات.',
  22 |   },
  23 |   robots: {
  24 |     index: true,
  25 |     follow: true,
  26 |   },
  27 | };
  28 | 
  29 | interface CoursesPageProps {
  30 |   searchParams: Promise<{
  31 |     page?: string;
  32 |     category?: string;
  33 |     search?: string;
  34 |     priceRange?: string;
  35 |     level?: string;
  36 |     sort?: string;
  37 |     limit?: string;
  38 |   }>;
  39 | }
  40 | 
  41 | export default async function CoursesPage({ searchParams }: CoursesPageProps) {
  42 |   const session = await auth();
  43 |   const resolvedSearchParams = await searchParams;
  44 |   
  45 |   // Parse search parameters
  46 |   const filters = {
  47 |     page: parseInt(resolvedSearchParams.page || '1'),
  48 |     category: resolvedSearchParams.category,
  49 |     search: resolvedSearchParams.search,
  50 |     priceRange: resolvedSearchParams.priceRange,
  51 |     level: resolvedSearchParams.level,
  52 |     sort: resolvedSearchParams.sort || 'newest',
  53 |     limit: parseInt(resolvedSearchParams.limit || '12'),
  54 |   };
  55 | 
  56 |   // Fetch initial data for better performance
  57 |   const [categories, featuredCourses, stats] = await Promise.all([
  58 |     prisma.category.findMany({
  59 |       select: { id: true, name: true, iconUrl: true },
  60 |       orderBy: { name: 'asc' }
  61 |     }).then(cats => cats.map(cat => ({
  62 |       ...cat,
  63 |       iconUrl: cat.iconUrl || undefined
  64 |     }))),
  65 |     prisma.course.findMany({
  66 |       where: { isPublished: true },
  67 |       include: {
  68 |         professor: { select: { id: true, name: true } },
  69 |         category: { select: { id: true, name: true } },
  70 |         _count: { select: { enrollments: true, lessons: true } },
  71 |         payments: {
  72 |           where: { status: 'COMPLETED' },
  73 |           select: { amount: true }
  74 |         }
  75 |       },
  76 |       orderBy: { createdAt: 'desc' },
  77 |       take: 8
  78 |     }),
  79 |     prisma.$transaction([
  80 |       prisma.course.count({ where: { isPublished: true } }),
  81 |       prisma.user.count({ where: { role: 'STUDENT' } }),
  82 |       prisma.user.count({ where: { role: 'PROFESSOR' } })
  83 |     ])
  84 |   ]);
  85 | 
  86 |   // Transform courses data
  87 |   const transformedCourses = featuredCourses.map(course => ({
  88 |     ...course,
  89 |     price: course.price ? Number(course.price) : null,
  90 |     revenue: course.payments.reduce((sum, p) => sum + Number(p.amount), 0),
  91 |     createdAt: course.createdAt.toISOString(),
  92 |     updatedAt: course.updatedAt.toISOString()
  93 |   }));
  94 | 
  95 |   const [totalCourses, totalStudents, totalProfessors] = stats;
  96 | 
  97 |   return (
  98 |     <>
  99 |       <StructuredData />
 100 |       
 101 |       <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
 102 |         <ModernCourseCatalog 
 103 |           initialFilters={filters}
 104 |           userRole={session?.user?.role}
 105 |           userId={session?.user?.id}
 106 |           categories={categories}
 107 |           featuredCourses={transformedCourses}
 108 |           stats={{
 109 |             totalCourses,
 110 |             totalStudents,
 111 |             totalProfessors
 112 |           }}
 113 |         />
 114 |       </div>
 115 |     </>
 116 |   );
 117 | }
```

================================================================================

## 9. src\app\professor\analytics\page.tsx

**File Type:** TSX
**File Name:** page.tsx
**Full Path:** src\app\professor\analytics\page.tsx

**File Size:** 11314 characters, 304 lines

### Content:

```tsx
   1 | // src/app/professor/analytics/page.tsx
   2 | import { auth } from "@/lib/auth";
   3 | import { redirect } from "next/navigation";
   4 | import prisma from "@/lib/prisma";
   5 | import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
   6 | import { Button } from "@/components/ui/button";
   7 | import { Badge } from "@/components/ui/badge";
   8 | import { ProfessorAnalytics } from "@/components/analytics/ProfessorAnalytics";
   9 | import { 
  10 |   BarChart3, 
  11 |   BookOpen, 
  12 |   Users, 
  13 |   TrendingUp,
  14 |   ArrowLeft,
  15 |   Calendar,
  16 |   Clock
  17 | } from "lucide-react";
  18 | import Link from "next/link";
  19 | 
  20 | interface SearchParams {
  21 |   courseId?: string;
  22 | }
  23 | 
  24 | export default async function ProfessorAnalyticsPage({
  25 |   searchParams
  26 | }: {
  27 |   searchParams: SearchParams;
  28 | }) {
  29 |   const session = await auth();
  30 |   
  31 |   if (!session?.user || session.user.role !== 'PROFESSOR') {
  32 |     redirect('/login');
  33 |   }
  34 | 
  35 |   // Get professor's courses for selection
  36 |   const courses = await prisma.course.findMany({
  37 |     where: { professorId: session.user.id },
  38 |     include: {
  39 |       category: {
  40 |         select: { name: true }
  41 |       },
  42 |       _count: {
  43 |         select: {
  44 |           enrollments: true,
  45 |           lessons: true
  46 |         }
  47 |       }
  48 |     },
  49 |     orderBy: { createdAt: 'desc' }
  50 |   });
  51 | 
  52 |   // Get overall statistics
  53 |   const overallStats = await prisma.$transaction([
  54 |     // Total students across all courses
  55 |     prisma.enrollment.count({
  56 |       where: {
  57 |         course: { professorId: session.user.id }
  58 |       }
  59 |     }),
  60 |     // Total watch time across all courses
  61 |     prisma.viewingHistory.aggregate({
  62 |       where: {
  63 |         lesson: {
  64 |           course: { professorId: session.user.id }
  65 |         }
  66 |       },
  67 |       _sum: {
  68 |         watchedDuration: true
  69 |       }
  70 |     }),
  71 |     // Completed lessons count
  72 |     prisma.viewingHistory.count({
  73 |       where: {
  74 |         lesson: {
  75 |           course: { professorId: session.user.id }
  76 |         },
  77 |         completed: true
  78 |       }
  79 |     }),
  80 |     // Recent activity (last 7 days)
  81 |     prisma.viewingHistory.count({
  82 |       where: {
  83 |         lesson: {
  84 |           course: { professorId: session.user.id }
  85 |         },
  86 |         updatedAt: {
  87 |           gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
  88 |         }
  89 |       }
  90 |     })
  91 |   ]);
  92 | 
  93 |   const [totalStudents, totalWatchTimeResult, completedLessons, recentActivity] = overallStats;
  94 |   const totalWatchTime = totalWatchTimeResult._sum.watchedDuration || 0;
  95 | 
  96 |   // Format time display
  97 |   const formatTime = (seconds: number) => {
  98 |     const hours = Math.floor(seconds / 3600);
  99 |     const minutes = Math.floor((seconds % 3600) / 60);
 100 |     
 101 |     if (hours > 0) {
 102 |       return `${hours} ساعة ${minutes} دقيقة`;
 103 |     }
 104 |     return `${minutes} دقيقة`;
 105 |   };
 106 | 
 107 |   const selectedCourseId = searchParams.courseId;
 108 |   const selectedCourse = selectedCourseId 
 109 |     ? courses.find(c => c.id === selectedCourseId)
 110 |     : null;
 111 | 
 112 |   return (
 113 |     <div className="container mx-auto p-6 space-y-6">
 114 |       {/* Header */}
 115 |       <div className="flex items-center justify-between">
 116 |         <div className="flex items-center gap-4">
 117 |           <Button variant="outline" size="sm" asChild>
 118 |             <Link href="/professor">
 119 |               <ArrowLeft className="w-4 h-4" />
 120 |               العودة للوحة التحكم
 121 |             </Link>
 122 |           </Button>
 123 |           <div>
 124 |             <h1 className="text-3xl font-bold flex items-center gap-2">
 125 |               <BarChart3 className="w-8 h-8" />
 126 |               إحصائيات مفصلة
 127 |             </h1>
 128 |             <p className="text-muted-foreground">
 129 |               {selectedCourse 
 130 |                 ? `إحصائيات دورة: ${selectedCourse.title}`
 131 |                 : 'نظرة عامة على جميع دوراتك'
 132 |               }
 133 |             </p>
 134 |           </div>
 135 |         </div>
 136 |         <Badge variant="outline" className="text-sm">
 137 |           <Calendar className="w-3 h-3 mr-1" />
 138 |           {new Date().toLocaleDateString('ar-EG')}
 139 |         </Badge>
 140 |       </div>
 141 | 
 142 |       {/* Course Selection */}
 143 |       {!selectedCourseId && (
 144 |         <>
 145 |           {/* Overall Statistics */}
 146 |           <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
 147 |             <Card>
 148 |               <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 149 |                 <CardTitle className="text-sm font-medium">إجمالي الدورات</CardTitle>
 150 |                 <BookOpen className="h-4 w-4 text-blue-600" />
 151 |               </CardHeader>
 152 |               <CardContent>
 153 |                 <div className="text-2xl font-bold">{courses.length}</div>
 154 |                 <p className="text-xs text-muted-foreground">
 155 |                   {courses.filter(c => c.isPublished).length} منشورة
 156 |                 </p>
 157 |               </CardContent>
 158 |             </Card>
 159 | 
 160 |             <Card>
 161 |               <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 162 |                 <CardTitle className="text-sm font-medium">إجمالي الملتحقين</CardTitle>
 163 |                 <Users className="h-4 w-4 text-green-600" />
 164 |               </CardHeader>
 165 |               <CardContent>
 166 |                 <div className="text-2xl font-bold">{totalStudents}</div>
 167 |                 <p className="text-xs text-muted-foreground">
 168 |                   ملتحق مسجل
 169 |                 </p>
 170 |               </CardContent>
 171 |             </Card>
 172 | 
 173 |             <Card>
 174 |               <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 175 |                 <CardTitle className="text-sm font-medium">وقت المشاهدة الإجمالي</CardTitle>
 176 |                 <Clock className="h-4 w-4 text-purple-600" />
 177 |               </CardHeader>
 178 |               <CardContent>
 179 |                 <div className="text-2xl font-bold">{formatTime(totalWatchTime)}</div>
 180 |                 <p className="text-xs text-muted-foreground">
 181 |                   {totalStudents > 0 ? formatTime(totalWatchTime / totalStudents) : '0 دقيقة'} متوسط لكل ملتحق
 182 |                 </p>
 183 |               </CardContent>
 184 |             </Card>
 185 | 
 186 |             <Card>
 187 |               <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 188 |                 <CardTitle className="text-sm font-medium">النشاط الحديث</CardTitle>
 189 |                 <TrendingUp className="h-4 w-4 text-orange-600" />
 190 |               </CardHeader>
 191 |               <CardContent>
 192 |                 <div className="text-2xl font-bold">{recentActivity}</div>
 193 |                 <p className="text-xs text-muted-foreground">
 194 |                   نشاط خلال 7 أيام
 195 |                 </p>
 196 |               </CardContent>
 197 |             </Card>
 198 |           </div>
 199 | 
 200 |           {/* Course Selection Grid */}
 201 |           <Card>
 202 |             <CardHeader>
 203 |               <CardTitle>اختر دورة لعرض الإحصائيات المفصلة</CardTitle>
 204 |               <CardDescription>
 205 |                 انقر على أي دورة لعرض إحصائيات مفصلة عن أداء الملتحقين والدروس
 206 |               </CardDescription>
 207 |             </CardHeader>
 208 |             <CardContent>
 209 |               {courses.length === 0 ? (
 210 |                 <div className="text-center py-12">
 211 |                   <BookOpen className="w-16 h-16 mx-auto mb-4 text-muted-foreground" />
 212 |                   <h3 className="text-lg font-semibold mb-2">لا توجد دورات</h3>
 213 |                   <p className="text-muted-foreground mb-6">
 214 |                     ابدأ بإنشاء أول دورة لك لعرض الإحصائيات
 215 |                   </p>
 216 |                   <Button asChild>
 217 |                     <Link href="/professor/courses/new">
 218 |                       إنشاء دورة جديدة
 219 |                     </Link>
 220 |                   </Button>
 221 |                 </div>
 222 |               ) : (
 223 |                 <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
 224 |                   {courses.map((course) => (
 225 |                     <Link
 226 |                       key={course.id}
 227 |                       href={`/professor/analytics?courseId=${course.id}`}
 228 |                       className="block"
 229 |                     >
 230 |                       <Card className="hover:shadow-md transition-shadow cursor-pointer">
 231 |                         <CardHeader>
 232 |                           <div className="flex items-start justify-between">
 233 |                             <div className="flex-1">
 234 |                               <CardTitle className="text-lg line-clamp-2">
 235 |                                 {course.title}
 236 |                               </CardTitle>
 237 |                               <CardDescription>
 238 |                                 {course.category.name}
 239 |                               </CardDescription>
 240 |                             </div>
 241 |                             <Badge variant={course.isPublished ? "default" : "secondary"}>
 242 |                               {course.isPublished ? "منشور" : "مسودة"}
 243 |                             </Badge>
 244 |                           </div>
 245 |                         </CardHeader>
 246 |                         <CardContent>
 247 |                           <div className="grid grid-cols-2 gap-4 text-sm">
 248 |                             <div className="text-center">
 249 |                               <div className="flex items-center justify-center gap-1 text-muted-foreground mb-1">
 250 |                                 <Users className="w-3 h-3" />
 251 |                                 <span>الملتحقين</span>
 252 |                               </div>
 253 |                               <div className="font-semibold">{course._count.enrollments}</div>
 254 |                             </div>
 255 |                             <div className="text-center">
 256 |                               <div className="flex items-center justify-center gap-1 text-muted-foreground mb-1">
 257 |                                 <BookOpen className="w-3 h-3" />
 258 |                                 <span>الدروس</span>
 259 |                               </div>
 260 |                               <div className="font-semibold">{course._count.lessons}</div>
 261 |                             </div>
 262 |                           </div>
 263 |                           <div className="mt-4 text-center">
 264 |                             <Button variant="outline" size="sm" className="w-full">
 265 |                               <BarChart3 className="w-4 h-4" />
 266 |                               عرض الإحصائيات
 267 |                             </Button>
 268 |                           </div>
 269 |                         </CardContent>
 270 |                       </Card>
 271 |                     </Link>
 272 |                   ))}
 273 |                 </div>
 274 |               )}
 275 |             </CardContent>
 276 |           </Card>
 277 |         </>
 278 |       )}
 279 | 
 280 |       {/* Selected Course Analytics */}
 281 |       {selectedCourseId && selectedCourse && (
 282 |         <ProfessorAnalytics courseId={selectedCourseId} />
 283 |       )}
 284 | 
 285 |       {/* Course Not Found */}
 286 |       {selectedCourseId && !selectedCourse && (
 287 |         <Card>
 288 |           <CardContent className="text-center py-12">
 289 |             <BookOpen className="w-16 h-16 mx-auto mb-4 text-muted-foreground" />
 290 |             <h3 className="text-lg font-semibold mb-2">الدورة غير موجودة</h3>
 291 |             <p className="text-muted-foreground mb-6">
 292 |               الدورة المطلوبة غير موجودة أو غير مصرح لك بالوصول إليها
 293 |             </p>
 294 |             <Button asChild>
 295 |               <Link href="/professor/analytics">
 296 |                 العودة لقائمة الدورات
 297 |               </Link>
 298 |             </Button>
 299 |           </CardContent>
 300 |         </Card>
 301 |       )}
 302 |     </div>
 303 |   );
 304 | }
```

================================================================================

## 10. src\app\professor\courses\page.tsx

**File Type:** TSX
**File Name:** page.tsx
**Full Path:** src\app\professor\courses\page.tsx

**File Size:** 6200 characters, 174 lines

### Content:

```tsx
   1 | // src/app/professor/courses/page.tsx
   2 | import { auth } from "@/lib/auth";
   3 | import { redirect } from "next/navigation";
   4 | import prisma from "@/lib/prisma";
   5 | import { ProfessorCourseManagement } from "@/components/professor/ProfessorCourseManagement";
   6 | import { Button } from "@/components/ui/button";
   7 | import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
   8 | import { Plus, BookOpen, Users, Clock } from "lucide-react";
   9 | import Link from "next/link";
  10 | 
  11 | export default async function ProfessorCoursesPage() {
  12 |   const session = await auth();
  13 |   
  14 |   if (!session?.user || session.user.role !== 'PROFESSOR') {
  15 |     redirect('/login');
  16 |   }
  17 | 
  18 |   // Fetch professor's courses with detailed information
  19 |   const [courses, stats] = await Promise.all([
  20 |     prisma.course.findMany({
  21 |       where: { professorId: session.user.id },
  22 |       include: {
  23 |         category: {
  24 |           select: {
  25 |             id: true,
  26 |             name: true,
  27 |             slug: true
  28 |           }
  29 |         },
  30 |         _count: {
  31 |           select: {
  32 |             enrollments: true,
  33 |             lessons: true
  34 |           }
  35 |         }
  36 |       },
  37 |       orderBy: { createdAt: 'desc' }
  38 |     }),
  39 |     prisma.$transaction([
  40 |       // Total courses
  41 |       prisma.course.count({
  42 |         where: { professorId: session.user.id }
  43 |       }),
  44 |       // Published courses
  45 |       prisma.course.count({
  46 |         where: { professorId: session.user.id, isPublished: true }
  47 |       }),
  48 |       // Total enrollments
  49 |       prisma.enrollment.count({
  50 |         where: {
  51 |           course: { professorId: session.user.id }
  52 |         }
  53 |       })
  54 |     ])
  55 |   ]);
  56 |   const serializedCourses = courses.map(course => ({
  57 |     ...course,
  58 |     price: course.price ? Number(course.price) : null, // Also handle Decimal conversion here
  59 |     createdAt: course.createdAt.toISOString(),
  60 |     updatedAt: course.updatedAt.toISOString(),
  61 |   }));
  62 | 
  63 |   const [totalCourses, publishedCourses, totalEnrollments] = stats;
  64 | 
  65 |   // Calculate additional statistics
  66 |   const draftCourses = totalCourses - publishedCourses;
  67 |   const totalLessons = courses.reduce((sum, course) => sum + course._count.lessons, 0);
  68 | 
  69 |   return (
  70 |     <div className="container mx-auto p-6 space-y-6">
  71 |       {/* Header */}
  72 |       <div className="flex justify-between items-center">
  73 |         <div>
  74 |           <h1 className="text-3xl font-bold">إدارة الدورات</h1>
  75 |           <p className="text-muted-foreground">إدارة وتنظيم دوراتك التعليمية</p>
  76 |         </div>
  77 |         <Button asChild>
  78 |           <Link href="/professor/courses/new">
  79 |             <Plus className="w-4 h-4" />
  80 |             إنشاء دورة جديدة
  81 |           </Link>
  82 |         </Button>
  83 |       </div>
  84 | 
  85 |       {/* Statistics Cards */}
  86 |       <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
  87 |         <Card>
  88 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  89 |             <CardTitle className="text-sm font-medium">إجمالي الدورات</CardTitle>
  90 |             <BookOpen className="h-4 w-4 text-muted-foreground" />
  91 |           </CardHeader>
  92 |           <CardContent>
  93 |             <div className="text-2xl font-bold">{totalCourses}</div>
  94 |             <p className="text-xs text-muted-foreground">
  95 |               {publishedCourses} منشورة، {draftCourses} مسودة
  96 |             </p>
  97 |           </CardContent>
  98 |         </Card>
  99 | 
 100 |         <Card>
 101 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 102 |             <CardTitle className="text-sm font-medium">الملتحقين المسجلون</CardTitle>
 103 |             <Users className="h-4 w-4 text-muted-foreground" />
 104 |           </CardHeader>
 105 |           <CardContent>
 106 |             <div className="text-2xl font-bold">{totalEnrollments}</div>
 107 |             <p className="text-xs text-muted-foreground">
 108 |               في جميع الدورات
 109 |             </p>
 110 |           </CardContent>
 111 |         </Card>
 112 | 
 113 |         <Card>
 114 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 115 |             <CardTitle className="text-sm font-medium">إجمالي الدروس</CardTitle>
 116 |             <Clock className="h-4 w-4 text-muted-foreground" />
 117 |           </CardHeader>
 118 |           <CardContent>
 119 |             <div className="text-2xl font-bold">{totalLessons}</div>
 120 |             <p className="text-xs text-muted-foreground">
 121 |               درس في جميع الدورات
 122 |             </p>
 123 |           </CardContent>
 124 |         </Card>
 125 | 
 126 |         <Card>
 127 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 128 |             <CardTitle className="text-sm font-medium">متوسط الملتحقين</CardTitle>
 129 |             <Users className="h-4 w-4 text-muted-foreground" />
 130 |           </CardHeader>
 131 |           <CardContent>
 132 |             <div className="text-2xl font-bold">
 133 |               {totalCourses > 0 ? Math.round(totalEnrollments / totalCourses * 10) / 10 : 0}
 134 |             </div>
 135 |             <p className="text-xs text-muted-foreground">
 136 |               ملتحق لكل دورة
 137 |             </p>
 138 |           </CardContent>
 139 |         </Card>
 140 |       </div>
 141 | 
 142 |       {/* Courses Management */}
 143 |       <Card>
 144 |         <CardHeader>
 145 |           <CardTitle>دوراتك التعليمية</CardTitle>
 146 |           <CardDescription>
 147 |             إدارة وتنظيم جميع دوراتك التعليمية
 148 |           </CardDescription>
 149 |         </CardHeader>
 150 |         <CardContent>
 151 |           {courses.length === 0 ? (
 152 |             <div className="text-center py-12">
 153 |               <BookOpen className="mx-auto h-16 w-16 text-muted-foreground" />
 154 |               <h3 className="mt-4 text-lg font-semibold">لا توجد دورات</h3>
 155 |               <p className="mt-2 text-muted-foreground">
 156 |                 ابدأ رحلتك التعليمية بإنشاء أول دورة لك
 157 |               </p>
 158 |               <div className="mt-6">
 159 |                 <Button asChild size="lg">
 160 |                   <Link href="/professor/courses/new">
 161 |                     <Plus className="w-5 h-5" />
 162 |                     إنشاء دورة جديدة
 163 |                   </Link>
 164 |                 </Button>
 165 |               </div>
 166 |             </div>
 167 |           ) : (
 168 |             <ProfessorCourseManagement courses={serializedCourses} />
 169 |           )}
 170 |         </CardContent>
 171 |       </Card>
 172 |     </div>
 173 |   );
 174 | }
```

================================================================================

## 11. src\components\admin\AdminDashboard.tsx

**File Type:** TSX
**File Name:** AdminDashboard.tsx
**Full Path:** src\components\admin\AdminDashboard.tsx

**File Size:** 28221 characters, 652 lines

### Content:

```tsx
   1 | // src/components/admin/AdminDashboard.tsx - Enterprise Admin Dashboard
   2 | 'use client';
   3 | 
   4 | import { useState, useEffect, useCallback } from 'react';
   5 | import { motion, AnimatePresence } from 'framer-motion';
   6 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   7 | import { Button } from '@/components/ui/button';
   8 | import { Badge } from '@/components/ui/badge';
   9 | import { Switch } from '@/components/ui/switch';
  10 | import { LoadingState } from '@/components/shared/LoadingState';
  11 | import { FadeInScroll, StaggerChildren, StaggerItem } from '@/components/ui/micro-interactions';
  12 | import { 
  13 |   Users, 
  14 |   BookOpen, 
  15 |   DollarSign, 
  16 |   UserCheck,
  17 |   Settings,
  18 |   Bell,
  19 |   Download,
  20 |   RefreshCw,
  21 |   Grid3X3,
  22 |   BarChart3,
  23 |   Moon,
  24 |   Sun,
  25 |   Minimize2,
  26 |   Filter,
  27 |   AlertTriangle,
  28 |   Clock,
  29 |   Zap,
  30 |   Shield,
  31 |   Database,
  32 |   Server,
  33 |   Wifi,
  34 |   HardDrive
  35 | } from 'lucide-react';
  36 | import { PlatformOverview } from './PlatformOverview';
  37 | import { RevenueAnalytics } from './RevenueAnalytics';
  38 | import { UserManagement } from './UserManagement';
  39 | import { CourseManagement } from './CourseManagement';
  40 | import { CategoryManagement } from './CategoryManagement';
  41 | import { cn } from '@/lib/utils';
  42 | import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
  43 | 
  44 | interface DashboardStats {
  45 |   totalUsers: number;
  46 |   totalStudents: number;
  47 |   totalProfessors: number;
  48 |   totalCourses: number;
  49 |   totalCategories: number;
  50 |   totalRevenue: number;
  51 |   monthlyRevenue: number;
  52 |   totalEnrollments: number;
  53 |   activeCourses: number;
  54 |   certificatesIssued: number;
  55 |   recentActivity: ActivityItem[];
  56 |   systemHealth: SystemHealth;
  57 |   realTimeMetrics: RealTimeMetrics;
  58 | }
  59 | 
  60 | interface ActivityItem {
  61 |   id: string;
  62 |   type: 'enrollment' | 'payment' | 'course_created' | 'certificate_issued';
  63 |   description: string;
  64 |   timestamp: Date;
  65 |   user?: string;
  66 |   amount?: number;
  67 | }
  68 | 
  69 | interface SystemHealth {
  70 |   database: { status: 'healthy' | 'warning' | 'error'; responseTime: number };
  71 |   server: { status: 'healthy' | 'warning' | 'error'; cpuUsage: number; memoryUsage: number };
  72 |   storage: { status: 'healthy' | 'warning' | 'error'; usedSpace: number; totalSpace: number };
  73 |   network: { status: 'healthy' | 'warning' | 'error'; latency: number };
  74 | }
  75 | 
  76 | interface RealTimeMetrics {
  77 |   activeUsers: number;
  78 |   ongoingLessons: number;
  79 |   recentSignups: number;
  80 |   pendingPayments: number;
  81 | }
  82 | 
  83 | interface DashboardWidget {
  84 |   id: string;
  85 |   title: string;
  86 |   type: 'stat' | 'chart' | 'activity' | 'health';
  87 |   size: 'small' | 'medium' | 'large';
  88 |   position: { x: number; y: number };
  89 |   visible: boolean;
  90 | }
  91 | 
  92 | export function AdminDashboard() {
  93 |   const [stats, setStats] = useState<DashboardStats | null>(null);
  94 |   const [isLoading, setIsLoading] = useState(true);
  95 |   const [activeTab, setActiveTab] = useState('overview');
  96 |   const [isDarkMode, setIsDarkMode] = useState(false);
  97 |   const [isCustomizing, setIsCustomizing] = useState(false);
  98 |   const [widgets, setWidgets] = useState<DashboardWidget[]>([]);
  99 |   const [notifications, setNotifications] = useState<any[]>([]);
 100 |   const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
 101 | 
 102 |   // Real-time data fetching
 103 |   const fetchDashboardStats = useCallback(async () => {
 104 |     try {
 105 |       const response = await fetch('/api/admin/dashboard-stats');
 106 |       const data = await response.json();
 107 |       setStats(data);
 108 |       setLastUpdate(new Date());
 109 |     } catch (error) {
 110 |       console.error('Failed to fetch dashboard stats:', error);
 111 |     } finally {
 112 |       setIsLoading(false);
 113 |     }
 114 |   }, []);
 115 | 
 116 |   // WebSocket connection for real-time updates
 117 |   useEffect(() => {
 118 |     fetchDashboardStats();
 119 |     
 120 |     // Set up real-time updates every 30 seconds
 121 |     const interval = setInterval(fetchDashboardStats, 30000);
 122 |     
 123 |     // WebSocket connection for real-time notifications
 124 |     const ws = new WebSocket(process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:3001');
 125 |     
 126 |     ws.onmessage = (event) => {
 127 |       const data = JSON.parse(event.data);
 128 |       if (data.type === 'dashboard_update') {
 129 |         setStats(prev => prev ? { ...prev, ...data.payload } : null);
 130 |         setLastUpdate(new Date());
 131 |       } else if (data.type === 'notification') {
 132 |         setNotifications(prev => [data.payload, ...prev.slice(0, 9)]);
 133 |       }
 134 |     };
 135 | 
 136 |     return () => {
 137 |       clearInterval(interval);
 138 |       ws.close();
 139 |     };
 140 |   }, [fetchDashboardStats]);
 141 | 
 142 |   // Initialize widgets layout
 143 |   useEffect(() => {
 144 |     const defaultWidgets: DashboardWidget[] = [
 145 |       { id: 'users', title: 'المستخدمين', type: 'stat', size: 'small', position: { x: 0, y: 0 }, visible: true },
 146 |       { id: 'courses', title: 'الدورات', type: 'stat', size: 'small', position: { x: 1, y: 0 }, visible: true },
 147 |       { id: 'revenue', title: 'الإيرادات', type: 'stat', size: 'small', position: { x: 2, y: 0 }, visible: true },
 148 |       { id: 'activity', title: 'النشاط الحديث', type: 'activity', size: 'large', position: { x: 0, y: 1 }, visible: true },
 149 |       { id: 'health', title: 'حالة النظام', type: 'health', size: 'medium', position: { x: 2, y: 1 }, visible: true }
 150 |     ];
 151 |     setWidgets(defaultWidgets);
 152 |   }, []);
 153 | 
 154 |   const handleRefresh = () => {
 155 |     setIsLoading(true);
 156 |     fetchDashboardStats();
 157 |   };
 158 | 
 159 |   const toggleWidget = (widgetId: string) => {
 160 |     setWidgets(prev => prev.map(w => 
 161 |       w.id === widgetId ? { ...w, visible: !w.visible } : w
 162 |     ));
 163 |   };
 164 | 
 165 |   const getStatusColor = (status: 'healthy' | 'warning' | 'error') => {
 166 |     switch (status) {
 167 |       case 'healthy': return 'text-green-600 bg-green-100';
 168 |       case 'warning': return 'text-yellow-600 bg-yellow-100';
 169 |       case 'error': return 'text-red-600 bg-red-100';
 170 |       default: return 'text-neutral-600 bg-neutral-100';
 171 |     }
 172 |   };
 173 | 
 174 | 
 175 | 
 176 |   if (isLoading) {
 177 |     return (
 178 |       <div className={cn("min-h-screen transition-colors duration-300", isDarkMode && "dark bg-neutral-900")}>
 179 |         <LoadingState 
 180 |           cardCount={8} 
 181 |           gridCols="grid-cols-1 md:grid-cols-2 lg:grid-cols-4"
 182 |         />
 183 |       </div>
 184 |     );
 185 |   }
 186 | 
 187 |   if (!stats) {
 188 |     return (
 189 |       <div className={cn("min-h-screen transition-colors duration-300", isDarkMode && "dark bg-neutral-900")}>
 190 |         <div className="text-center py-12">
 191 |           <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
 192 |             <AlertTriangle className="w-8 h-8 text-red-600" />
 193 |           </div>
 194 |           <h3 className="text-lg font-semibold text-neutral-900 dark:text-black font-display mb-2">
 195 |             خطأ في تحميل البيانات
 196 |           </h3>
 197 |           <p className="text-neutral-600 dark:text-neutral-400 font-primary mb-4">
 198 |             فشل في تحميل بيانات لوحة التحكم
 199 |           </p>
 200 |           <Button onClick={handleRefresh}>
 201 |             <RefreshCw className="w-4 h-4 ml-2" />
 202 |             إعادة المحاولة
 203 |           </Button>
 204 |         </div>
 205 |       </div>
 206 |     );
 207 |   }
 208 | 
 209 |   return (
 210 |     <div className={cn("min-h-screen transition-colors duration-300", isDarkMode && "dark bg-neutral-900")}>
 211 |       <div className="space-y-6 p-6">
 212 |         {/* Enhanced Header */}
 213 |         <FadeInScroll>
 214 |           <div className="flex items-center justify-between">
 215 |             <div>
 216 |               <h1 className="text-3xl font-bold text-neutral-900 dark:text-black font-display">
 217 |                 لوحة التحكم الإدارية
 218 |               </h1>
 219 |               <div className="flex items-center gap-4 mt-2">
 220 |                 <p className="text-neutral-600 dark:text-neutral-400 font-primary">
 221 |                   إدارة شاملة للمنصة التعليمية
 222 |                 </p>
 223 |                 <div className="flex items-center gap-2 text-sm text-neutral-500 dark:text-neutral-400">
 224 |                   <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
 225 |                   <span className="font-primary">متصل</span>
 226 |                 </div>
 227 |               </div>
 228 |             </div>
 229 |             
 230 |             <div className="flex items-center gap-3">
 231 |               {/* Real-time Status */}
 232 |               <div className="flex items-center gap-2 px-3 py-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg">
 233 |                 <Zap className="w-4 h-4 text-green-500" />
 234 |                 <span className="text-sm font-primary text-neutral-700 dark:text-neutral-300">
 235 |                   آخر تحديث: {lastUpdate.toLocaleTimeString('ar-EG')}
 236 |                 </span>
 237 |               </div>
 238 | 
 239 |               {/* Notifications */}
 240 |               <div className="relative">
 241 |                 <Button variant="outline" size="sm">
 242 |                   <Bell className="w-4 h-4" />
 243 |                   {notifications.length > 0 && (
 244 |                     <Badge className="absolute -top-2 -right-2 w-5 h-5 p-0 flex items-center justify-center text-xs">
 245 |                       {notifications.length}
 246 |                     </Badge>
 247 |                   )}
 248 |                 </Button>
 249 |               </div>
 250 | 
 251 |               {/* Dark Mode Toggle */}
 252 |               <div className="flex items-center gap-2">
 253 |                 <Sun className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
 254 |                 <Switch
 255 |                   checked={isDarkMode}
 256 |                   onCheckedChange={setIsDarkMode}
 257 |                 />
 258 |                 <Moon className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
 259 |               </div>
 260 | 
 261 |               {/* Dashboard Controls */}
 262 |               <div className="flex items-center gap-2">
 263 |                 <Button variant="outline" size="sm" onClick={handleRefresh}>
 264 |                   <RefreshCw className="w-4 h-4" />
 265 |                 </Button>
 266 |                 
 267 |                 <Button 
 268 |                   variant="outline" 
 269 |                   size="sm"
 270 |                   onClick={() => setIsCustomizing(!isCustomizing)}
 271 |                 >
 272 |                   <Settings className="w-4 h-4" />
 273 |                 </Button>
 274 |                 
 275 |                 <Button variant="outline" size="sm">
 276 |                   <Download className="w-4 h-4" />
 277 |                 </Button>
 278 |               </div>
 279 |             </div>
 280 |           </div>
 281 |         </FadeInScroll>
 282 | 
 283 |         {/* Widget Customization Panel */}
 284 |         <AnimatePresence>
 285 |           {isCustomizing && (
 286 |             <motion.div
 287 |               initial={{ opacity: 0, height: 0 }}
 288 |               animate={{ opacity: 1, height: 'auto' }}
 289 |               exit={{ opacity: 0, height: 0 }}
 290 |               className="bg-neutral-50 dark:bg-neutral-800 rounded-lg p-4 border"
 291 |             >
 292 |               <div className="flex items-center justify-between mb-4">
 293 |                 <h3 className="font-semibold text-neutral-900 dark:text-black font-display">
 294 |                   تخصيص الويدجت
 295 |                 </h3>
 296 |                 <Button variant="ghost" size="sm" onClick={() => setIsCustomizing(false)}>
 297 |                   <Minimize2 className="w-4 h-4" />
 298 |                 </Button>
 299 |               </div>
 300 |               <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
 301 |                 {widgets.map((widget) => (
 302 |                   <div key={widget.id} className="flex items-center gap-2">
 303 |                     <Switch
 304 |                       checked={widget.visible}
 305 |                       onCheckedChange={() => toggleWidget(widget.id)}
 306 |                     />
 307 |                     <span className="text-sm font-primary text-neutral-700 dark:text-neutral-300">
 308 |                       {widget.title}
 309 |                     </span>
 310 |                   </div>
 311 |                 ))}
 312 |               </div>
 313 |             </motion.div>
 314 |           )}
 315 |         </AnimatePresence>
 316 | 
 317 |         {/* Real-time Metrics Bar */}
 318 |         <FadeInScroll>
 319 |           <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
 320 |             <Card className="bg-gradient-to-r from-blue-500 to-blue-600 text-black border-0">
 321 |               <CardContent className="p-4">
 322 |                 <div className="flex items-center justify-between">
 323 |                   <div>
 324 |                     <p className="text-blue-100 text-sm font-primary">المستخدمين النشطين</p>
 325 |                     <p className="text-2xl font-bold font-display">
 326 |                       {stats.realTimeMetrics?.activeUsers || 0}
 327 |                     </p>
 328 |                   </div>
 329 |                   <Users className="w-8 h-8 text-blue-200" />
 330 |                 </div>
 331 |               </CardContent>
 332 |             </Card>
 333 | 
 334 |             <Card className="bg-gradient-to-r from-green-500 to-green-600 text-black border-0">
 335 |               <CardContent className="p-4">
 336 |                 <div className="flex items-center justify-between">
 337 |                   <div>
 338 |                     <p className="text-green-100 text-sm font-primary">دروس جارية</p>
 339 |                     <p className="text-2xl font-bold font-display">
 340 |                       {stats.realTimeMetrics?.ongoingLessons || 0}
 341 |                     </p>
 342 |                   </div>
 343 |                   <BookOpen className="w-8 h-8 text-green-200" />
 344 |                 </div>
 345 |               </CardContent>
 346 |             </Card>
 347 | 
 348 |             <Card className="bg-gradient-to-r from-purple-500 to-purple-600 text-black border-0">
 349 |               <CardContent className="p-4">
 350 |                 <div className="flex items-center justify-between">
 351 |                   <div>
 352 |                     <p className="text-purple-100 text-sm font-primary">تسجيلات حديثة</p>
 353 |                     <p className="text-2xl font-bold font-display">
 354 |                       {stats.realTimeMetrics?.recentSignups || 0}
 355 |                     </p>
 356 |                   </div>
 357 |                   <UserCheck className="w-8 h-8 text-purple-200" />
 358 |                 </div>
 359 |               </CardContent>
 360 |             </Card>
 361 | 
 362 |             <Card className="bg-gradient-to-r from-orange-500 to-orange-600 text-black border-0">
 363 |               <CardContent className="p-4">
 364 |                 <div className="flex items-center justify-between">
 365 |                   <div>
 366 |                     <p className="text-orange-100 text-sm font-primary">مدفوعات معلقة</p>
 367 |                     <p className="text-2xl font-bold font-display">
 368 |                       {stats.realTimeMetrics?.pendingPayments || 0}
 369 |                     </p>
 370 |                   </div>
 371 |                   <Clock className="w-8 h-8 text-orange-200" />
 372 |                 </div>
 373 |               </CardContent>
 374 |             </Card>
 375 |           </div>
 376 |         </FadeInScroll>
 377 | 
 378 |         {/* Main Stats Grid */}
 379 |         <StaggerChildren className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
 380 |           {widgets.filter(w => w.visible && w.type === 'stat').map((widget) => (
 381 |             <StaggerItem key={widget.id}>
 382 |               <motion.div
 383 |                 whileHover={{ scale: 1.02 }}
 384 |                 transition={{ duration: 0.2 }}
 385 |               >
 386 |                 <Card className="hover:shadow-lg transition-all duration-200 dark:bg-neutral-800 dark:border-neutral-700">
 387 |                   <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 388 |                     <CardTitle className="text-sm font-medium text-neutral-600 dark:text-neutral-400 font-primary">
 389 |                       {widget.id === 'users' && 'إجمالي المستخدمين'}
 390 |                       {widget.id === 'courses' && 'إجمالي الدورات'}
 391 |                       {widget.id === 'revenue' && 'إجمالي الإيرادات'}
 392 |                     </CardTitle>
 393 |                     {widget.id === 'users' && <Users className="h-4 w-4 text-neutral-500" />}
 394 |                     {widget.id === 'courses' && <BookOpen className="h-4 w-4 text-neutral-500" />}
 395 |                     {widget.id === 'revenue' && <DollarSign className="h-4 w-4 text-neutral-500" />}
 396 |                   </CardHeader>
 397 |                   <CardContent>
 398 |                     <div className="text-2xl font-bold text-neutral-900 dark:text-black font-display">
 399 |                       {widget.id === 'users' && stats.totalUsers}
 400 |                       {widget.id === 'courses' && stats.totalCourses}
 401 |                       {widget.id === 'revenue' && new Intl.NumberFormat('ar-EG', {
 402 |                         style: 'currency',
 403 |                         currency: 'EGP',
 404 |                         minimumFractionDigits: 0
 405 |                       }).format(stats.totalRevenue)}
 406 |                     </div>
 407 |                     <p className="text-xs text-neutral-500 dark:text-neutral-400 font-primary mt-1">
 408 |                       {widget.id === 'users' && `${stats.totalStudents} ملتحق • ${stats.totalProfessors} مدرس`}
 409 |                       {widget.id === 'courses' && `${stats.activeCourses} دورة نشطة`}
 410 |                       {widget.id === 'revenue' && `${new Intl.NumberFormat('ar-EG', {
 411 |                         style: 'currency',
 412 |                         currency: 'EGP',
 413 |                         minimumFractionDigits: 0
 414 |                       }).format(stats.monthlyRevenue)} هذا الشهر`}
 415 |                     </p>
 416 |                   </CardContent>
 417 |                 </Card>
 418 |               </motion.div>
 419 |             </StaggerItem>
 420 |           ))}
 421 | 
 422 |           {/* Additional Stats */}
 423 |           <StaggerItem>
 424 |             <Card className="hover:shadow-lg transition-all duration-200 dark:bg-neutral-800 dark:border-neutral-700">
 425 |               <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 426 |                 <CardTitle className="text-sm font-medium text-neutral-600 dark:text-neutral-400 font-primary">
 427 |                   التسجيلات
 428 |                 </CardTitle>
 429 |                 <UserCheck className="h-4 w-4 text-neutral-500" />
 430 |               </CardHeader>
 431 |               <CardContent>
 432 |                 <div className="text-2xl font-bold text-neutral-900 dark:text-black font-display">
 433 |                   {stats.totalEnrollments}
 434 |                 </div>
 435 |                 <p className="text-xs text-neutral-500 dark:text-neutral-400 font-primary mt-1">
 436 |                   إجمالي التسجيلات في الدورات
 437 |                 </p>
 438 |               </CardContent>
 439 |             </Card>
 440 |           </StaggerItem>
 441 |         </StaggerChildren>
 442 | 
 443 |         {/* System Health Dashboard */}
 444 |         {widgets.find(w => w.id === 'health' && w.visible) && (
 445 |           <FadeInScroll>
 446 |             <Card className="dark:bg-neutral-800 dark:border-neutral-700">
 447 |               <CardHeader>
 448 |                 <CardTitle className="flex items-center gap-2 text-neutral-900 dark:text-black font-display">
 449 |                   <Shield className="w-5 h-5 text-green-600" />
 450 |                   حالة النظام
 451 |                 </CardTitle>
 452 |               </CardHeader>
 453 |               <CardContent>
 454 |                 <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
 455 |                   {/* Database Health */}
 456 |                   <div className="p-4 border rounded-lg dark:border-neutral-600">
 457 |                     <div className="flex items-center justify-between mb-2">
 458 |                       <div className="flex items-center gap-2">
 459 |                         <Database className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
 460 |                         <span className="text-sm font-medium text-neutral-900 dark:text-black font-primary">
 461 |                           قاعدة البيانات
 462 |                         </span>
 463 |                       </div>
 464 |                       <Badge className={getStatusColor(stats.systemHealth?.database.status || 'healthy')}>
 465 |                         {stats.systemHealth?.database.status === 'healthy' ? 'سليم' : 
 466 |                          stats.systemHealth?.database.status === 'warning' ? 'تحذير' : 'خطأ'}
 467 |                       </Badge>
 468 |                     </div>
 469 |                     <p className="text-xs text-neutral-500 dark:text-neutral-400 font-primary">
 470 |                       زمن الاستجابة: {stats.systemHealth?.database.responseTime || 0}ms
 471 |                     </p>
 472 |                   </div>
 473 | 
 474 |                   {/* Server Health */}
 475 |                   <div className="p-4 border rounded-lg dark:border-neutral-600">
 476 |                     <div className="flex items-center justify-between mb-2">
 477 |                       <div className="flex items-center gap-2">
 478 |                         <Server className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
 479 |                         <span className="text-sm font-medium text-neutral-900 dark:text-black font-primary">
 480 |                           الخادم
 481 |                         </span>
 482 |                       </div>
 483 |                       <Badge className={getStatusColor(stats.systemHealth?.server.status || 'healthy')}>
 484 |                         {stats.systemHealth?.server.status === 'healthy' ? 'سليم' : 
 485 |                          stats.systemHealth?.server.status === 'warning' ? 'تحذير' : 'خطأ'}
 486 |                       </Badge>
 487 |                     </div>
 488 |                     <p className="text-xs text-neutral-500 dark:text-neutral-400 font-primary">
 489 |                       CPU: {stats.systemHealth?.server.cpuUsage || 0}% • RAM: {stats.systemHealth?.server.memoryUsage || 0}%
 490 |                     </p>
 491 |                   </div>
 492 | 
 493 |                   {/* Storage Health */}
 494 |                   <div className="p-4 border rounded-lg dark:border-neutral-600">
 495 |                     <div className="flex items-center justify-between mb-2">
 496 |                       <div className="flex items-center gap-2">
 497 |                         <HardDrive className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
 498 |                         <span className="text-sm font-medium text-neutral-900 dark:text-black font-primary">
 499 |                           التخزين
 500 |                         </span>
 501 |                       </div>
 502 |                       <Badge className={getStatusColor(stats.systemHealth?.storage.status || 'healthy')}>
 503 |                         {stats.systemHealth?.storage.status === 'healthy' ? 'سليم' : 
 504 |                          stats.systemHealth?.storage.status === 'warning' ? 'تحذير' : 'خطأ'}
 505 |                       </Badge>
 506 |                     </div>
 507 |                     <p className="text-xs text-neutral-500 dark:text-neutral-400 font-primary">
 508 |                       المستخدم: {((stats.systemHealth?.storage.usedSpace || 0) / (stats.systemHealth?.storage.totalSpace || 1) * 100).toFixed(1)}%
 509 |                     </p>
 510 |                   </div>
 511 | 
 512 |                   {/* Network Health */}
 513 |                   <div className="p-4 border rounded-lg dark:border-neutral-600">
 514 |                     <div className="flex items-center justify-between mb-2">
 515 |                       <div className="flex items-center gap-2">
 516 |                         <Wifi className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
 517 |                         <span className="text-sm font-medium text-neutral-900 dark:text-black font-primary">
 518 |                           الشبكة
 519 |                         </span>
 520 |                       </div>
 521 |                       <Badge className={getStatusColor(stats.systemHealth?.network.status || 'healthy')}>
 522 |                         {stats.systemHealth?.network.status === 'healthy' ? 'سليم' : 
 523 |                          stats.systemHealth?.network.status === 'warning' ? 'تحذير' : 'خطأ'}
 524 |                       </Badge>
 525 |                     </div>
 526 |                     <p className="text-xs text-neutral-500 dark:text-neutral-400 font-primary">
 527 |                       زمن الاستجابة: {stats.systemHealth?.network.latency || 0}ms
 528 |                     </p>
 529 |                   </div>
 530 |                 </div>
 531 |               </CardContent>
 532 |             </Card>
 533 |           </FadeInScroll>
 534 |         )}
 535 | 
 536 |         {/* Enhanced Main Content Tabs */}
 537 |         <FadeInScroll>
 538 |           <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
 539 |             <div className="flex items-center justify-between">
 540 |               <TabsList className="grid grid-cols-5 w-fit bg-neutral-100 dark:bg-neutral-800">
 541 |                 <TabsTrigger value="overview" className="font-primary">نظرة عامة</TabsTrigger>
 542 |                 <TabsTrigger value="users" className="font-primary">المستخدمين</TabsTrigger>
 543 |                 <TabsTrigger value="courses" className="font-primary">الدورات</TabsTrigger>
 544 |                 <TabsTrigger value="categories" className="font-primary">التصنيفات</TabsTrigger>
 545 |                 <TabsTrigger value="revenue" className="font-primary">الإيرادات</TabsTrigger>
 546 |               </TabsList>
 547 | 
 548 |               {/* Tab-specific Actions */}
 549 |               <div className="flex items-center gap-2">
 550 |                 {activeTab === 'overview' && (
 551 |                   <Button variant="outline" size="sm">
 552 |                     <BarChart3 className="w-4 h-4 ml-2" />
 553 |                     تقرير شامل
 554 |                   </Button>
 555 |                 )}
 556 |                 {activeTab === 'users' && (
 557 |                   <Button variant="outline" size="sm">
 558 |                     <Filter className="w-4 h-4 ml-2" />
 559 |                     فلترة متقدمة
 560 |                   </Button>
 561 |                 )}
 562 |                 {activeTab === 'revenue' && (
 563 |                   <Button variant="outline" size="sm">
 564 |                     <Download className="w-4 h-4 ml-2" />
 565 |                     تصدير البيانات
 566 |                   </Button>
 567 |                 )}
 568 |               </div>
 569 |             </div>
 570 | 
 571 |             <AnimatePresence mode="wait">
 572 |               <TabsContent value="overview" className="space-y-6">
 573 |                 <motion.div
 574 |                   key="overview"
 575 |                   initial={{ opacity: 0, y: 20 }}
 576 |                   animate={{ opacity: 1, y: 0 }}
 577 |                   exit={{ opacity: 0, y: -20 }}
 578 |                   transition={{ duration: 0.3 }}
 579 |                 >
 580 |                   <PlatformOverview stats={stats} />
 581 |                 </motion.div>
 582 |               </TabsContent>
 583 | 
 584 |               <TabsContent value="users" className="space-y-6">
 585 |                 <motion.div
 586 |                   key="users"
 587 |                   initial={{ opacity: 0, y: 20 }}
 588 |                   animate={{ opacity: 1, y: 0 }}
 589 |                   exit={{ opacity: 0, y: -20 }}
 590 |                   transition={{ duration: 0.3 }}
 591 |                 >
 592 |                   <UserManagement />
 593 |                 </motion.div>
 594 |               </TabsContent>
 595 | 
 596 |               <TabsContent value="courses" className="space-y-6">
 597 |                 <motion.div
 598 |                   key="courses"
 599 |                   initial={{ opacity: 0, y: 20 }}
 600 |                   animate={{ opacity: 1, y: 0 }}
 601 |                   exit={{ opacity: 0, y: -20 }}
 602 |                   transition={{ duration: 0.3 }}
 603 |                 >
 604 |                   <CourseManagement />
 605 |                 </motion.div>
 606 |               </TabsContent>
 607 | 
 608 |               <TabsContent value="categories" className="space-y-6">
 609 |                 <motion.div
 610 |                   key="categories"
 611 |                   initial={{ opacity: 0, y: 20 }}
 612 |                   animate={{ opacity: 1, y: 0 }}
 613 |                   exit={{ opacity: 0, y: -20 }}
 614 |                   transition={{ duration: 0.3 }}
 615 |                 >
 616 |                   <CategoryManagement categories={[]} />
 617 |                 </motion.div>
 618 |               </TabsContent>
 619 | 
 620 |               <TabsContent value="revenue" className="space-y-6">
 621 |                 <motion.div
 622 |                   key="revenue"
 623 |                   initial={{ opacity: 0, y: 20 }}
 624 |                   animate={{ opacity: 1, y: 0 }}
 625 |                   exit={{ opacity: 0, y: -20 }}
 626 |                   transition={{ duration: 0.3 }}
 627 |                 >
 628 |                   <RevenueAnalytics />
 629 |                 </motion.div>
 630 |               </TabsContent>
 631 |             </AnimatePresence>
 632 |           </Tabs>
 633 |         </FadeInScroll>
 634 | 
 635 |         {/* Floating Action Button for Quick Actions */}
 636 |         <motion.div
 637 |           className="fixed bottom-6 right-6 z-50"
 638 |           initial={{ scale: 0 }}
 639 |           animate={{ scale: 1 }}
 640 |           transition={{ delay: 1, type: "spring", stiffness: 300 }}
 641 |         >
 642 |           <Button
 643 |             size="lg"
 644 |             className="rounded-full w-14 h-14 shadow-lg hover:shadow-xl transition-all duration-200"
 645 |           >
 646 |             <Grid3X3 className="w-6 h-6" />
 647 |           </Button>
 648 |         </motion.div>
 649 |       </div>
 650 |     </div>
 651 |   );
 652 | }
```

================================================================================

## 12. src\components\admin\AdminPaymentManagement.tsx

**File Type:** TSX
**File Name:** AdminPaymentManagement.tsx
**Full Path:** src\components\admin\AdminPaymentManagement.tsx

**File Size:** 2139 characters, 69 lines

### Content:

```tsx
   1 | // src/components/admin/AdminPaymentManagement.tsx
   2 | 'use client';
   3 | 
   4 | import { useState } from 'react';
   5 | import { useAdminPayments } from '@/hooks/useAdminPayments';
   6 | import { PaymentSummaryCards } from './payment-management/PaymentSummaryCards';
   7 | import { PaymentFilters } from './payment-management/PaymentFilters';
   8 | import { PaymentList } from './payment-management/PaymentList';
   9 | import { PaymentPagination } from './payment-management/PaymentPagination';
  10 | import PaymentDetailsModal from '@/components/payment/PaymentDetailsModal';
  11 | 
  12 | /**
  13 |  * Main container component for the payment management dashboard.
  14 |  * It uses the useAdminPayments hook to manage all state and logic,
  15 |  * and composes the UI from modular sub-components.
  16 |  */
  17 | export default function AdminPaymentManagement() {
  18 |   const {
  19 |     payments,
  20 |     summary,
  21 |     isLoading,
  22 |     pagination,
  23 |     filters,
  24 |     handlePaymentAction,
  25 |     exportPayments,
  26 |     refresh,
  27 |   } = useAdminPayments();
  28 | 
  29 |   const [selectedPaymentId, setSelectedPaymentId] = useState<string | null>(
  30 |     null
  31 |   );
  32 |   const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  33 | 
  34 |   const handleViewDetails = (paymentId: string) => {
  35 |     setSelectedPaymentId(paymentId);
  36 |     setIsDetailsModalOpen(true);
  37 |   };
  38 | 
  39 |   const handleCloseModal = () => {
  40 |     setIsDetailsModalOpen(false);
  41 |     setSelectedPaymentId(null);
  42 |   };
  43 | 
  44 |   return (
  45 |     <div className="space-y-6">
  46 |       <PaymentSummaryCards summary={summary} isLoading={isLoading} />
  47 |       <PaymentFilters
  48 |         filters={filters}
  49 |         onRefresh={refresh}
  50 |         onExport={exportPayments}
  51 |       />
  52 |       <PaymentList
  53 |         payments={payments}
  54 |         totalPayments={summary?.total || 0}
  55 |         isLoading={isLoading}
  56 |         onViewDetails={handleViewDetails}
  57 |         onAction={handlePaymentAction}
  58 |       />
  59 |       <PaymentPagination pagination={pagination} />
  60 | 
  61 |       {/* The modal remains controlled by the main container component */}
  62 |       <PaymentDetailsModal
  63 |         paymentId={selectedPaymentId}
  64 |         isOpen={isDetailsModalOpen}
  65 |         onClose={handleCloseModal}
  66 |       />
  67 |     </div>
  68 |   );
  69 | }
```

================================================================================

## 13. src\components\admin\AdminStudentDetail.tsx

**File Type:** TSX
**File Name:** AdminStudentDetail.tsx
**Full Path:** src\components\admin\AdminStudentDetail.tsx

**File Size:** 3749 characters, 118 lines

### Content:

```tsx
   1 | // src/components/admin/AdminStudentDetail.tsx
   2 | 'use client';
   3 | 
   4 | import { useState } from 'react';
   5 | import { toast } from 'sonner';
   6 | import { StudentDetailHeader } from './student-detail/StudentDetailHeader';
   7 | import { StudentStats } from './student-detail/StudentStats';
   8 | import { StudentContactInfo } from './student-detail/StudentContactInfo';
   9 | import { StudentDataTabs } from './student-detail/StudentDataTabs';
  10 | import PaymentDetailsModal from '@/components/payment/PaymentDetailsModal';
  11 | 
  12 | // Keep the props interface as it defines the shape of the data for this page
  13 | interface StudentDetailProps {
  14 |   student: {
  15 |     id: string;
  16 |     name: string;
  17 |     email: string | null;
  18 |     phone: string;
  19 |     studentId: string | null;
  20 |     isActive: boolean;
  21 |     createdAt: Date;
  22 |     enrollments: Array<any>; // Using 'any' to match original, but should be typed
  23 |     payments: Array<any>;
  24 |     certificates: Array<any>;
  25 |   };
  26 | }
  27 | 
  28 | /**
  29 |  * Main container component for the student detail page.
  30 |  * It manages state and orchestrates the rendering of modular sub-components.
  31 |  */
  32 | export default function AdminStudentDetail({ student }: StudentDetailProps) {
  33 |   const [selectedPaymentId, setSelectedPaymentId] = useState<string | null>(
  34 |     null
  35 |   );
  36 |   const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  37 | 
  38 |   const handleDeleteStudent = async () => {
  39 |     try {
  40 |       const response = await fetch(`/api/admin/users/${student.id}`, {
  41 |         method: 'DELETE',
  42 |       });
  43 |       const result = await response.json();
  44 | 
  45 |       if (result.success) {
  46 |         toast.success('تم حذف الملتحق بنجاح');
  47 |         // Redirect after successful deletion
  48 |         window.location.href = '/admin/students';
  49 |       } else {
  50 |         toast.error(result.error?.message || 'فشل في حذف الملتحق');
  51 |       }
  52 |     } catch (error) {
  53 |       console.error('Delete student failed:', error);
  54 |       toast.error('حدث خطأ في حذف الملتحق');
  55 |     }
  56 |   };
  57 | 
  58 |   const handleToggleStatus = async () => {
  59 |     try {
  60 |       const response = await fetch(`/api/admin/users/${student.id}`, {
  61 |         method: 'PATCH',
  62 |         headers: { 'Content-Type': 'application/json' },
  63 |         body: JSON.stringify({ isActive: !student.isActive }),
  64 |       });
  65 |       const result = await response.json();
  66 | 
  67 |       if (result.success) {
  68 |         toast.success(
  69 |           `تم ${student.isActive ? 'إلغاء تفعيل' : 'تفعيل'} الملتحق بنجاح`
  70 |         );
  71 |         window.location.reload(); // Reload to reflect status change
  72 |       } else {
  73 |         toast.error(result.error?.message || 'فشل في تحديث حالة الملتحق');
  74 |       }
  75 |     } catch (error) {
  76 |       console.error('Toggle status failed:', error);
  77 |       toast.error('حدث خطأ في تحديث الحالة');
  78 |     }
  79 |   };
  80 | 
  81 |   const handleViewPaymentDetails = (paymentId: string) => {
  82 |     setSelectedPaymentId(paymentId);
  83 |     setIsDetailsModalOpen(true);
  84 |   };
  85 | 
  86 |   return (
  87 |     <div className="space-y-6">
  88 |       <StudentDetailHeader
  89 |         student={student}
  90 |         onToggleStatus={handleToggleStatus}
  91 |         onDelete={handleDeleteStudent}
  92 |       />
  93 | 
  94 |       <StudentStats
  95 |         enrollmentsCount={student.enrollments.length}
  96 |         certificatesCount={student.certificates.length}
  97 |         payments={student.payments}
  98 |       />
  99 | 
 100 |       <StudentContactInfo student={student} />
 101 | 
 102 |       <StudentDataTabs
 103 |         studentData={student}
 104 |         onViewPaymentDetails={handleViewPaymentDetails}
 105 |       />
 106 | 
 107 |       {/* The modal remains controlled by the main container component */}
 108 |       <PaymentDetailsModal
 109 |         paymentId={selectedPaymentId}
 110 |         isOpen={isDetailsModalOpen}
 111 |         onClose={() => {
 112 |           setIsDetailsModalOpen(false);
 113 |           setSelectedPaymentId(null);
 114 |         }}
 115 |       />
 116 |     </div>
 117 |   );
 118 | }
```

================================================================================

## 14. src\components\admin\PlatformOverview.tsx

**File Type:** TSX
**File Name:** PlatformOverview.tsx
**Full Path:** src\components\admin\PlatformOverview.tsx

**File Size:** 11102 characters, 278 lines

### Content:

```tsx
   1 | // src/components/admin/PlatformOverview.tsx
   2 | 'use client';
   3 | 
   4 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   5 | import { Badge } from '@/components/ui/badge';
   6 | import { 
   7 |   Activity, 
   8 |   Clock, 
   9 |   User, 
  10 |   BookOpen, 
  11 |   DollarSign,
  12 |   TrendingUp,
  13 |   AlertCircle,
  14 |   CheckCircle
  15 | } from 'lucide-react';
  16 | 
  17 | interface PlatformOverviewProps {
  18 |   stats: {
  19 |     totalUsers: number;
  20 |     totalStudents: number;
  21 |     totalProfessors: number;
  22 |     totalCourses: number;
  23 |     totalCategories: number;
  24 |     totalRevenue: number;
  25 |     monthlyRevenue: number;
  26 |     totalEnrollments: number;
  27 |     activeCourses: number;
  28 |     certificatesIssued: number;
  29 |     recentActivity: ActivityItem[];
  30 |   };
  31 | }
  32 | 
  33 | interface ActivityItem {
  34 |   id: string;
  35 |   type: 'enrollment' | 'payment' | 'course_created' | 'certificate_issued';
  36 |   description: string;
  37 |   timestamp: Date;
  38 |   user?: string;
  39 |   amount?: number;
  40 | }
  41 | 
  42 | export function PlatformOverview({ stats }: PlatformOverviewProps) {
  43 |   const getActivityIcon = (type: string) => {
  44 |     switch (type) {
  45 |       case 'enrollment':
  46 |         return <User className="h-4 w-4 text-blue-600" />;
  47 |       case 'payment':
  48 |         return <DollarSign className="h-4 w-4 text-green-600" />;
  49 |       case 'course_created':
  50 |         return <BookOpen className="h-4 w-4 text-purple-600" />;
  51 |       case 'certificate_issued':
  52 |         return <CheckCircle className="h-4 w-4 text-orange-600" />;
  53 |       default:
  54 |         return <Activity className="h-4 w-4 text-gray-600" />;
  55 |     }
  56 |   };
  57 | 
  58 |   const getActivityBadgeColor = (type: string) => {
  59 |     switch (type) {
  60 |       case 'enrollment':
  61 |         return 'bg-blue-100 text-blue-800';
  62 |       case 'payment':
  63 |         return 'bg-green-100 text-green-800';
  64 |       case 'course_created':
  65 |         return 'bg-purple-100 text-purple-800';
  66 |       case 'certificate_issued':
  67 |         return 'bg-orange-100 text-orange-800';
  68 |       default:
  69 |         return 'bg-gray-100 text-gray-800';
  70 |     }
  71 |   };
  72 | 
  73 |   const formatTimeAgo = (timestamp: Date) => {
  74 |     const now = new Date();
  75 |     const diff = now.getTime() - new Date(timestamp).getTime();
  76 |     const minutes = Math.floor(diff / 60000);
  77 |     const hours = Math.floor(diff / 3600000);
  78 |     const days = Math.floor(diff / 86400000);
  79 | 
  80 |     if (days > 0) return `منذ ${days} يوم`;
  81 |     if (hours > 0) return `منذ ${hours} ساعة`;
  82 |     if (minutes > 0) return `منذ ${minutes} دقيقة`;
  83 |     return 'الآن';
  84 |   };
  85 | 
  86 |   // Calculate some derived metrics
  87 |   const averageRevenuePerCourse = stats.totalCourses > 0 ? stats.totalRevenue / stats.totalCourses : 0;
  88 |   const enrollmentRate = stats.totalStudents > 0 ? (stats.totalEnrollments / stats.totalStudents) * 100 : 0;
  89 |   const courseCompletionRate = stats.certificatesIssued > 0 && stats.totalEnrollments > 0 
  90 |     ? (stats.certificatesIssued / stats.totalEnrollments) * 100 : 0;
  91 | 
  92 |   return (
  93 |     <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
  94 |       {/* Key Metrics */}
  95 |       <div className="lg:col-span-2 space-y-6">
  96 |         {/* Performance Metrics */}
  97 |         <Card>
  98 |           <CardHeader>
  99 |             <CardTitle className="flex items-center gap-2">
 100 |               <TrendingUp className="h-5 w-5" />
 101 |               مؤشرات الأداء الرئيسية
 102 |             </CardTitle>
 103 |           </CardHeader>
 104 |           <CardContent>
 105 |             <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
 106 |               <div className="text-center p-4 border rounded-lg">
 107 |                 <div className="text-2xl font-bold text-blue-600">
 108 |                   {enrollmentRate.toFixed(1)}%
 109 |                 </div>
 110 |                 <p className="text-sm text-muted-foreground">معدل التسجيل</p>
 111 |                 <p className="text-xs text-muted-foreground mt-1">
 112 |                   متوسط التسجيلات لكل ملتحق
 113 |                 </p>
 114 |               </div>
 115 | 
 116 |               <div className="text-center p-4 border rounded-lg">
 117 |                 <div className="text-2xl font-bold text-green-600">
 118 |                   {new Intl.NumberFormat('ar-EG', {
 119 |                     style: 'currency',
 120 |                     currency: 'EGP',
 121 |                     minimumFractionDigits: 0
 122 |                   }).format(averageRevenuePerCourse)}
 123 |                 </div>
 124 |                 <p className="text-sm text-muted-foreground">متوسط إيراد الدورة</p>
 125 |                 <p className="text-xs text-muted-foreground mt-1">
 126 |                   الإيراد لكل دورة
 127 |                 </p>
 128 |               </div>
 129 | 
 130 |               <div className="text-center p-4 border rounded-lg">
 131 |                 <div className="text-2xl font-bold text-orange-600">
 132 |                   {courseCompletionRate.toFixed(1)}%
 133 |                 </div>
 134 |                 <p className="text-sm text-muted-foreground">معدل الإكمال</p>
 135 |                 <p className="text-xs text-muted-foreground mt-1">
 136 |                   نسبة الحصول على الشهادات
 137 |                 </p>
 138 |               </div>
 139 |             </div>
 140 |           </CardContent>
 141 |         </Card>
 142 | 
 143 |         {/* Platform Health */}
 144 |         <Card>
 145 |           <CardHeader>
 146 |             <CardTitle className="flex items-center gap-2">
 147 |               <AlertCircle className="h-5 w-5" />
 148 |               حالة المنصة
 149 |             </CardTitle>
 150 |           </CardHeader>
 151 |           <CardContent>
 152 |             <div className="space-y-4">
 153 |               <div className="flex items-center justify-between p-3 border rounded-lg">
 154 |                 <div className="flex items-center gap-3">
 155 |                   <div className="w-3 h-3 bg-green-500 rounded-full"></div>
 156 |                   <span className="font-medium">خدمات المنصة</span>
 157 |                 </div>
 158 |                 <Badge className="bg-green-100 text-green-800">تعمل بشكل طبيعي</Badge>
 159 |               </div>
 160 | 
 161 |               <div className="flex items-center justify-between p-3 border rounded-lg">
 162 |                 <div className="flex items-center gap-3">
 163 |                   <div className="w-3 h-3 bg-green-500 rounded-full"></div>
 164 |                   <span className="font-medium">نظام الدفع</span>
 165 |                 </div>
 166 |                 <Badge className="bg-green-100 text-green-800">متصل</Badge>
 167 |               </div>
 168 | 
 169 |               <div className="flex items-center justify-between p-3 border rounded-lg">
 170 |                 <div className="flex items-center gap-3">
 171 |                   <div className="w-3 h-3 bg-green-500 rounded-full"></div>
 172 |                   <span className="font-medium">خدمة الفيديو</span>
 173 |                 </div>
 174 |                 <Badge className="bg-green-100 text-green-800">متاح</Badge>
 175 |               </div>
 176 | 
 177 |               <div className="flex items-center justify-between p-3 border rounded-lg">
 178 |                 <div className="flex items-center gap-3">
 179 |                   <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
 180 |                   <span className="font-medium">قاعدة البيانات</span>
 181 |                 </div>
 182 |                 <Badge className="bg-yellow-100 text-yellow-800">استخدام عالي</Badge>
 183 |               </div>
 184 |             </div>
 185 |           </CardContent>
 186 |         </Card>
 187 |       </div>
 188 | 
 189 |       {/* Recent Activity */}
 190 |       <div className="space-y-6">
 191 |         <Card>
 192 |           <CardHeader>
 193 |             <CardTitle className="flex items-center gap-2">
 194 |               <Activity className="h-5 w-5" />
 195 |               النشاط الحديث
 196 |             </CardTitle>
 197 |           </CardHeader>
 198 |           <CardContent>
 199 |             <div className="space-y-4">
 200 |               {stats.recentActivity.length > 0 ? (
 201 |                 stats.recentActivity.slice(0, 10).map((activity) => (
 202 |                   <div key={activity.id} className="flex items-start gap-3 p-3 border rounded-lg">
 203 |                     <div className="flex-shrink-0 mt-0.5">
 204 |                       {getActivityIcon(activity.type)}
 205 |                     </div>
 206 |                     <div className="flex-1 min-w-0">
 207 |                       <p className="text-sm font-medium truncate">
 208 |                         {activity.description}
 209 |                       </p>
 210 |                       {activity.user && (
 211 |                         <p className="text-xs text-muted-foreground">
 212 |                           {activity.user}
 213 |                         </p>
 214 |                       )}
 215 |                       <div className="flex items-center gap-2 mt-1">
 216 |                         <Badge 
 217 |                           variant="outline" 
 218 |                           className={`text-xs ${getActivityBadgeColor(activity.type)}`}
 219 |                         >
 220 |                           {activity.type === 'enrollment' && 'تسجيل'}
 221 |                           {activity.type === 'payment' && 'دفع'}
 222 |                           {activity.type === 'course_created' && 'دورة جديدة'}
 223 |                           {activity.type === 'certificate_issued' && 'شهادة'}
 224 |                         </Badge>
 225 |                         <span className="text-xs text-muted-foreground flex items-center gap-1">
 226 |                           <Clock className="h-3 w-3" />
 227 |                           {formatTimeAgo(activity.timestamp)}
 228 |                         </span>
 229 |                       </div>
 230 |                       {activity.amount && (
 231 |                         <p className="text-xs font-medium text-green-600 mt-1">
 232 |                           {new Intl.NumberFormat('ar-EG', {
 233 |                             style: 'currency',
 234 |                             currency: 'EGP'
 235 |                           }).format(activity.amount)}
 236 |                         </p>
 237 |                       )}
 238 |                     </div>
 239 |                   </div>
 240 |                 ))
 241 |               ) : (
 242 |                 <div className="text-center py-8">
 243 |                   <Activity className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
 244 |                   <p className="text-muted-foreground">لا يوجد نشاط حديث</p>
 245 |                 </div>
 246 |               )}
 247 |             </div>
 248 |           </CardContent>
 249 |         </Card>
 250 | 
 251 |         {/* Quick Actions */}
 252 |         <Card>
 253 |           <CardHeader>
 254 |             <CardTitle>إجراءات سريعة</CardTitle>
 255 |           </CardHeader>
 256 |           <CardContent>
 257 |             <div className="space-y-2">
 258 |               <button className="w-full text-left p-3 border rounded-lg hover:bg-muted transition-colors">
 259 |                 <div className="font-medium">إضافة مدرس جديد</div>
 260 |                 <div className="text-sm text-muted-foreground">إنشاء حساب مدرس</div>
 261 |               </button>
 262 |               
 263 |               <button className="w-full text-left p-3 border rounded-lg hover:bg-muted transition-colors">
 264 |                 <div className="font-medium">إضافة تصنيف</div>
 265 |                 <div className="text-sm text-muted-foreground">تصنيف جديد للدورات</div>
 266 |               </button>
 267 |               
 268 |               <button className="w-full text-left p-3 border rounded-lg hover:bg-muted transition-colors">
 269 |                 <div className="font-medium">تقرير الإيرادات</div>
 270 |                 <div className="text-sm text-muted-foreground">تصدير تقرير شهري</div>
 271 |               </button>
 272 |             </div>
 273 |           </CardContent>
 274 |         </Card>
 275 |       </div>
 276 |     </div>
 277 |   );
 278 | }
```

================================================================================

## 15. src\components\admin\RevenueAnalytics.tsx

**File Type:** TSX
**File Name:** RevenueAnalytics.tsx
**Full Path:** src\components\admin\RevenueAnalytics.tsx

**File Size:** 2869 characters, 89 lines

### Content:

```tsx
   1 | // src/components/admin/RevenueAnalytics.tsx
   2 | "use client";
   3 | 
   4 | import { Button } from "@/components/ui/button";
   5 | import { Download } from "lucide-react";
   6 | import { useRevenueAnalytics } from "@/hooks/useRevenueAnalytics";
   7 | import { RevenueSummaryCards } from "./revenue-analytics/RevenueSummaryCards";
   8 | import { TopCoursesByRevenue } from "./revenue-analytics/TopCoursesByRevenue";
   9 | import { PaymentMethodsChart } from "./revenue-analytics/PaymentMethodsChart";
  10 | import { RecentPayments } from "./revenue-analytics/RecentPayments";
  11 | import { LoadingState } from "./revenue-analytics/LoadingState";
  12 | 
  13 | export function RevenueAnalytics() {
  14 |   const {
  15 |     revenueData,
  16 |     isLoading,
  17 |     selectedPeriod,
  18 |     setSelectedPeriod,
  19 |     exportReport,
  20 |   } = useRevenueAnalytics();
  21 | 
  22 |   if (isLoading) {
  23 |     return <LoadingState />;
  24 |   }
  25 | 
  26 |   if (!revenueData) {
  27 |     return (
  28 |       <div className="text-center py-8">
  29 |         <p className="text-muted-foreground">فشل في تحميل بيانات الإيرادات</p>
  30 |       </div>
  31 |     );
  32 |   }
  33 | 
  34 |   return (
  35 |     <div className="space-y-6">
  36 |       {/* Header */}
  37 |       <div className="flex items-center justify-between">
  38 |         <div>
  39 |           <h2 className="text-2xl font-bold">تحليل الإيرادات</h2>
  40 |           <p className="text-muted-foreground">تتبع الأداء المالي للمنصة</p>
  41 |         </div>
  42 |         <div className="flex items-center gap-2">
  43 |           <div className="flex items-center border rounded-lg">
  44 |             <Button
  45 |               variant={selectedPeriod === "week" ? "primary" : "ghost"}
  46 |               size="sm"
  47 |               onClick={() => setSelectedPeriod("week")}
  48 |             >
  49 |               أسبوع
  50 |             </Button>
  51 |             <Button
  52 |               variant={selectedPeriod === "month" ? "primary" : "ghost"}
  53 |               size="sm"
  54 |               onClick={() => setSelectedPeriod("month")}
  55 |             >
  56 |               شهر
  57 |             </Button>
  58 |             <Button
  59 |               variant={selectedPeriod === "year" ? "primary" : "ghost"}
  60 |               size="sm"
  61 |               onClick={() => setSelectedPeriod("year")}
  62 |             >
  63 |               سنة
  64 |             </Button>
  65 |           </div>
  66 |           <Button onClick={exportReport} variant="outline" size="sm">
  67 |             <Download className="h-4 w-4 mr-2" />
  68 |             تصدير التقرير
  69 |           </Button>
  70 |         </div>
  71 |       </div>
  72 | 
  73 |       {/* Revenue Summary */}
  74 |       <RevenueSummaryCards revenueData={revenueData} />
  75 | 
  76 |       <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
  77 |         {/* Top Courses by Revenue */}
  78 |         <TopCoursesByRevenue courses={revenueData.topCourses} />
  79 | 
  80 |         {/* Payment Methods */}
  81 |         <PaymentMethodsChart paymentMethods={revenueData.paymentMethods} />
  82 |       </div>
  83 | 
  84 |       {/* Recent Payments */}
  85 |       <RecentPayments payments={revenueData.recentPayments} />
  86 |     </div>
  87 |   );
  88 | }
  89 | 
```

================================================================================

## 16. src\components\admin\SystemLogs.tsx

**File Type:** TSX
**File Name:** SystemLogs.tsx
**Full Path:** src\components\admin\SystemLogs.tsx

**File Size:** 19444 characters, 548 lines

### Content:

```tsx
   1 | // src/components/admin/SystemLogs.tsx
   2 | "use client";
   3 | 
   4 | import { useState, useEffect } from "react";
   5 | import { motion, AnimatePresence } from "framer-motion";
   6 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
   7 | import { Button } from "@/components/ui/button";
   8 | import { Badge } from "@/components/ui/badge";
   9 | import { ModernFilters, FilterOption, FilterValue } from "@/components/admin/ModernFilters";
  10 | import { 
  11 |   Activity, 
  12 |   Users, 
  13 |   CreditCard, 
  14 |   BookOpen,
  15 |   Award,
  16 |   Server,
  17 |   AlertTriangle,
  18 |   CheckCircle,
  19 |   Info,
  20 |   XCircle,
  21 |   RefreshCw,
  22 |   Download,
  23 |   Eye,
  24 |   Calendar,
  25 |   Clock,
  26 |   User,
  27 |   Globe
  28 | } from "lucide-react";
  29 | import { cn } from "@/lib/utils";
  30 | import { formatAdminDateTime, formatRelativeTime } from "@/lib/date-utils";
  31 | import {
  32 |   Dialog,
  33 |   DialogContent,
  34 |   DialogHeader,
  35 |   DialogTitle,
  36 |   DialogTrigger,
  37 | } from "@/components/ui/dialog";
  38 | 
  39 | interface LogEntry {
  40 |   id: string;
  41 |   type: 'USER' | 'PAYMENT' | 'COURSE' | 'ENROLLMENT' | 'CERTIFICATE' | 'SYSTEM';
  42 |   action: string;
  43 |   description: string;
  44 |   userId?: string;
  45 |   userName?: string;
  46 |   metadata?: any;
  47 |   ipAddress?: string;
  48 |   userAgent?: string;
  49 |   timestamp: string;
  50 |   severity: 'INFO' | 'WARNING' | 'ERROR' | 'SUCCESS';
  51 | }
  52 | 
  53 | interface LogStats {
  54 |   totalLogs: number;
  55 |   todayLogs: number;
  56 |   errorLogs: number;
  57 |   warningLogs: number;
  58 |   userActions: number;
  59 |   paymentActions: number;
  60 |   courseActions: number;
  61 |   systemActions: number;
  62 | }
  63 | 
  64 | const ITEMS_PER_PAGE = 20;
  65 | 
  66 | export function SystemLogs() {
  67 |   const [logs, setLogs] = useState<LogEntry[]>([]);
  68 |   const [stats, setStats] = useState<LogStats | null>(null);
  69 |   const [isLoading, setIsLoading] = useState(true);
  70 |   const [currentPage, setCurrentPage] = useState(1);
  71 |   const [totalCount, setTotalCount] = useState(0);
  72 |   const [filters, setFilters] = useState<FilterValue>({});
  73 |   const [selectedLog, setSelectedLog] = useState<LogEntry | null>(null);
  74 | 
  75 |   const filterOptions: FilterOption[] = [
  76 |     {
  77 |       key: 'type',
  78 |       label: 'نوع السجل',
  79 |       type: 'select',
  80 |       options: [
  81 |         { value: 'USER', label: 'المستخدمين' },
  82 |         { value: 'PAYMENT', label: 'المدفوعات' },
  83 |         { value: 'COURSE', label: 'الدورات' },
  84 |         { value: 'ENROLLMENT', label: 'التسجيلات' },
  85 |         { value: 'CERTIFICATE', label: 'الشهادات' },
  86 |         { value: 'SYSTEM', label: 'النظام' }
  87 |       ],
  88 |       placeholder: 'اختر نوع السجل'
  89 |     },
  90 |     {
  91 |       key: 'severity',
  92 |       label: 'مستوى الأهمية',
  93 |       type: 'select',
  94 |       options: [
  95 |         { value: 'SUCCESS', label: 'نجح' },
  96 |         { value: 'INFO', label: 'معلومات' },
  97 |         { value: 'WARNING', label: 'تحذير' },
  98 |         { value: 'ERROR', label: 'خطأ' }
  99 |       ],
 100 |       placeholder: 'اختر مستوى الأهمية'
 101 |     },
 102 |     {
 103 |       key: 'dateFrom',
 104 |       label: 'من تاريخ',
 105 |       type: 'date',
 106 |       placeholder: 'اختر التاريخ'
 107 |     },
 108 |     {
 109 |       key: 'dateTo',
 110 |       label: 'إلى تاريخ',
 111 |       type: 'date',
 112 |       placeholder: 'اختر التاريخ'
 113 |     }
 114 |   ];
 115 | 
 116 |   useEffect(() => {
 117 |     fetchLogs();
 118 |     fetchStats();
 119 |   }, [currentPage, filters]);
 120 | 
 121 |   const fetchLogs = async () => {
 122 |     setIsLoading(true);
 123 |     try {
 124 |       const queryParams = new URLSearchParams({
 125 |         page: currentPage.toString(),
 126 |         limit: ITEMS_PER_PAGE.toString(),
 127 |         ...Object.fromEntries(
 128 |           Object.entries(filters).filter(([_, value]) => value !== undefined && value !== "")
 129 |         )
 130 |       });
 131 | 
 132 |       const response = await fetch(`/api/admin/logs?${queryParams}`);
 133 |       const data = await response.json();
 134 |       
 135 |       if (response.ok && data.success) {
 136 |         setLogs(data.data.logs || []);
 137 |         setTotalCount(data.data.pagination?.total || 0);
 138 |       }
 139 |     } catch (error) {
 140 |       console.error('Failed to fetch logs:', error);
 141 |     } finally {
 142 |       setIsLoading(false);
 143 |     }
 144 |   };
 145 | 
 146 |   const fetchStats = async () => {
 147 |     try {
 148 |       const response = await fetch('/api/admin/logs/stats');
 149 |       const data = await response.json();
 150 |       
 151 |       if (response.ok && data.success) {
 152 |         setStats(data.data);
 153 |       }
 154 |     } catch (error) {
 155 |       console.error('Failed to fetch log stats:', error);
 156 |     }
 157 |   };
 158 | 
 159 |   const handleFiltersChange = (newFilters: FilterValue) => {
 160 |     setFilters(newFilters);
 161 |     setCurrentPage(1);
 162 |   };
 163 | 
 164 |   const handleResetFilters = () => {
 165 |     setFilters({});
 166 |     setCurrentPage(1);
 167 |   };
 168 | 
 169 |   const handleExport = async () => {
 170 |     try {
 171 |       const queryParams = new URLSearchParams({
 172 |         ...Object.fromEntries(
 173 |           Object.entries(filters).filter(([_, value]) => value !== undefined && value !== "")
 174 |         )
 175 |       });
 176 | 
 177 |       const response = await fetch(`/api/admin/logs/export?${queryParams}`);
 178 |       
 179 |       if (response.ok) {
 180 |         const blob = await response.blob();
 181 |         const url = window.URL.createObjectURL(blob);
 182 |         const a = document.createElement('a');
 183 |         a.href = url;
 184 |         a.download = `system-logs-${new Date().toISOString().split('T')[0]}.csv`;
 185 |         document.body.appendChild(a);
 186 |         a.click();
 187 |         document.body.removeChild(a);
 188 |         window.URL.revokeObjectURL(url);
 189 |       }
 190 |     } catch (error) {
 191 |       console.error('Export failed:', error);
 192 |     }
 193 |   };
 194 | 
 195 |   const getSeverityIcon = (severity: string) => {
 196 |     switch (severity) {
 197 |       case 'SUCCESS': return <CheckCircle className="w-4 h-4 text-green-500" />;
 198 |       case 'INFO': return <Info className="w-4 h-4 text-blue-500" />;
 199 |       case 'WARNING': return <AlertTriangle className="w-4 h-4 text-yellow-500" />;
 200 |       case 'ERROR': return <XCircle className="w-4 h-4 text-red-500" />;
 201 |       default: return <Info className="w-4 h-4 text-gray-500" />;
 202 |     }
 203 |   };
 204 | 
 205 |   const getSeverityBadge = (severity: string) => {
 206 |     const variants = {
 207 |       SUCCESS: "bg-green-100 text-green-800 border-green-200",
 208 |       INFO: "bg-blue-100 text-blue-800 border-blue-200",
 209 |       WARNING: "bg-yellow-100 text-yellow-800 border-yellow-200",
 210 |       ERROR: "bg-red-100 text-red-800 border-red-200"
 211 |     };
 212 |     
 213 |     const labels = {
 214 |       SUCCESS: "نجح",
 215 |       INFO: "معلومات",
 216 |       WARNING: "تحذير",
 217 |       ERROR: "خطأ"
 218 |     };
 219 | 
 220 |     return (
 221 |       <Badge className={cn("text-xs", variants[severity as keyof typeof variants])}>
 222 |         {labels[severity as keyof typeof labels] || severity}
 223 |       </Badge>
 224 |     );
 225 |   };
 226 | 
 227 |   const getTypeIcon = (type: string) => {
 228 |     switch (type) {
 229 |       case 'USER': return <Users className="w-4 h-4 text-blue-500" />;
 230 |       case 'PAYMENT': return <CreditCard className="w-4 h-4 text-green-500" />;
 231 |       case 'COURSE': return <BookOpen className="w-4 h-4 text-purple-500" />;
 232 |       case 'ENROLLMENT': return <Users className="w-4 h-4 text-orange-500" />;
 233 |       case 'CERTIFICATE': return <Award className="w-4 h-4 text-yellow-500" />;
 234 |       case 'SYSTEM': return <Server className="w-4 h-4 text-gray-500" />;
 235 |       default: return <Activity className="w-4 h-4 text-gray-500" />;
 236 |     }
 237 |   };
 238 | 
 239 |   const totalPages = Math.ceil(totalCount / ITEMS_PER_PAGE);
 240 | 
 241 |   const LogEntryCard = ({ log, index }: { log: LogEntry; index: number }) => (
 242 |     <motion.div
 243 |       initial={{ opacity: 0, y: 20 }}
 244 |       animate={{ opacity: 1, y: 0 }}
 245 |       transition={{ delay: index * 0.05 }}
 246 |     >
 247 |       <Card className="hover:shadow-md transition-all duration-200 border-0 bg-card/50 backdrop-blur-sm">
 248 |         <CardContent className="p-4">
 249 |           <div className="flex items-start justify-between gap-4">
 250 |             <div className="flex items-start gap-3 flex-1">
 251 |               <div className="flex items-center gap-2 mt-1">
 252 |                 {getSeverityIcon(log.severity)}
 253 |                 {getTypeIcon(log.type)}
 254 |               </div>
 255 |               
 256 |               <div className="flex-1 min-w-0">
 257 |                 <div className="flex items-center gap-2 mb-2">
 258 |                   <h4 className="font-medium text-sm">{log.action}</h4>
 259 |                   {getSeverityBadge(log.severity)}
 260 |                 </div>
 261 |                 
 262 |                 <p className="text-sm text-muted-foreground mb-3 line-clamp-2">
 263 |                   {log.description}
 264 |                 </p>
 265 |                 
 266 |                 <div className="flex flex-wrap items-center gap-4 text-xs text-muted-foreground">
 267 |                   <div className="flex items-center gap-1">
 268 |                     <Clock className="w-3 h-3" />
 269 |                     <span>{formatRelativeTime(log.timestamp)}</span>
 270 |                   </div>
 271 |                   
 272 |                   {log.userName && (
 273 |                     <div className="flex items-center gap-1">
 274 |                       <User className="w-3 h-3" />
 275 |                       <span>{log.userName}</span>
 276 |                     </div>
 277 |                   )}
 278 |                   
 279 |                   {log.ipAddress && (
 280 |                     <div className="flex items-center gap-1">
 281 |                       <Globe className="w-3 h-3" />
 282 |                       <span>{log.ipAddress}</span>
 283 |                     </div>
 284 |                   )}
 285 |                 </div>
 286 |               </div>
 287 |             </div>
 288 |             
 289 |             <div className="flex items-center gap-2">
 290 |               <span className="text-xs text-muted-foreground">
 291 |                 {formatAdminDateTime(log.timestamp)}
 292 |               </span>
 293 |               
 294 |               <Dialog>
 295 |                 <DialogTrigger asChild>
 296 |                   <Button 
 297 |                     variant="ghost" 
 298 |                     size="sm" 
 299 |                     className="h-8 w-8 p-0"
 300 |                     onClick={() => setSelectedLog(log)}
 301 |                   >
 302 |                     <Eye className="w-4 h-4" />
 303 |                   </Button>
 304 |                 </DialogTrigger>
 305 |                 <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
 306 |                   <DialogHeader>
 307 |                     <DialogTitle className="flex items-center gap-2">
 308 |                       {getTypeIcon(log.type)}
 309 |                       تفاصيل السجل
 310 |                     </DialogTitle>
 311 |                   </DialogHeader>
 312 |                   
 313 |                   <div className="space-y-4">
 314 |                     <div className="grid grid-cols-2 gap-4">
 315 |                       <div>
 316 |                         <label className="text-sm font-medium">النوع</label>
 317 |                         <div className="flex items-center gap-2 mt-1">
 318 |                           {getTypeIcon(log.type)}
 319 |                           <span className="text-sm">{log.type}</span>
 320 |                         </div>
 321 |                       </div>
 322 |                       <div>
 323 |                         <label className="text-sm font-medium">الأهمية</label>
 324 |                         <div className="mt-1">
 325 |                           {getSeverityBadge(log.severity)}
 326 |                         </div>
 327 |                       </div>
 328 |                     </div>
 329 |                     
 330 |                     <div>
 331 |                       <label className="text-sm font-medium">الإجراء</label>
 332 |                       <p className="text-sm mt-1">{log.action}</p>
 333 |                     </div>
 334 |                     
 335 |                     <div>
 336 |                       <label className="text-sm font-medium">الوصف</label>
 337 |                       <p className="text-sm mt-1">{log.description}</p>
 338 |                     </div>
 339 |                     
 340 |                     <div className="grid grid-cols-2 gap-4">
 341 |                       <div>
 342 |                         <label className="text-sm font-medium">التوقيت</label>
 343 |                         <p className="text-sm mt-1">{formatAdminDateTime(log.timestamp)}</p>
 344 |                       </div>
 345 |                       {log.userName && (
 346 |                         <div>
 347 |                           <label className="text-sm font-medium">المستخدم</label>
 348 |                           <p className="text-sm mt-1">{log.userName}</p>
 349 |                         </div>
 350 |                       )}
 351 |                     </div>
 352 |                     
 353 |                     {log.ipAddress && (
 354 |                       <div>
 355 |                         <label className="text-sm font-medium">عنوان IP</label>
 356 |                         <p className="text-sm mt-1 font-mono">{log.ipAddress}</p>
 357 |                       </div>
 358 |                     )}
 359 |                     
 360 |                     {log.metadata && (
 361 |                       <div>
 362 |                         <label className="text-sm font-medium">بيانات إضافية</label>
 363 |                         <pre className="text-xs mt-1 p-3 bg-muted rounded-lg overflow-x-auto">
 364 |                           {JSON.stringify(log.metadata, null, 2)}
 365 |                         </pre>
 366 |                       </div>
 367 |                     )}
 368 |                   </div>
 369 |                 </DialogContent>
 370 |               </Dialog>
 371 |             </div>
 372 |           </div>
 373 |         </CardContent>
 374 |       </Card>
 375 |     </motion.div>
 376 |   );
 377 | 
 378 |   return (
 379 |     <div className="space-y-6">
 380 |       {/* Header */}
 381 |       <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
 382 |         <div>
 383 |           <h1 className="text-3xl font-bold bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text">
 384 |             سجل الأنشطة
 385 |           </h1>
 386 |           <p className="text-muted-foreground mt-1">
 387 |             مراقبة وتتبع جميع الأنشطة في النظام
 388 |           </p>
 389 |         </div>
 390 |         
 391 |         <div className="flex items-center gap-2">
 392 |           <Button variant="outline" onClick={fetchLogs} disabled={isLoading}>
 393 |             <RefreshCw className={cn("w-4 h-4 mr-2", isLoading && "animate-spin")} />
 394 |             تحديث
 395 |           </Button>
 396 |           <Button variant="outline" onClick={handleExport}>
 397 |             <Download className="w-4 h-4 mr-2" />
 398 |             تصدير
 399 |           </Button>
 400 |         </div>
 401 |       </div>
 402 | 
 403 |       {/* Stats Cards */}
 404 |       {stats && (
 405 |         <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
 406 |           <Card className="border-0 bg-gradient-to-r from-blue-500/10 to-blue-600/10">
 407 |             <CardContent className="p-4">
 408 |               <div className="flex items-center justify-between">
 409 |                 <div>
 410 |                   <p className="text-sm text-muted-foreground">إجمالي السجلات</p>
 411 |                   <p className="text-2xl font-bold text-blue-600">{stats.totalLogs}</p>
 412 |                 </div>
 413 |                 <Activity className="w-8 h-8 text-blue-500" />
 414 |               </div>
 415 |             </CardContent>
 416 |           </Card>
 417 |           
 418 |           <Card className="border-0 bg-gradient-to-r from-green-500/10 to-green-600/10">
 419 |             <CardContent className="p-4">
 420 |               <div className="flex items-center justify-between">
 421 |                 <div>
 422 |                   <p className="text-sm text-muted-foreground">سجلات اليوم</p>
 423 |                   <p className="text-2xl font-bold text-green-600">{stats.todayLogs}</p>
 424 |                 </div>
 425 |                 <Calendar className="w-8 h-8 text-green-500" />
 426 |               </div>
 427 |             </CardContent>
 428 |           </Card>
 429 | 
 430 |           <Card className="border-0 bg-gradient-to-r from-yellow-500/10 to-yellow-600/10">
 431 |             <CardContent className="p-4">
 432 |               <div className="flex items-center justify-between">
 433 |                 <div>
 434 |                   <p className="text-sm text-muted-foreground">تحذيرات</p>
 435 |                   <p className="text-2xl font-bold text-yellow-600">{stats.warningLogs}</p>
 436 |                 </div>
 437 |                 <AlertTriangle className="w-8 h-8 text-yellow-500" />
 438 |               </div>
 439 |             </CardContent>
 440 |           </Card>
 441 | 
 442 |           <Card className="border-0 bg-gradient-to-r from-red-500/10 to-red-600/10">
 443 |             <CardContent className="p-4">
 444 |               <div className="flex items-center justify-between">
 445 |                 <div>
 446 |                   <p className="text-sm text-muted-foreground">أخطاء</p>
 447 |                   <p className="text-2xl font-bold text-red-600">{stats.errorLogs}</p>
 448 |                 </div>
 449 |                 <XCircle className="w-8 h-8 text-red-500" />
 450 |               </div>
 451 |             </CardContent>
 452 |           </Card>
 453 |         </div>
 454 |       )}
 455 | 
 456 |       {/* Filters */}
 457 |       <ModernFilters
 458 |         filters={filterOptions}
 459 |         values={filters}
 460 |         onChange={handleFiltersChange}
 461 |         onReset={handleResetFilters}
 462 |         showExport={false}
 463 |         isLoading={isLoading}
 464 |       />
 465 | 
 466 |       {/* Logs List */}
 467 |       {isLoading ? (
 468 |         <div className="space-y-4">
 469 |           {Array.from({ length: 8 }).map((_, i) => (
 470 |             <Card key={i} className="animate-pulse">
 471 |               <CardContent className="p-4">
 472 |                 <div className="flex items-start gap-3">
 473 |                   <div className="w-8 h-8 bg-muted rounded" />
 474 |                   <div className="flex-1 space-y-2">
 475 |                     <div className="h-4 bg-muted rounded w-1/3" />
 476 |                     <div className="h-3 bg-muted rounded w-2/3" />
 477 |                     <div className="h-3 bg-muted rounded w-1/4" />
 478 |                   </div>
 479 |                 </div>
 480 |               </CardContent>
 481 |             </Card>
 482 |           ))}
 483 |         </div>
 484 |       ) : logs.length > 0 ? (
 485 |         <>
 486 |           <div className="space-y-4">
 487 |             <AnimatePresence>
 488 |               {logs.map((log, index) => (
 489 |                 <LogEntryCard key={log.id} log={log} index={index} />
 490 |               ))}
 491 |             </AnimatePresence>
 492 |           </div>
 493 | 
 494 |           {/* Pagination */}
 495 |           {totalPages > 1 && (
 496 |             <div className="flex justify-center items-center gap-2 mt-8">
 497 |               <Button
 498 |                 variant="outline"
 499 |                 onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
 500 |                 disabled={currentPage === 1}
 501 |               >
 502 |                 السابق
 503 |               </Button>
 504 |               
 505 |               <div className="flex items-center gap-1">
 506 |                 {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
 507 |                   const pageNum = i + 1;
 508 |                   return (
 509 |                     <Button
 510 |                       key={pageNum}
 511 |                       variant={currentPage === pageNum ? "primary" : "outline"}
 512 |                       size="sm"
 513 |                       onClick={() => setCurrentPage(pageNum)}
 514 |                       className="w-10 h-10"
 515 |                     >
 516 |                       {pageNum}
 517 |                     </Button>
 518 |                   );
 519 |                 })}
 520 |               </div>
 521 | 
 522 |               <Button
 523 |                 variant="outline"
 524 |                 onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
 525 |                 disabled={currentPage === totalPages}
 526 |               >
 527 |                 التالي
 528 |               </Button>
 529 |             </div>
 530 |           )}
 531 |         </>
 532 |       ) : (
 533 |         <Card className="border-0 bg-card/50">
 534 |           <CardContent className="p-12 text-center">
 535 |             <Activity className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
 536 |             <h3 className="text-lg font-semibold mb-2">لا توجد سجلات</h3>
 537 |             <p className="text-muted-foreground">
 538 |               {Object.keys(filters).length > 0 
 539 |                 ? "لم يتم العثور على سجلات مطابقة للفلاتر المحددة"
 540 |                 : "لا توجد سجلات أنشطة حتى الآن"
 541 |               }
 542 |             </p>
 543 |           </CardContent>
 544 |         </Card>
 545 |       )}
 546 |     </div>
 547 |   );
 548 | }
```

================================================================================

## 17. src\components\admin\payment-management\PaymentFilters.tsx

**File Type:** TSX
**File Name:** PaymentFilters.tsx
**Full Path:** src\components\admin\payment-management\PaymentFilters.tsx

**File Size:** 3213 characters, 96 lines

### Content:

```tsx
   1 | // src/components/admin/payment-management/PaymentFilters.tsx
   2 | 
   3 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   4 | import { Button } from '@/components/ui/button';
   5 | import { Input } from '@/components/ui/input';
   6 | import {
   7 |   Select,
   8 |   SelectContent,
   9 |   SelectItem,
  10 |   SelectTrigger,
  11 |   SelectValue,
  12 | } from '@/components/ui/select';
  13 | import { Filter, RefreshCw, Download, Search } from 'lucide-react';
  14 | import { UseAdminPaymentsReturn } from '@/hooks/useAdminPayments';
  15 | 
  16 | // Use Pick to select only the 'filters' and specific methods needed from the hook return type
  17 | type PaymentFiltersProps = {
  18 |   filters: UseAdminPaymentsReturn['filters'];
  19 |   onRefresh: () => void;
  20 |   onExport: () => void;
  21 | };
  22 | 
  23 | /**
  24 |  * A component that renders the search and filter controls for the payments dashboard.
  25 |  */
  26 | export function PaymentFilters({
  27 |   filters,
  28 |   onRefresh,
  29 |   onExport,
  30 | }: PaymentFiltersProps) {
  31 |   return (
  32 |     <Card>
  33 |       <CardHeader>
  34 |         <CardTitle className="flex items-center gap-2">
  35 |           <Filter className="h-5 w-5" />
  36 |           البحث والتصفية
  37 |         </CardTitle>
  38 |       </CardHeader>
  39 |       <CardContent>
  40 |         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
  41 |           <div className="lg:col-span-2">
  42 |             <div className="relative">
  43 |               <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
  44 |               <Input
  45 |                 placeholder="البحث بالملتحق، الدورة، أو رقم المعاملة..."
  46 |                 value={filters.searchTerm}
  47 |                 onChange={(e) => filters.setSearchTerm(e.target.value)}
  48 |                 className="pl-10"
  49 |               />
  50 |             </div>
  51 |           </div>
  52 | 
  53 |           <Select
  54 |             value={filters.statusFilter}
  55 |             onValueChange={filters.setStatusFilter}
  56 |           >
  57 |             <SelectTrigger>
  58 |               <SelectValue placeholder="تصفية بالحالة" />
  59 |             </SelectTrigger>
  60 |             <SelectContent>
  61 |               <SelectItem value="all">جميع الحالات</SelectItem>
  62 |               <SelectItem value="completed">مكتمل</SelectItem>
  63 |               <SelectItem value="pending">معلق</SelectItem>
  64 |               <SelectItem value="failed">فاشل</SelectItem>
  65 |               <SelectItem value="cancelled">ملغي</SelectItem>
  66 |             </SelectContent>
  67 |           </Select>
  68 | 
  69 |           <Input
  70 |             type="date"
  71 |             value={filters.dateFrom}
  72 |             onChange={(e) => filters.setDateFrom(e.target.value)}
  73 |             aria-label="From Date"
  74 |           />
  75 | 
  76 |           <Input
  77 |             type="date"
  78 |             value={filters.dateTo}
  79 |             onChange={(e) => filters.setDateTo(e.target.value)}
  80 |             aria-label="To Date"
  81 |           />
  82 |         </div>
  83 |         <div className="flex justify-end gap-2 mt-4">
  84 |           <Button onClick={onRefresh} variant="outline">
  85 |             <RefreshCw className="h-4 w-4 ml-2" />
  86 |             تحديث
  87 |           </Button>
  88 |           <Button onClick={onExport} variant="primary">
  89 |             <Download className="h-4 w-4 ml-2" />
  90 |             تصدير
  91 |           </Button>
  92 |         </div>
  93 |       </CardContent>
  94 |     </Card>
  95 |   );
  96 | }
```

================================================================================

## 18. src\components\admin\payment-management\PaymentList.tsx

**File Type:** TSX
**File Name:** PaymentList.tsx
**Full Path:** src\components\admin\payment-management\PaymentList.tsx

**File Size:** 2469 characters, 74 lines

### Content:

```tsx
   1 | // src/components/admin/payment-management/PaymentList.tsx
   2 | 
   3 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   4 | import { CreditCard } from 'lucide-react';
   5 | import { Payment } from '@/hooks/useAdminPayments';
   6 | import { PaymentListItem } from './PaymentListItem';
   7 | 
   8 | interface PaymentListProps {
   9 |   payments: Payment[];
  10 |   totalPayments: number;
  11 |   isLoading: boolean;
  12 |   onViewDetails: (paymentId: string) => void;
  13 |   onAction: (
  14 |     paymentId: string,
  15 |     action: string,
  16 |     additionalData?: any
  17 |   ) => void;
  18 | }
  19 | 
  20 | export function PaymentList({
  21 |   payments,
  22 |   totalPayments,
  23 |   isLoading,
  24 |   onViewDetails,
  25 |   onAction,
  26 | }: PaymentListProps) {
  27 |   return (
  28 |     <Card>
  29 |       <CardHeader>
  30 |         <CardTitle>المدفوعات ({totalPayments})</CardTitle>
  31 |       </CardHeader>
  32 |       <CardContent>
  33 |         {isLoading && payments.length === 0 ? (
  34 |           // Skeleton loader for the list
  35 |           <div className="space-y-4">
  36 |             {[...Array(5)].map((_, i) => (
  37 |               <div key={i} className="flex items-center gap-4 p-4 border rounded-lg animate-pulse">
  38 |                 <div className="w-24 h-16 bg-muted rounded-md"></div>
  39 |                 <div className="flex-1 space-y-2">
  40 |                   <div className="h-5 bg-muted rounded w-3/4"></div>
  41 |                   <div className="h-4 bg-muted rounded w-full"></div>
  42 |                 </div>
  43 |                 <div className="w-24 space-y-2">
  44 |                   <div className="h-6 bg-muted rounded w-full"></div>
  45 |                   <div className="h-8 bg-muted rounded w-full"></div>
  46 |                 </div>
  47 |               </div>
  48 |             ))}
  49 |           </div>
  50 |         ) : payments.length > 0 ? (
  51 |           <div className="space-y-4">
  52 |             {payments.map((payment) => (
  53 |               <PaymentListItem
  54 |                 key={payment.id}
  55 |                 payment={payment}
  56 |                 onViewDetails={onViewDetails}
  57 |                 onAction={onAction}
  58 |               />
  59 |             ))}
  60 |           </div>
  61 |         ) : (
  62 |           // Empty state
  63 |           <div className="text-center py-12">
  64 |             <CreditCard className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
  65 |             <h3 className="text-lg font-semibold">لا توجد مدفوعات</h3>
  66 |             <p className="text-muted-foreground">
  67 |               لا توجد مدفوعات مطابقة لمعايير البحث الحالية.
  68 |             </p>
  69 |           </div>
  70 |         )}
  71 |       </CardContent>
  72 |     </Card>
  73 |   );
  74 | }
```

================================================================================

## 19. src\components\admin\payment-management\PaymentListItem.tsx

**File Type:** TSX
**File Name:** PaymentListItem.tsx
**Full Path:** src\components\admin\payment-management\PaymentListItem.tsx

**File Size:** 6372 characters, 179 lines

### Content:

```tsx
   1 | // src/components/admin/payment-management/PaymentListItem.tsx
   2 | 
   3 | import { Button } from '@/components/ui/button';
   4 | import {
   5 |   DropdownMenu,
   6 |   DropdownMenuContent,
   7 |   DropdownMenuItem,
   8 |   DropdownMenuTrigger,
   9 | } from '@/components/ui/dropdown-menu';
  10 | import {
  11 |   User,
  12 |   BookOpen,
  13 |   Calendar,
  14 |   MoreHorizontal,
  15 |   Eye,
  16 |   CheckCircle,
  17 |   XCircle,
  18 |   RefreshCw,
  19 | } from 'lucide-react';
  20 | import { Payment } from '@/hooks/useAdminPayments';
  21 | import { PaymentStatusBadge } from '@/components/shared/PaymentStatusBadge';
  22 | import { formatCurrency } from '@/lib/formatters';
  23 | 
  24 | interface PaymentListItemProps {
  25 |   payment: Payment;
  26 |   onViewDetails: (paymentId: string) => void;
  27 |   onAction: (
  28 |     paymentId: string,
  29 |     action: string,
  30 |     additionalData?: any
  31 |   ) => void;
  32 | }
  33 | 
  34 | export function PaymentListItem({
  35 |   payment,
  36 |   onViewDetails,
  37 |   onAction,
  38 | }: PaymentListItemProps) {
  39 |   return (
  40 |     <div className="flex flex-col md:flex-row items-start md:items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors gap-4">
  41 |       <div className="flex items-center gap-4 flex-1 min-w-0">
  42 |         <img
  43 |           src={payment.course.thumbnailUrl}
  44 |           alt={payment.course.title}
  45 |           className="w-24 h-16 object-cover rounded-md hidden sm:block"
  46 |         />
  47 |         <div className="flex-1 min-w-0">
  48 |           <div className="flex items-center gap-2 mb-1">
  49 |             <h3 className="font-semibold truncate">{payment.course.title}</h3>
  50 |             <PaymentStatusBadge status={payment.status} />
  51 |           </div>
  52 | 
  53 |           <div className="flex flex-wrap items-center gap-x-4 gap-y-1 text-sm text-muted-foreground">
  54 |             <div className="flex items-center gap-1">
  55 |               <User className="h-3 w-3" />
  56 |               <span>{payment.user.name}</span>
  57 |             </div>
  58 |             <div className="flex items-center gap-1">
  59 |               <BookOpen className="h-3 w-3" />
  60 |               <span>{payment.course.professor.name}</span>
  61 |             </div>
  62 |             <div className="flex items-center gap-1">
  63 |               <Calendar className="h-3 w-3" />
  64 |               <span>{new Date(payment.createdAt).toLocaleDateString('ar-EG', {
  65 |                 year: 'numeric',
  66 |                 month: 'long',
  67 |                 day: 'numeric',
  68 |                 calendar: 'gregory'
  69 |               })}</span>
  70 |             </div>
  71 |           </div>
  72 | 
  73 |           {payment.paymobTransactionId && (
  74 |             <p className="text-xs text-muted-foreground mt-1">
  75 |               رقم المعاملة: {payment.paymobTransactionId}
  76 |             </p>
  77 |           )}
  78 | 
  79 |           {payment.failureReason && (
  80 |             <p className="text-xs text-red-600 mt-1">
  81 |               سبب الفشل: {payment.failureReason}
  82 |             </p>
  83 |           )}
  84 | 
  85 |           {payment.lastWebhook?.lastError && (
  86 |             <p className="text-xs text-orange-600 mt-1">
  87 |               خطأ في المعالجة: {payment.lastWebhook.lastError}
  88 |             </p>
  89 |           )}
  90 |         </div>
  91 |       </div>
  92 | 
  93 |       <div className="flex-shrink-0 flex md:flex-col items-end justify-between md:justify-center w-full md:w-auto text-right gap-2">
  94 |         <div className="text-lg font-bold text-primary">
  95 |           {formatCurrency(payment.amount)}
  96 |         </div>
  97 | 
  98 |         <div className="flex items-center gap-2">
  99 |           <Button
 100 |             variant="outline"
 101 |             size="sm"
 102 |             onClick={() => onViewDetails(payment.id)}
 103 |           >
 104 |             <Eye className="h-3 w-3 ml-1" />
 105 |             التفاصيل
 106 |           </Button>
 107 | 
 108 |           <DropdownMenu modal={false}>
 109 |             <DropdownMenuTrigger asChild>
 110 |               <Button 
 111 |                 variant="ghost" 
 112 |                 size="sm" 
 113 |                 className="h-8 w-8 p-0 hover:bg-accent/50 focus:bg-accent/50"
 114 |                 onMouseDown={(e) => e.preventDefault()}
 115 |               >
 116 |                 <MoreHorizontal className="h-4 w-4" />
 117 |               </Button>
 118 |             </DropdownMenuTrigger>
 119 |             <DropdownMenuContent 
 120 |               align="end" 
 121 |               className="w-48 bg-background/95 backdrop-blur-sm border shadow-lg"
 122 |               sideOffset={5}
 123 |               onCloseAutoFocus={(e) => e.preventDefault()}
 124 |             >
 125 |               {payment.status === 'PENDING' && (
 126 |                 <>
 127 |                   <DropdownMenuItem 
 128 |                     onClick={(e) => {
 129 |                       e.preventDefault();
 130 |                       onAction(payment.id, 'manual_complete');
 131 |                     }}
 132 |                     className="cursor-pointer"
 133 |                   >
 134 |                     <CheckCircle className="h-4 w-4 ml-2" />
 135 |                     <span>إكمال يدوياً</span>
 136 |                   </DropdownMenuItem>
 137 |                   <DropdownMenuItem
 138 |                     className="text-red-500 focus:text-red-500 cursor-pointer"
 139 |                     onClick={(e) => {
 140 |                       e.preventDefault();
 141 |                       onAction(payment.id, 'update_status', { status: 'failed', reason: 'Cancelled by admin' });
 142 |                     }}
 143 |                   >
 144 |                     <XCircle className="h-4 w-4 ml-2" />
 145 |                     <span>إلغاء</span>
 146 |                   </DropdownMenuItem>
 147 |                 </>
 148 |               )}
 149 |               {payment.status === 'COMPLETED' && payment.lastWebhook?.lastError && (
 150 |                 <DropdownMenuItem 
 151 |                   onClick={(e) => {
 152 |                     e.preventDefault();
 153 |                     onAction(payment.id, 'retry_enrollment');
 154 |                   }}
 155 |                   className="cursor-pointer"
 156 |                 >
 157 |                   <RefreshCw className="h-4 w-4 ml-2" />
 158 |                   <span>إعادة محاولة التسجيل</span>
 159 |                 </DropdownMenuItem>
 160 |               )}
 161 |               {payment.status === 'FAILED' && (
 162 |                 <DropdownMenuItem 
 163 |                   onClick={(e) => {
 164 |                     e.preventDefault();
 165 |                     onAction(payment.id, 'manual_complete');
 166 |                   }}
 167 |                   className="cursor-pointer"
 168 |                 >
 169 |                   <CheckCircle className="h-4 w-4 ml-2" />
 170 |                   <span>إكمال يدوياً</span>
 171 |                 </DropdownMenuItem>
 172 |               )}
 173 |             </DropdownMenuContent>
 174 |           </DropdownMenu>
 175 |         </div>
 176 |       </div>
 177 |     </div>
 178 |   );
 179 | }
```

================================================================================

## 20. src\components\admin\payment-management\PaymentPagination.tsx

**File Type:** TSX
**File Name:** PaymentPagination.tsx
**Full Path:** src\components\admin\payment-management\PaymentPagination.tsx

**File Size:** 1252 characters, 46 lines

### Content:

```tsx
   1 | // src/components/admin/payment-management/PaymentPagination.tsx
   2 | 
   3 | import { Button } from '@/components/ui/button';
   4 | import { UseAdminPaymentsReturn } from '@/hooks/useAdminPayments';
   5 | 
   6 | type PaymentPaginationProps = {
   7 |   pagination: UseAdminPaymentsReturn['pagination'];
   8 | };
   9 | 
  10 | /**
  11 |  * Renders the pagination controls for the payments list.
  12 |  * Only visible if there is more than one page.
  13 |  */
  14 | export function PaymentPagination({ pagination }: PaymentPaginationProps) {
  15 |   const { currentPage, totalPages, setCurrentPage } = pagination;
  16 | 
  17 |   if (totalPages <= 1) {
  18 |     return null;
  19 |   }
  20 | 
  21 |   return (
  22 |     <div className="flex items-center justify-center gap-2 mt-6">
  23 |       <Button
  24 |         variant="outline"
  25 |         size="sm"
  26 |         onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
  27 |         disabled={currentPage === 1}
  28 |       >
  29 |         السابق
  30 |       </Button>
  31 | 
  32 |       <span className="text-sm text-muted-foreground">
  33 |         صفحة {currentPage} من {totalPages}
  34 |       </span>
  35 | 
  36 |       <Button
  37 |         variant="outline"
  38 |         size="sm"
  39 |         onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
  40 |         disabled={currentPage === totalPages}
  41 |       >
  42 |         التالي
  43 |       </Button>
  44 |     </div>
  45 |   );
  46 | }
```

================================================================================

## 21. src\components\admin\payment-management\PaymentSummaryCards.tsx

**File Type:** TSX
**File Name:** PaymentSummaryCards.tsx
**Full Path:** src\components\admin\payment-management\PaymentSummaryCards.tsx

**File Size:** 2280 characters, 87 lines

### Content:

```tsx
   1 | // src/components/admin/payment-management/PaymentSummaryCards.tsx
   2 | import {
   3 |   CreditCard,
   4 |   CheckCircle,
   5 |   Clock,
   6 |   XCircle,
   7 |   DollarSign,
   8 | } from 'lucide-react';
   9 | import { StatsCards } from '@/components/shared/StatsCards';
  10 | import { PaymentSummary } from '@/hooks/useAdminPayments';
  11 | import { formatCurrency } from '@/lib/formatters';
  12 | 
  13 | interface PaymentSummaryCardsProps {
  14 |   summary: PaymentSummary | null;
  15 |   isLoading: boolean;
  16 | }
  17 | 
  18 | /**
  19 |  * Displays the grid of summary cards for the payment management dashboard.
  20 |  * Handles its own loading skeleton state.
  21 |  */
  22 | export function PaymentSummaryCards({
  23 |   summary,
  24 |   isLoading,
  25 | }: PaymentSummaryCardsProps) {
  26 |   if (!summary) {
  27 |     return (
  28 |       <StatsCards 
  29 |         stats={[]} 
  30 |         isLoading={true} 
  31 |         loadingCardCount={5}
  32 |         gridCols="grid-cols-1 md:grid-cols-2 lg:grid-cols-5"
  33 |       />
  34 |     );
  35 |   }
  36 | 
  37 |   const statsData = [
  38 |     {
  39 |       id: 'total-payments',
  40 |       title: 'إجمالي المدفوعات',
  41 |       value: summary.total,
  42 |       subtitle: 'جميع المعاملات',
  43 |       icon: CreditCard,
  44 |       cardClassName: 'border-l-4 border-l-blue-500'
  45 |     },
  46 |     {
  47 |       id: 'completed-payments',
  48 |       title: 'مكتملة',
  49 |       value: summary.completed,
  50 |       subtitle: `${summary.total > 0 ? ((summary.completed / summary.total) * 100).toFixed(1) : 0}% من المجموع`,
  51 |       icon: CheckCircle,
  52 |       cardClassName: 'border-l-4 border-l-green-500'
  53 |     },
  54 |     {
  55 |       id: 'pending-payments',
  56 |       title: 'معلقة',
  57 |       value: summary.pending,
  58 |       subtitle: 'تحتاج متابعة',
  59 |       icon: Clock,
  60 |       cardClassName: 'border-l-4 border-l-yellow-500'
  61 |     },
  62 |     {
  63 |       id: 'failed-payments',
  64 |       title: 'فاشلة',
  65 |       value: summary.failed,
  66 |       subtitle: `${summary.cancelled} ملغية`,
  67 |       icon: XCircle,
  68 |       cardClassName: 'border-l-4 border-l-red-500'
  69 |     },
  70 |     {
  71 |       id: 'total-revenue',
  72 |       title: 'إجمالي الإيرادات',
  73 |       value: formatCurrency(summary.totalRevenue),
  74 |       subtitle: 'من المدفوعات المكتملة',
  75 |       icon: DollarSign,
  76 |       cardClassName: 'border-l-4 border-l-purple-500'
  77 |     }
  78 |   ];
  79 | 
  80 |   return (
  81 |     <StatsCards 
  82 |       stats={statsData} 
  83 |       isLoading={isLoading}
  84 |       gridCols="grid-cols-1 md:grid-cols-2 lg:grid-cols-5"
  85 |     />
  86 |   );
  87 | }
```

================================================================================

## 22. src\components\admin\revenue-analytics\PaymentMethodsChart.tsx

**File Type:** TSX
**File Name:** PaymentMethodsChart.tsx
**Full Path:** src\components\admin\revenue-analytics\PaymentMethodsChart.tsx

**File Size:** 1800 characters, 48 lines

### Content:

```tsx
   1 | // src/components/admin/revenue-analytics/PaymentMethodsChart.tsx
   2 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
   3 | import { CreditCard } from "lucide-react";
   4 | import { formatCurrency } from "@/lib/revenue-analytics-utils";
   5 | import type { PaymentMethodStats } from "@/hooks/useRevenueAnalytics";
   6 | 
   7 | interface PaymentMethodsChartProps {
   8 |   paymentMethods: PaymentMethodStats[];
   9 | }
  10 | 
  11 | export function PaymentMethodsChart({ paymentMethods }: PaymentMethodsChartProps) {
  12 |   return (
  13 |     <Card>
  14 |       <CardHeader>
  15 |         <CardTitle className="flex items-center gap-2">
  16 |           <CreditCard className="h-5 w-5" />
  17 |           طرق الدفع
  18 |         </CardTitle>
  19 |       </CardHeader>
  20 |       <CardContent>
  21 |         <div className="space-y-4">
  22 |           {paymentMethods.map((method) => (
  23 |             <div key={method.method} className="space-y-2">
  24 |               <div className="flex items-center justify-between">
  25 |                 <span className="font-medium">{method.method}</span>
  26 |                 <span className="text-sm text-muted-foreground">
  27 |                   {method.percentage.toFixed(1)}%
  28 |                 </span>
  29 |               </div>
  30 |               <div className="w-full bg-muted rounded-full h-2">
  31 |                 <div 
  32 |                   className="bg-primary h-2 rounded-full" 
  33 |                   style={{ width: `${method.percentage}%` }}
  34 |                 ></div>
  35 |               </div>
  36 |               <div className="flex items-center justify-between text-sm text-muted-foreground">
  37 |                 <span>{method.count} معاملة</span>
  38 |                 <span>
  39 |                   {formatCurrency(method.revenue)}
  40 |                 </span>
  41 |               </div>
  42 |             </div>
  43 |           ))}
  44 |         </div>
  45 |       </CardContent>
  46 |     </Card>
  47 |   );
  48 | }
```

================================================================================

## 23. src\components\admin\revenue-analytics\RecentPayments.tsx

**File Type:** TSX
**File Name:** RecentPayments.tsx
**Full Path:** src\components\admin\revenue-analytics\RecentPayments.tsx

**File Size:** 2199 characters, 55 lines

### Content:

```tsx
   1 | // src/components/admin/revenue-analytics/RecentPayments.tsx
   2 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
   3 | import { Badge } from "@/components/ui/badge";
   4 | import { Users, DollarSign } from "lucide-react";
   5 | import { formatCurrencyWithDecimals, formatDate, getPaymentStatusText, getPaymentStatusVariant } from "@/lib/revenue-analytics-utils";
   6 | import type { Payment } from "@/hooks/useRevenueAnalytics";
   7 | 
   8 | interface RecentPaymentsProps {
   9 |   payments: Payment[];
  10 | }
  11 | 
  12 | export function RecentPayments({ payments }: RecentPaymentsProps) {
  13 |   return (
  14 |     <Card>
  15 |       <CardHeader>
  16 |         <CardTitle className="flex items-center gap-2">
  17 |           <Users className="h-5 w-5" />
  18 |           المدفوعات الحديثة
  19 |         </CardTitle>
  20 |       </CardHeader>
  21 |       <CardContent>
  22 |         <div className="space-y-3">
  23 |           {payments.map((payment) => (
  24 |             <div key={payment.id} className="flex items-center justify-between p-3 border rounded-lg">
  25 |               <div className="flex items-center gap-3">
  26 |                 <div className="w-10 h-10 rounded-full bg-green-100 flex items-center justify-center">
  27 |                   <DollarSign className="h-5 w-5 text-green-600" />
  28 |                 </div>
  29 |                 <div>
  30 |                   <p className="font-medium">{payment.studentName}</p>
  31 |                   <p className="text-sm text-muted-foreground">{payment.courseName}</p>
  32 |                 </div>
  33 |               </div>
  34 |               <div className="text-right">
  35 |                 <p className="font-bold">
  36 |                   {formatCurrencyWithDecimals(payment.amount)}
  37 |                 </p>
  38 |                 <div className="flex items-center gap-2">
  39 |                   <Badge 
  40 |                     variant={getPaymentStatusVariant(payment.status)}
  41 |                   >
  42 |                     {getPaymentStatusText(payment.status)}
  43 |                   </Badge>
  44 |                   <span className="text-xs text-muted-foreground">
  45 |                     {formatDate(payment.timestamp)}
  46 |                   </span>
  47 |                 </div>
  48 |               </div>
  49 |             </div>
  50 |           ))}
  51 |         </div>
  52 |       </CardContent>
  53 |     </Card>
  54 |   );
  55 | }
```

================================================================================

## 24. src\components\admin\revenue-analytics\RevenueSummaryCards.tsx

**File Type:** TSX
**File Name:** RevenueSummaryCards.tsx
**Full Path:** src\components\admin\revenue-analytics\RevenueSummaryCards.tsx

**File Size:** 1896 characters, 67 lines

### Content:

```tsx
   1 | // src/components/admin/revenue-analytics/RevenueSummaryCards.tsx
   2 | import {
   3 |   DollarSign,
   4 |   Calendar,
   5 |   CreditCard,
   6 |   BarChart3,
   7 | } from "lucide-react";
   8 | import { StatsCards } from "@/components/shared/StatsCards";
   9 | import {
  10 |   formatCurrency,
  11 |   formatDate,
  12 |   formatMonthYear,
  13 |   calculateAverageOrderValue,
  14 | } from "@/lib/revenue-analytics-utils";
  15 | import type { RevenueData } from "@/hooks/useRevenueAnalytics";
  16 | 
  17 | interface RevenueSummaryCardsProps {
  18 |   revenueData: RevenueData;
  19 | }
  20 | 
  21 | export function RevenueSummaryCards({ revenueData }: RevenueSummaryCardsProps) {
  22 |   const growthIndicator =
  23 |     revenueData.revenueGrowth >= 0
  24 |       ? `+${revenueData.revenueGrowth.toFixed(1)}% من الشهر الماضي`
  25 |       : `${revenueData.revenueGrowth.toFixed(1)}% من الشهر الماضي`;
  26 | 
  27 |   const statsData = [
  28 |     {
  29 |       id: "total-revenue",
  30 |       title: "إجمالي الإيرادات",
  31 |       value: formatCurrency(revenueData.totalRevenue),
  32 |       subtitle: growthIndicator,
  33 |       icon: DollarSign,
  34 |       subtitleColor:
  35 |         revenueData.revenueGrowth >= 0 ? "text-green-600" : "text-red-600",
  36 |     },
  37 |     {
  38 |       id: "monthly-revenue",
  39 |       title: "إيرادات الشهر",
  40 |       value: formatCurrency(revenueData.monthlyRevenue),
  41 |       subtitle: formatMonthYear(),
  42 |       icon: Calendar,
  43 |     },
  44 |     {
  45 |       id: "daily-revenue",
  46 |       title: "إيرادات اليوم",
  47 |       value: formatCurrency(revenueData.dailyRevenue),
  48 |       subtitle: formatDate(new Date()),
  49 |       icon: BarChart3,
  50 |     },
  51 |     {
  52 |       id: "average-order",
  53 |       title: "متوسط الطلب",
  54 |       value:
  55 |         revenueData.recentPayments.length > 0
  56 |           ? formatCurrency(
  57 |               calculateAverageOrderValue(revenueData.recentPayments.map(p => Number(p.amount)))
  58 |             )
  59 |           : "0 ج.م",
  60 |       subtitle: "قيمة الطلب الواحد",
  61 |       icon: CreditCard,
  62 |     },
  63 |   ];
  64 | 
  65 |   return <StatsCards stats={statsData} />;
  66 | }
  67 | 
```

================================================================================

## 25. src\components\admin\student-detail\PaymentList.tsx

**File Type:** TSX
**File Name:** PaymentList.tsx
**Full Path:** src\components\admin\student-detail\PaymentList.tsx

**File Size:** 3598 characters, 100 lines

### Content:

```tsx
   1 | // src/components/admin/student-detail/PaymentList.tsx
   2 | 
   3 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   4 | import { Button } from '@/components/ui/button';
   5 | import { CreditCard, Eye } from 'lucide-react';
   6 | import { PaymentStatusBadge } from '@/components/shared/PaymentStatusBadge';
   7 | import { formatCurrency } from '@/lib/formatters';
   8 | 
   9 | type Payment = {
  10 |   id: string;
  11 |   amount: number;
  12 |   currency: string;
  13 |   status: string;
  14 |   createdAt: Date;
  15 |   completedAt: Date | null;
  16 |   failureReason: string | null;
  17 |   paymobTransactionId: number | null;
  18 |   course: {
  19 |     id: string;
  20 |     title: string;
  21 |     thumbnailUrl: string;
  22 |   };
  23 | };
  24 | 
  25 | interface PaymentListProps {
  26 |   payments: Payment[];
  27 |   onViewDetails: (paymentId: string) => void;
  28 | }
  29 | 
  30 | export function PaymentList({ payments, onViewDetails }: PaymentListProps) {
  31 |   return (
  32 |     <Card>
  33 |       <CardHeader>
  34 |         <CardTitle>سجل المدفوعات ({payments.length})</CardTitle>
  35 |       </CardHeader>
  36 |       <CardContent>
  37 |         <div className="space-y-4">
  38 |           {payments.length > 0 ? (
  39 |             payments.map((payment) => (
  40 |               <div
  41 |                 key={payment.id}
  42 |                 className="flex items-center gap-4 p-4 border rounded-lg"
  43 |               >
  44 |                 <img
  45 |                   src={payment.course.thumbnailUrl}
  46 |                   alt={payment.course.title}
  47 |                   className="w-24 h-16 object-cover rounded-md"
  48 |                 />
  49 |                 <div className="flex-1">
  50 |                   <div className="flex items-center gap-2 mb-1">
  51 |                     <h3 className="font-semibold">{payment.course.title}</h3>
  52 |                     <PaymentStatusBadge status={payment.status} />
  53 |                   </div>
  54 |                   <div className="flex flex-wrap items-center gap-x-4 gap-y-1 text-sm text-muted-foreground">
  55 |                     <span>
  56 |                       تاريخ الإنشاء:{' '}
  57 |                       {new Date(payment.createdAt).toLocaleDateString('ar-SA')}
  58 |                     </span>
  59 |                     {payment.completedAt && (
  60 |                       <span>
  61 |                         تاريخ الإكمال:{' '}
  62 |                         {new Date(payment.completedAt).toLocaleDateString('ar-SA')}
  63 |                       </span>
  64 |                     )}
  65 |                     {payment.paymobTransactionId && (
  66 |                       <span>رقم المعاملة: {payment.paymobTransactionId}</span>
  67 |                     )}
  68 |                   </div>
  69 |                   {payment.failureReason && (
  70 |                     <p className="text-xs text-red-600 mt-1">
  71 |                       سبب الفشل: {payment.failureReason}
  72 |                     </p>
  73 |                   )}
  74 |                 </div>
  75 |                 <div className="text-right space-y-2">
  76 |                   <div className="text-lg font-bold">
  77 |                     {formatCurrency(payment.amount)}
  78 |                   </div>
  79 |                   <Button
  80 |                     variant="outline"
  81 |                     size="sm"
  82 |                     onClick={() => onViewDetails(payment.id)}
  83 |                   >
  84 |                     <Eye className="h-3 w-3 ml-1" />
  85 |                     التفاصيل
  86 |                   </Button>
  87 |                 </div>
  88 |               </div>
  89 |             ))
  90 |           ) : (
  91 |             <div className="text-center py-8">
  92 |               <CreditCard className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
  93 |               <p className="text-muted-foreground">لا توجد مدفوعات</p>
  94 |             </div>
  95 |           )}
  96 |         </div>
  97 |       </CardContent>
  98 |     </Card>
  99 |   );
 100 | }
```

================================================================================

## 26. src\components\admin\student-detail\StudentDataTabs.tsx

**File Type:** TSX
**File Name:** StudentDataTabs.tsx
**Full Path:** src\components\admin\student-detail\StudentDataTabs.tsx

**File Size:** 1738 characters, 45 lines

### Content:

```tsx
   1 | // src/components/admin/student-detail/StudentDataTabs.tsx
   2 | 
   3 | import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
   4 | import { EnrollmentList } from './EnrollmentList';
   5 | import { PaymentList } from './PaymentList';
   6 | import { CertificateList } from './CertificateList';
   7 | 
   8 | // Define a more specific type for the props based on the original component's data structure
   9 | type StudentData = {
  10 |   enrollments: any[]; // Replace 'any' with the specific type from EnrollmentList if available
  11 |   payments: any[]; // Replace 'any' with the specific type from PaymentList
  12 |   certificates: any[]; // Replace 'any' with the specific type from CertificateList
  13 | };
  14 | 
  15 | interface StudentDataTabsProps {
  16 |   studentData: StudentData;
  17 |   onViewPaymentDetails: (paymentId: string) => void;
  18 | }
  19 | 
  20 | export function StudentDataTabs({
  21 |   studentData,
  22 |   onViewPaymentDetails,
  23 | }: StudentDataTabsProps) {
  24 |   return (
  25 |     <Tabs defaultValue="enrollments" className="w-full">
  26 |       <TabsList>
  27 |         <TabsTrigger value="enrollments">الدورات المسجل بها</TabsTrigger>
  28 |         <TabsTrigger value="payments">سجل المدفوعات</TabsTrigger>
  29 |         <TabsTrigger value="certificates">الشهادات</TabsTrigger>
  30 |       </TabsList>
  31 |       <TabsContent value="enrollments" className="pt-4">
  32 |         <EnrollmentList enrollments={studentData.enrollments} />
  33 |       </TabsContent>
  34 |       <TabsContent value="payments" className="pt-4">
  35 |         <PaymentList
  36 |           payments={studentData.payments}
  37 |           onViewDetails={onViewPaymentDetails}
  38 |         />
  39 |       </TabsContent>
  40 |       <TabsContent value="certificates" className="pt-4">
  41 |         <CertificateList certificates={studentData.certificates} />
  42 |       </TabsContent>
  43 |     </Tabs>
  44 |   );
  45 | }
```

================================================================================

## 27. src\components\admin\student-detail\StudentStats.tsx

**File Type:** TSX
**File Name:** StudentStats.tsx
**Full Path:** src\components\admin\student-detail\StudentStats.tsx

**File Size:** 3108 characters, 86 lines

### Content:

```tsx
   1 | // src/components/admin/student-detail/StudentStats.tsx
   2 | 
   3 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   4 | import { BookOpen, CreditCard, Award, CheckCircle } from 'lucide-react';
   5 | import { formatCurrency } from '@/lib/formatters';
   6 | 
   7 | interface StudentStatsProps {
   8 |   enrollmentsCount: number;
   9 |   certificatesCount: number;
  10 |   payments: Array<{
  11 |     amount: number;
  12 |     status: string;
  13 |   }>;
  14 | }
  15 | 
  16 | /**
  17 |  * Renders the grid of 4 key statistic cards for a student.
  18 |  */
  19 | export function StudentStats({
  20 |   enrollmentsCount,
  21 |   certificatesCount,
  22 |   payments,
  23 | }: StudentStatsProps) {
  24 |   const totalSpent = payments
  25 |     .filter((p) => p.status === 'COMPLETED')
  26 |     .reduce((sum, payment) => sum + payment.amount, 0);
  27 | 
  28 |   const completedPayments = payments.filter(
  29 |     (p) => p.status === 'COMPLETED'
  30 |   ).length;
  31 | 
  32 |   const successRate =
  33 |     payments.length > 0
  34 |       ? ((completedPayments / payments.length) * 100).toFixed(1) + '%'
  35 |       : '0%';
  36 | 
  37 |   return (
  38 |     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
  39 |       <Card>
  40 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  41 |           <CardTitle className="text-sm font-medium">إجمالي الدورات</CardTitle>
  42 |           <BookOpen className="h-4 w-4 text-muted-foreground" />
  43 |         </CardHeader>
  44 |         <CardContent>
  45 |           <div className="text-2xl font-bold">{enrollmentsCount}</div>
  46 |           <p className="text-xs text-muted-foreground">دورة مسجل بها</p>
  47 |         </CardContent>
  48 |       </Card>
  49 | 
  50 |       <Card>
  51 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  52 |           <CardTitle className="text-sm font-medium">إجمالي الإنفاق</CardTitle>
  53 |           <CreditCard className="h-4 w-4 text-muted-foreground" />
  54 |         </CardHeader>
  55 |         <CardContent>
  56 |           <div className="text-2xl font-bold">{formatCurrency(totalSpent)}</div>
  57 |           <p className="text-xs text-muted-foreground">
  58 |             {completedPayments} دفعة مكتملة
  59 |           </p>
  60 |         </CardContent>
  61 |       </Card>
  62 | 
  63 |       <Card>
  64 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  65 |           <CardTitle className="text-sm font-medium">الشهادات المكتسبة</CardTitle>
  66 |           <Award className="h-4 w-4 text-muted-foreground" />
  67 |         </CardHeader>
  68 |         <CardContent>
  69 |           <div className="text-2xl font-bold">{certificatesCount}</div>
  70 |           <p className="text-xs text-muted-foreground">شهادة تم الحصول عليها</p>
  71 |         </CardContent>
  72 |       </Card>
  73 | 
  74 |       <Card>
  75 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  76 |           <CardTitle className="text-sm font-medium">معدل نجاح الدفع</CardTitle>
  77 |           <CheckCircle className="h-4 w-4 text-muted-foreground" />
  78 |         </CardHeader>
  79 |         <CardContent>
  80 |           <div className="text-2xl font-bold">{successRate}</div>
  81 |           <p className="text-xs text-muted-foreground">من إجمالي المدفوعات</p>
  82 |         </CardContent>
  83 |       </Card>
  84 |     </div>
  85 |   );
  86 | }
```

================================================================================

## 28. src\components\admin\system-logs\LogsStatsCards.tsx

**File Type:** TSX
**File Name:** LogsStatsCards.tsx
**Full Path:** src\components\admin\system-logs\LogsStatsCards.tsx

**File Size:** 3181 characters, 85 lines

### Content:

```tsx
   1 | // src/components/admin/system-logs/LogsStatsCards.tsx
   2 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   3 | import type { LogStats } from '@/hooks/useSystemLogs';
   4 | 
   5 | interface LogsStatsCardsProps {
   6 |   stats: LogStats;
   7 | }
   8 | 
   9 | export function LogsStatsCards({ stats }: LogsStatsCardsProps) {
  10 |   return (
  11 |     <div className="grid grid-cols-1 md:grid-cols-4 lg:grid-cols-8 gap-4">
  12 |       <Card className="border-l-4 border-l-blue-500">
  13 |         <CardHeader className="pb-2">
  14 |           <CardTitle className="text-sm font-medium">إجمالي السجلات</CardTitle>
  15 |         </CardHeader>
  16 |         <CardContent>
  17 |           <div className="text-2xl font-bold text-blue-600">{stats.totalLogs}</div>
  18 |         </CardContent>
  19 |       </Card>
  20 | 
  21 |       <Card className="border-l-4 border-l-green-500">
  22 |         <CardHeader className="pb-2">
  23 |           <CardTitle className="text-sm font-medium">اليوم</CardTitle>
  24 |         </CardHeader>
  25 |         <CardContent>
  26 |           <div className="text-2xl font-bold text-green-600">{stats.todayLogs}</div>
  27 |         </CardContent>
  28 |       </Card>
  29 | 
  30 |       <Card className="border-l-4 border-l-red-500">
  31 |         <CardHeader className="pb-2">
  32 |           <CardTitle className="text-sm font-medium">أخطاء</CardTitle>
  33 |         </CardHeader>
  34 |         <CardContent>
  35 |           <div className="text-2xl font-bold text-red-600">{stats.errorLogs}</div>
  36 |         </CardContent>
  37 |       </Card>
  38 | 
  39 |       <Card className="border-l-4 border-l-yellow-500">
  40 |         <CardHeader className="pb-2">
  41 |           <CardTitle className="text-sm font-medium">تحذيرات</CardTitle>
  42 |         </CardHeader>
  43 |         <CardContent>
  44 |           <div className="text-2xl font-bold text-yellow-600">{stats.warningLogs}</div>
  45 |         </CardContent>
  46 |       </Card>
  47 | 
  48 |       <Card className="border-l-4 border-l-purple-500">
  49 |         <CardHeader className="pb-2">
  50 |           <CardTitle className="text-sm font-medium">المستخدمين</CardTitle>
  51 |         </CardHeader>
  52 |         <CardContent>
  53 |           <div className="text-2xl font-bold text-purple-600">{stats.userActions}</div>
  54 |         </CardContent>
  55 |       </Card>
  56 | 
  57 |       <Card className="border-l-4 border-l-indigo-500">
  58 |         <CardHeader className="pb-2">
  59 |           <CardTitle className="text-sm font-medium">المدفوعات</CardTitle>
  60 |         </CardHeader>
  61 |         <CardContent>
  62 |           <div className="text-2xl font-bold text-indigo-600">{stats.paymentActions}</div>
  63 |         </CardContent>
  64 |       </Card>
  65 | 
  66 |       <Card className="border-l-4 border-l-pink-500">
  67 |         <CardHeader className="pb-2">
  68 |           <CardTitle className="text-sm font-medium">الدورات</CardTitle>
  69 |         </CardHeader>
  70 |         <CardContent>
  71 |           <div className="text-2xl font-bold text-pink-600">{stats.courseActions}</div>
  72 |         </CardContent>
  73 |       </Card>
  74 | 
  75 |       <Card className="border-l-4 border-l-gray-500">
  76 |         <CardHeader className="pb-2">
  77 |           <CardTitle className="text-sm font-medium">النظام</CardTitle>
  78 |         </CardHeader>
  79 |         <CardContent>
  80 |           <div className="text-2xl font-bold text-gray-600">{stats.systemActions}</div>
  81 |         </CardContent>
  82 |       </Card>
  83 |     </div>
  84 |   );
  85 | }
```

================================================================================

## 29. src\components\analytics\admin\DetailedAnalyticsTabs.tsx

**File Type:** TSX
**File Name:** DetailedAnalyticsTabs.tsx
**Full Path:** src\components\analytics\admin\DetailedAnalyticsTabs.tsx

**File Size:** 13423 characters, 314 lines

### Content:

```tsx
   1 | // src/components/analytics/admin/DetailedAnalyticsTabs.tsx
   2 | 
   3 | import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
   4 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   5 | import { Badge } from '@/components/ui/badge';
   6 | import {
   7 |   Users,
   8 |   BookOpen,
   9 |   DollarSign,
  10 |   Activity,
  11 |   Award,
  12 |   PieChart,
  13 | } from 'lucide-react';
  14 | import { PlatformAnalytics } from '@/hooks/useAdminAnalytics';
  15 | import { formatCurrency, formatDate, formatTime } from '@/lib/formatters';
  16 | 
  17 | interface DetailedAnalyticsTabsProps {
  18 |   analytics: PlatformAnalytics;
  19 | }
  20 | 
  21 | /**
  22 |  * Renders the main tab container for detailed analytics sections.
  23 |  * Note: In a future step, we will break down each <TabsContent> into its own component.
  24 |  */
  25 | export function DetailedAnalyticsTabs({ analytics }: DetailedAnalyticsTabsProps) {
  26 |   return (
  27 |     <Tabs defaultValue="overview" className="w-full">
  28 |       <TabsList className="grid w-full grid-cols-5">
  29 |         <TabsTrigger value="overview">نظرة عامة</TabsTrigger>
  30 |         <TabsTrigger value="users">المستخدمون</TabsTrigger>
  31 |         <TabsTrigger value="courses">الدورات</TabsTrigger>
  32 |         <TabsTrigger value="revenue">الإيرادات</TabsTrigger>
  33 |         <TabsTrigger value="activity">النشاط</TabsTrigger>
  34 |       </TabsList>
  35 | 
  36 |       {/* Overview Tab */}
  37 |       <TabsContent value="overview" className="space-y-4 pt-4">
  38 |         <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
  39 |           {/* Top Courses */}
  40 |           <Card>
  41 |             <CardHeader>
  42 |               <CardTitle className="flex items-center gap-2">
  43 |                 <Award className="w-5 h-5" />
  44 |                 أفضل الدورات
  45 |               </CardTitle>
  46 |             </CardHeader>
  47 |             <CardContent>
  48 |               <div className="space-y-4">
  49 |                 {analytics.topCourses.slice(0, 5).map((course, index) => (
  50 |                   <div key={course.id} className="flex items-center justify-between">
  51 |                     <div className="flex items-center gap-3">
  52 |                       <Badge variant="outline" className="w-6 h-6 p-0 flex items-center justify-center">
  53 |                         {index + 1}
  54 |                       </Badge>
  55 |                       <div>
  56 |                         <h4 className="font-medium text-sm line-clamp-1">{course.title}</h4>
  57 |                         <p className="text-xs text-muted-foreground">{course.professor}</p>
  58 |                       </div>
  59 |                     </div>
  60 |                     <div className="text-right">
  61 |                       <div className="text-sm font-semibold">{course.enrollments} ملتحق</div>
  62 |                       <div className="text-xs text-muted-foreground">
  63 |                         {formatCurrency(course.revenue)}
  64 |                       </div>
  65 |                     </div>
  66 |                   </div>
  67 |                 ))}
  68 |               </div>
  69 |             </CardContent>
  70 |           </Card>
  71 | 
  72 |           {/* Top Professors */}
  73 |           <Card>
  74 |             <CardHeader>
  75 |               <CardTitle className="flex items-center gap-2">
  76 |                 <Users className="w-5 h-5" />
  77 |                 أفضل الأساتذة
  78 |               </CardTitle>
  79 |             </CardHeader>
  80 |             <CardContent>
  81 |               <div className="space-y-4">
  82 |                 {analytics.topProfessors.slice(0, 5).map((professor, index) => (
  83 |                   <div key={professor.id} className="flex items-center justify-between">
  84 |                     <div className="flex items-center gap-3">
  85 |                       <Badge variant="outline" className="w-6 h-6 p-0 flex items-center justify-center">
  86 |                         {index + 1}
  87 |                       </Badge>
  88 |                       <div>
  89 |                         <h4 className="font-medium text-sm">{professor.name}</h4>
  90 |                         <p className="text-xs text-muted-foreground">
  91 |                           {professor.coursesCount} دورة
  92 |                         </p>
  93 |                       </div>
  94 |                     </div>
  95 |                     <div className="text-right">
  96 |                       <div className="text-sm font-semibold">{professor.totalEnrollments} ملتحق</div>
  97 |                       <div className="text-xs text-muted-foreground">
  98 |                         {formatCurrency(professor.totalRevenue)}
  99 |                       </div>
 100 |                     </div>
 101 |                   </div>
 102 |                 ))}
 103 |               </div>
 104 |             </CardContent>
 105 |           </Card>
 106 |         </div>
 107 |       </TabsContent>
 108 | 
 109 |       {/* Users Tab */}
 110 |       <TabsContent value="users" className="space-y-4 pt-4">
 111 |         <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
 112 |           <Card>
 113 |             <CardHeader>
 114 |               <CardTitle className="text-lg">توزيع المستخدمين</CardTitle>
 115 |             </CardHeader>
 116 |             <CardContent className="space-y-4">
 117 |               <div className="flex justify-between items-center">
 118 |                 <span>الملتحقين</span>
 119 |                 <Badge variant="outline">{analytics.userStats.students}</Badge>
 120 |               </div>
 121 |               <div className="flex justify-between items-center">
 122 |                 <span>الأساتذة</span>
 123 |                 <Badge variant="outline">{analytics.userStats.professors}</Badge>
 124 |               </div>
 125 |               <div className="flex justify-between items-center">
 126 |                 <span>المديرون</span>
 127 |                 <Badge variant="outline">{analytics.userStats.admins}</Badge>
 128 |               </div>
 129 |             </CardContent>
 130 |           </Card>
 131 | 
 132 |           <Card>
 133 |             <CardHeader>
 134 |               <CardTitle className="text-lg">النشاط الحديث</CardTitle>
 135 |             </CardHeader>
 136 |             <CardContent className="space-y-4">
 137 |               <div className="flex justify-between items-center">
 138 |                 <span>مستخدمون جدد هذا الشهر</span>
 139 |                 <Badge variant="default">{analytics.userStats.newUsersThisMonth}</Badge>
 140 |               </div>
 141 |               <div className="flex justify-between items-center">
 142 |                 <span>نشطون هذا الأسبوع</span>
 143 |                 <Badge variant="secondary">{analytics.userStats.activeUsersThisWeek}</Badge>
 144 |               </div>
 145 |             </CardContent>
 146 |           </Card>
 147 | 
 148 |           <Card>
 149 |             <CardHeader>
 150 |               <CardTitle className="text-lg">معدل النمو</CardTitle>
 151 |             </CardHeader>
 152 |             <CardContent className="space-y-4">
 153 |               <div className="text-center">
 154 |                 <div className="text-2xl font-bold text-green-600">
 155 |                   +{Math.round((analytics.userStats.newUsersThisMonth / analytics.overview.totalUsers) * 100)}%
 156 |                 </div>
 157 |                 <p className="text-sm text-muted-foreground">نمو المستخدمين</p>
 158 |               </div>
 159 |             </CardContent>
 160 |           </Card>
 161 |         </div>
 162 |       </TabsContent>
 163 | 
 164 |       {/* Courses Tab */}
 165 |       <TabsContent value="courses" className="space-y-4 pt-4">
 166 |         <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
 167 |           <Card>
 168 |             <CardHeader>
 169 |               <CardTitle className="flex items-center gap-2">
 170 |                 <PieChart className="w-5 h-5" />
 171 |                 إحصائيات المحتوى
 172 |               </CardTitle>
 173 |             </CardHeader>
 174 |             <CardContent className="space-y-4">
 175 |               <div className="flex justify-between items-center">
 176 |                 <span>إجمالي الدروس</span>
 177 |                 <Badge variant="outline">{analytics.courseStats.totalLessons}</Badge>
 178 |               </div>
 179 |               <div className="flex justify-between items-center">
 180 |                 <span>وقت المشاهدة الإجمالي</span>
 181 |                 <Badge variant="outline">{formatTime(analytics.courseStats.totalWatchTime)}</Badge>
 182 |               </div>
 183 |               <div className="flex justify-between items-center">
 184 |                 <span>معدل الإكمال</span>
 185 |                 <Badge variant="default">
 186 |                   {analytics.courseStats.averageCompletionRate.toFixed(1)}%
 187 |                 </Badge>
 188 |               </div>
 189 |             </CardContent>
 190 |           </Card>
 191 | 
 192 |           <Card>
 193 |             <CardHeader>
 194 |               <CardTitle className="flex items-center gap-2">
 195 |                 <BookOpen className="w-5 h-5" />
 196 |                 أفضل الفئات
 197 |               </CardTitle>
 198 |             </CardHeader>
 199 |             <CardContent>
 200 |               <div className="space-y-3">
 201 |                 {analytics.courseStats.topCategories.map((category, index) => (
 202 |                   <div key={category.name} className="flex items-center justify-between">
 203 |                     <div className="flex items-center gap-2">
 204 |                       <Badge variant="outline" className="w-5 h-5 p-0 flex items-center justify-center text-xs">
 205 |                         {index + 1}
 206 |                       </Badge>
 207 |                       <span className="text-sm">{category.name}</span>
 208 |                     </div>
 209 |                     <div className="text-right">
 210 |                       <div className="text-sm font-semibold">{category.courseCount} دورة</div>
 211 |                       <div className="text-xs text-muted-foreground">
 212 |                         {category.enrollmentCount} تسجيل
 213 |                       </div>
 214 |                     </div>
 215 |                   </div>
 216 |                 ))}
 217 |               </div>
 218 |             </CardContent>
 219 |           </Card>
 220 |         </div>
 221 |       </TabsContent>
 222 | 
 223 |       {/* Revenue Tab */}
 224 |       <TabsContent value="revenue" className="space-y-4 pt-4">
 225 |         <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
 226 |           <Card>
 227 |             <CardHeader>
 228 |               <CardTitle className="text-lg">إحصائيات الدفع</CardTitle>
 229 |             </CardHeader>
 230 |             <CardContent className="space-y-4">
 231 |               <div className="flex justify-between items-center">
 232 |                 <span>دفعات ناجحة</span>
 233 |                 <Badge variant="default">{analytics.revenueStats.successfulPayments}</Badge>
 234 |               </div>
 235 |               <div className="flex justify-between items-center">
 236 |                 <span>دفعات معلقة</span>
 237 |                 <Badge variant="secondary">{analytics.revenueStats.pendingPayments}</Badge>
 238 |               </div>
 239 |               <div className="flex justify-between items-center">
 240 |                 <span>دفعات فاشلة</span>
 241 |                 <Badge variant="outline">{analytics.revenueStats.failedPayments}</Badge>
 242 |               </div>
 243 |             </CardContent>
 244 |           </Card>
 245 | 
 246 |           <Card>
 247 |             <CardHeader>
 248 |               <CardTitle className="text-lg">متوسط قيمة الطلب</CardTitle>
 249 |             </CardHeader>
 250 |             <CardContent>
 251 |               <div className="text-center">
 252 |                 <div className="text-2xl font-bold">
 253 |                   {formatCurrency(analytics.revenueStats.averageOrderValue)}
 254 |                 </div>
 255 |                 <p className="text-sm text-muted-foreground">متوسط قيمة الشراء</p>
 256 |               </div>
 257 |             </CardContent>
 258 |           </Card>
 259 | 
 260 |           <Card>
 261 |             <CardHeader>
 262 |               <CardTitle className="text-lg">الإيرادات الشهرية</CardTitle>
 263 |             </CardHeader>
 264 |             <CardContent>
 265 |               <div className="text-center">
 266 |                 <div className="text-2xl font-bold text-green-600">
 267 |                   {formatCurrency(analytics.revenueStats.monthlyRevenue)}
 268 |                 </div>
 269 |                 <p className="text-sm text-muted-foreground">إيرادات هذا الشهر</p>
 270 |               </div>
 271 |             </CardContent>
 272 |           </Card>
 273 |         </div>
 274 |       </TabsContent>
 275 | 
 276 |       {/* Activity Tab */}
 277 |       <TabsContent value="activity" className="space-y-4 pt-4">
 278 |         <Card>
 279 |           <CardHeader>
 280 |             <CardTitle className="flex items-center gap-2">
 281 |               <Activity className="w-5 h-5" />
 282 |               النشاط الحديث
 283 |             </CardTitle>
 284 |           </CardHeader>
 285 |           <CardContent>
 286 |             <div className="space-y-4">
 287 |               {analytics.recentActivity.map((activity, index) => (
 288 |                 <div key={index} className="flex items-center gap-3 p-3 border rounded-lg">
 289 |                   <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
 290 |                     activity.type === 'enrollment' ? 'bg-blue-100 text-blue-600' :
 291 |                     activity.type === 'payment' ? 'bg-green-100 text-green-600' :
 292 |                     activity.type === 'course_created' ? 'bg-purple-100 text-purple-600' :
 293 |                     'bg-orange-100 text-orange-600'
 294 |                   }`}>
 295 |                     {activity.type === 'enrollment' && <Users className="w-4 h-4" />}
 296 |                     {activity.type === 'payment' && <DollarSign className="w-4 h-4" />}
 297 |                     {activity.type === 'course_created' && <BookOpen className="w-4 h-4" />}
 298 |                     {activity.type === 'lesson_completed' && <Award className="w-4 h-4" />}
 299 |                   </div>
 300 |                   <div className="flex-1">
 301 |                     <p className="text-sm">{activity.description}</p>
 302 |                     <p className="text-xs text-muted-foreground">
 303 |                       {activity.user} • {formatDate(activity.timestamp)}
 304 |                     </p>
 305 |                   </div>
 306 |                 </div>
 307 |               ))}
 308 |             </div>
 309 |           </CardContent>
 310 |         </Card>
 311 |       </TabsContent>
 312 |     </Tabs>
 313 |   );
 314 | }
```

================================================================================

## 30. src\components\course\CourseAccessGuard.tsx

**File Type:** TSX
**File Name:** CourseAccessGuard.tsx
**Full Path:** src\components\course\CourseAccessGuard.tsx

**File Size:** 10971 characters, 358 lines

### Content:

```tsx
   1 | // src/components/course/CourseAccessGuard.tsx
   2 | "use client";
   3 | 
   4 | import { useState, useEffect, ReactNode } from "react";
   5 | import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
   6 | import { Button } from "@/components/ui/button";
   7 | import { Skeleton } from "@/components/ui/skeleton";
   8 | import { PaymentButton } from "@/components/payment/PaymentButton";
   9 | import { CourseAccessResult } from "@/lib/services/course-access.service";
  10 | import { getAccessMessage } from "@/lib/access-messages";
  11 | import { checkCourseAccess, enrollInFreeCourse } from "@/lib/api/course-access";
  12 | import { 
  13 |   Lock, 
  14 |   CheckCircle, 
  15 |   CreditCard, 
  16 |   UserPlus, 
  17 |   AlertCircle,
  18 |   Shield,
  19 |   Crown,
  20 |   GraduationCap,
  21 |   ExternalLink
  22 | } from "lucide-react";
  23 | import { toast } from "sonner";
  24 | import { useRouter } from "next/navigation";
  25 | import Link from "next/link";
  26 | 
  27 | interface Course {
  28 |   id: string;
  29 |   title: string;
  30 |   description: string;
  31 |   price: number | null;
  32 |   currency: string;
  33 |   thumbnailUrl: string;
  34 |   isPublished: boolean;
  35 |   bunnyLibraryId: string;
  36 |   categoryId: string;
  37 |   professorId: string;
  38 |   createdAt: string;
  39 |   updatedAt: string;
  40 |   category: {
  41 |     id: string;
  42 |     name: string;
  43 |     slug: string;
  44 |     description?: string;
  45 |   };
  46 |   professor: {
  47 |     id: string;
  48 |     name: string;
  49 |     bio: string | null;
  50 |     expertise?: string[];
  51 |   };
  52 |   _count: {
  53 |     lessons: number;
  54 |     enrollments: number;
  55 |   };
  56 | }
  57 | 
  58 | interface CourseAccessGuardProps {
  59 |   courseId: string;
  60 |   course?: Course; // Optional course data to avoid extra API calls
  61 |   children: ReactNode;
  62 |   fallback?: ReactNode;
  63 |   showAccessInfo?: boolean;
  64 | }
  65 | 
  66 | export function CourseAccessGuard({ 
  67 |   courseId, 
  68 |   course, 
  69 |   children, 
  70 |   fallback,
  71 |   showAccessInfo = true 
  72 | }: CourseAccessGuardProps) {
  73 |   const [accessResult, setAccessResult] = useState<CourseAccessResult | null>(null);
  74 |   const [loading, setLoading] = useState(true);
  75 |   const [enrolling, setEnrolling] = useState(false);
  76 |   // const router = useRouter(); // Unused for now
  77 | 
  78 |   // Check course access on mount
  79 |   useEffect(() => {
  80 |     async function checkAccess() {
  81 |       try {
  82 |         setLoading(true);
  83 |         const result = await checkCourseAccess(courseId);
  84 |         setAccessResult(result);
  85 |       } catch (error) {
  86 |         console.error('Access check error:', error);
  87 |         setAccessResult({
  88 |           hasAccess: false,
  89 |           reason: 'not_found'
  90 |         });
  91 |       } finally {
  92 |         setLoading(false);
  93 |       }
  94 |     }
  95 | 
  96 |     checkAccess();
  97 |   }, [courseId]);
  98 | 
  99 |   // Handle free course enrollment
 100 |   const handleFreeEnrollment = async () => {
 101 |     try {
 102 |       setEnrolling(true);
 103 |       const result = await enrollInFreeCourse(courseId);
 104 |       
 105 |       if (result.success) {
 106 |         toast.success(result.message);
 107 |         // Refresh access check
 108 |         const newAccessResult = await checkCourseAccess(courseId);
 109 |         setAccessResult(newAccessResult);
 110 |       } else {
 111 |         toast.error(result.message);
 112 |       }
 113 |     } catch (error) {
 114 |       console.error('Enrollment error:', error);
 115 |       toast.error('حدث خطأ أثناء التسجيل');
 116 |     } finally {
 117 |       setEnrolling(false);
 118 |     }
 119 |   };
 120 | 
 121 |   // Handle payment success
 122 |   const handlePaymentSuccess = async () => {
 123 |     // Refresh access check after successful payment
 124 |     const newAccessResult = await checkCourseAccess(courseId);
 125 |     setAccessResult(newAccessResult);
 126 |   };
 127 | 
 128 |   // Get access icon
 129 |   const getAccessIcon = (reason: CourseAccessResult['reason']) => {
 130 |     switch (reason) {
 131 |       case 'enrolled':
 132 |         return <CheckCircle className="w-8 h-8 text-green-600" />;
 133 |       case 'free_course':
 134 |         return <GraduationCap className="w-8 h-8 text-blue-600" />;
 135 |       case 'admin_access':
 136 |         return <Crown className="w-8 h-8 text-purple-600" />;
 137 |       case 'professor_owns':
 138 |         return <Shield className="w-8 h-8 text-indigo-600" />;
 139 |       case 'payment_required':
 140 |         return <CreditCard className="w-8 h-8 text-orange-600" />;
 141 |       case 'not_authenticated':
 142 |         return <Lock className="w-8 h-8 text-gray-600" />;
 143 |       default:
 144 |         return <AlertCircle className="w-8 h-8 text-red-600" />;
 145 |     }
 146 |   };
 147 | 
 148 |   // Loading state
 149 |   if (loading) {
 150 |     return (
 151 |       <div className="space-y-4">
 152 |         <Card>
 153 |           <CardHeader>
 154 |             <div className="flex items-center gap-3">
 155 |               <Skeleton className="w-8 h-8 rounded-full" />
 156 |               <div className="space-y-2">
 157 |                 <Skeleton className="h-5 w-32" />
 158 |                 <Skeleton className="h-4 w-48" />
 159 |               </div>
 160 |             </div>
 161 |           </CardHeader>
 162 |           <CardContent>
 163 |             <Skeleton className="h-10 w-full" />
 164 |           </CardContent>
 165 |         </Card>
 166 |         {fallback || (
 167 |           <div className="space-y-4">
 168 |             <Skeleton className="h-64 w-full" />
 169 |             <Skeleton className="h-32 w-full" />
 170 |           </div>
 171 |         )}
 172 |       </div>
 173 |     );
 174 |   }
 175 | 
 176 |   // No access result
 177 |   if (!accessResult) {
 178 |     return (
 179 |       <Card>
 180 |         <CardContent className="text-center py-8">
 181 |           <AlertCircle className="w-12 h-12 mx-auto mb-4 text-red-600" />
 182 |           <h3 className="text-lg font-semibold mb-2">خطأ في التحقق من الوصول</h3>
 183 |           <p className="text-muted-foreground">حدث خطأ أثناء التحقق من صلاحية الوصول للدورة</p>
 184 |         </CardContent>
 185 |       </Card>
 186 |     );
 187 |   }
 188 | 
 189 |   // User has access - show content
 190 |   if (accessResult.hasAccess) {
 191 |     return (
 192 |       <div className="space-y-4">
 193 |         {/* Access Info (optional) */}
 194 |         {showAccessInfo && (
 195 |           <Card className="border-green-200 bg-green-50">
 196 |             <CardContent className="flex items-center gap-3 py-4">
 197 |               {getAccessIcon(accessResult.reason)}
 198 |               <div>
 199 |                 <h4 className="font-semibold text-green-800">
 200 |                   {getAccessMessage(accessResult).title}
 201 |                 </h4>
 202 |                 <p className="text-sm text-green-700">
 203 |                   {getAccessMessage(accessResult).description}
 204 |                 </p>
 205 |               </div>
 206 |             </CardContent>
 207 |           </Card>
 208 |         )}
 209 |         
 210 |         {/* Course Content */}
 211 |         {children}
 212 |       </div>
 213 |     );
 214 |   }
 215 | 
 216 |   // User doesn't have access - show access gate
 217 |   const accessMessage = getAccessMessage(accessResult);
 218 |   
 219 |   return (
 220 |     <div className="space-y-4">
 221 |       <Card>
 222 |         <CardHeader className="text-center">
 223 |           <div className="flex justify-center mb-4">
 224 |             {getAccessIcon(accessResult.reason)}
 225 |           </div>
 226 |           <CardTitle className="text-xl">{accessMessage.title}</CardTitle>
 227 |           <CardDescription className="text-base">
 228 |             {accessMessage.description}
 229 |           </CardDescription>
 230 |         </CardHeader>
 231 |         
 232 |         <CardContent className="space-y-4">
 233 |           {/* Course Information */}
 234 |           {accessResult.course && (
 235 |             <div className="p-4 bg-muted/50 rounded-lg">
 236 |               <h4 className="font-semibold mb-2">معلومات الدورة</h4>
 237 |               <p className="text-sm text-muted-foreground">
 238 |                 {accessResult.course.title}
 239 |               </p>
 240 |               {accessResult.course.price && (
 241 |                 <p className="text-sm font-medium mt-1">
 242 |                   السعر: {new Intl.NumberFormat('ar-EG', {
 243 |                     style: 'currency',
 244 |                     currency: accessResult.course.currency || 'EGP',
 245 |                     minimumFractionDigits: 0
 246 |                   }).format(Number(accessResult.course.price))}
 247 |                 </p>
 248 |               )}
 249 |             </div>
 250 |           )}
 251 | 
 252 |           {/* Action Buttons */}
 253 |           <div className="flex gap-3">
 254 |             {accessMessage.actionType === 'login' && (
 255 |               <Button asChild className="flex-1">
 256 |                 <Link href="/login">
 257 |                   <Lock className="w-4 h-4" />
 258 |                   {accessMessage.actionText}
 259 |                 </Link>
 260 |               </Button>
 261 |             )}
 262 | 
 263 |             {accessMessage.actionType === 'payment' && course && (
 264 |               <PaymentButton
 265 |                 course={course}
 266 |                 className="flex-1"
 267 |                 size="lg"
 268 |                 onPaymentSuccess={handlePaymentSuccess}
 269 |               />
 270 |             )}
 271 | 
 272 |             {accessMessage.actionType === 'enrollment' && (
 273 |               <Button 
 274 |                 onClick={handleFreeEnrollment}
 275 |                 disabled={enrolling}
 276 |                 className="flex-1"
 277 |                 size="lg"
 278 |               >
 279 |                 {enrolling ? (
 280 |                   <>
 281 |                     <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
 282 |                     جاري التسجيل...
 283 |                   </>
 284 |                 ) : (
 285 |                   <>
 286 |                     <UserPlus className="w-4 h-4" />
 287 |                     {accessMessage.actionText}
 288 |                   </>
 289 |                 )}
 290 |               </Button>
 291 |             )}
 292 | 
 293 |             {accessMessage.actionType === 'contact' && (
 294 |               <Button variant="outline" className="flex-1" size="lg">
 295 |                 <ExternalLink className="w-4 h-4" />
 296 |                 {accessMessage.actionText}
 297 |               </Button>
 298 |             )}
 299 |           </div>
 300 | 
 301 |           {/* Additional Actions */}
 302 |           <div className="flex justify-center">
 303 |             <Button variant="ghost" asChild>
 304 |               <Link href="/courses">
 305 |                 العودة إلى الدورات
 306 |               </Link>
 307 |             </Button>
 308 |           </div>
 309 |         </CardContent>
 310 |       </Card>
 311 | 
 312 |       {/* Fallback Content */}
 313 |       {fallback && (
 314 |         <div className="opacity-50 pointer-events-none">
 315 |           {fallback}
 316 |         </div>
 317 |       )}
 318 |     </div>
 319 |   );
 320 | }
 321 | 
 322 | // Higher-order component for protecting entire pages
 323 | export function withCourseAccess<P extends object>(
 324 |   Component: React.ComponentType<P>,
 325 |   options: {
 326 |     courseIdProp?: keyof P;
 327 |     fallback?: ReactNode;
 328 |     showAccessInfo?: boolean;
 329 |   } = {}
 330 | ) {
 331 |   const { courseIdProp = 'courseId', fallback, showAccessInfo = true } = options;
 332 | 
 333 |   return function ProtectedComponent(props: P) {
 334 |     const courseId = (props as any)[courseIdProp] as string;
 335 | 
 336 |     if (!courseId) {
 337 |       return (
 338 |         <Card>
 339 |           <CardContent className="text-center py-8">
 340 |             <AlertCircle className="w-12 h-12 mx-auto mb-4 text-red-600" />
 341 |             <h3 className="text-lg font-semibold mb-2">معرف الدورة مفقود</h3>
 342 |             <p className="text-muted-foreground">لم يتم تحديد معرف الدورة</p>
 343 |           </CardContent>
 344 |         </Card>
 345 |       );
 346 |     }
 347 | 
 348 |     return (
 349 |       <CourseAccessGuard
 350 |         courseId={courseId}
 351 |         fallback={fallback}
 352 |         showAccessInfo={showAccessInfo}
 353 |       >
 354 |         <Component {...props} />
 355 |       </CourseAccessGuard>
 356 |     );
 357 |   };
 358 | }
```

================================================================================

## 31. src\components\landing\FAQSection.tsx

**File Type:** TSX
**File Name:** FAQSection.tsx
**Full Path:** src\components\landing\FAQSection.tsx

**File Size:** 13604 characters, 291 lines

### Content:

```tsx
   1 | // src/components/landing/FAQSection.tsx
   2 | 'use client';
   3 | 
   4 | import { useState } from 'react';
   5 | import {
   6 |   Accordion,
   7 |   AccordionContent,
   8 |   AccordionItem,
   9 |   AccordionTrigger,
  10 | } from "@/components/ui/accordion";
  11 | import { Badge } from "@/components/ui/badge";
  12 | import { Button } from "@/components/ui/button";
  13 | import { 
  14 |   HelpCircle, 
  15 |   MessageCircle, 
  16 |   Sparkles, 
  17 |   CheckCircle,
  18 |   ArrowLeft,
  19 |   Phone,
  20 |   Mail
  21 | } from "lucide-react";
  22 | import Link from "next/link";
  23 | import { cn } from "@/lib/utils";
  24 | 
  25 | interface FAQ {
  26 |   question: string;
  27 |   answer: string;
  28 |   category: "general" | "technical" | "billing" | "courses";
  29 |   popular?: boolean;
  30 | }
  31 | 
  32 | const faqs: FAQ[] = [
  33 |   {
  34 |     question: "كيف يمكنني التسجيل في المنصة؟",
  35 |     answer: "يمكنك التسجيل بسهولة عن طريق الضغط على زر 'ابدأ رحلتك الآن' أو 'إنشاء حساب'، ثم ملء بياناتك الشخصية والأكاديمية المطلوبة. العملية لا تستغرق أكثر من دقيقة واحدة. ستحصل على تأكيد فوري عبر البريد الإلكتروني مع تفاصيل حسابك.",
  36 |     category: "general",
  37 |     popular: true
  38 |   },
  39 |   {
  40 |     question: "هل يمكنني مشاهدة الدروس أكثر من مرة؟",
  41 |     answer: "نعم بالطبع! بمجرد تسجيلك في أي دورة، تصبح جميع محاضراتها متاحة لك لمشاهدتها في أي وقت ومن أي جهاز، وبدون حد أقصى لعدد المشاهدات. يمكنك أيضاً تحميل المواد التعليمية المساعدة والمراجع للدراسة دون اتصال بالإنترنت.",
  42 |     category: "courses",
  43 |     popular: true
  44 |   },
  45 |   {
  46 |     question: "ما هي طرق الدفع المتاحة؟",
  47 |     answer: "نقبل جميع وسائل الدفع الرئيسية بما في ذلك: الدفع بالبطاقات الائتمانية (فيزا، ماستركارد)، التحويل البنكي المباشر، فوري، وإنستاباي. جميع المعاملات آمنة ومشفرة. كما نوفر خطط دفع مرنة وخصومات للملتحقين.",
  48 |     category: "billing"
  49 |   },
  50 |   {
  51 |     question: "كيف يمكنني الحصول على المساعدة إذا واجهت مشكلة؟",
  52 |     answer: "نحن هنا لمساعدتك على مدار الساعة! يمكنك التواصل معنا عبر: الدردشة المباشرة في الموقع، رقم الواتساب الموجود في أسفل الصفحة، البريد الإلكتروني، أو نموذج الاتصال. فريق الدعم التقني متخصص ويستجيب خلال دقائق معدودة.",
  53 |     category: "technical",
  54 |     popular: true
  55 |   },
  56 |   {
  57 |     question: "هل المحتوى محدث باستمرار؟",
  58 |     answer: "نعم، نحرص على تحديث المحتوى بشكل دوري ومستمر ليتوافق مع أحدث المناهج الدراسية وأي تغييرات قد تطرأ عليها. نضيف محاضرات جديدة شهرياً ونطور المحتوى بناءً على ملاحظات الملتحقين واحتياجات السوق، لضمان حصولك على أفضل وأحدث المواد التعليمية.",
  59 |     category: "courses"
  60 |   },
  61 |   {
  62 |     question: "هل يمكنني الحصول على شهادة إتمام؟",
  63 |     answer: "نعم! عند إكمال أي دورة بنجاح وتحقيق معدل نجاح 80% أو أكثر في الاختبارات، ستحصل على شهادة إتمام معتمدة وقابلة للطباعة. الشهادة تتضمن اسمك ومدة الدورة والدرجة المحققة، ويمكن استخدامها في السيرة الذاتية أو التقديم للجامعات.",
  64 |     category: "courses"
  65 |   },
  66 |   {
  67 |     question: "ما هي سياسة الاسترداد؟",
  68 |     answer: "نوفر ضمان استرداد المال بنسبة 100% خلال أول 14 يوماً من بدء أي دورة، دون طرح أي أسئلة. إذا لم تكن راضياً عن الخدمة لأي سبب، يمكنك طلب الاسترداد الكامل عبر نموذج الاتصال أو خدمة العملاء.",
  69 |     category: "billing"
  70 |   },
  71 |   {
  72 |     question: "هل يمكنني الوصول للمحتوى من الهاتف المحمول؟",
  73 |     answer: "بالطبع! منصتنا متوافقة بالكامل مع جميع الأجهزة - الهاتف المحمول، التابلت، والكمبيوتر المكتبي. لدينا أيضاً تطبيق جوال سهل الاستخدام متاح على متجر التطبيقات، يوفر تجربة تعلم سلسة مع إمكانية التحميل للمشاهدة دون اتصال بالإنترنت.",
  74 |     category: "technical"
  75 |   }
  76 | ];
  77 | 
  78 | const categoryConfig = {
  79 |   general: { label: "عام", color: "bg-primary/10 text-primary-700", icon: HelpCircle },
  80 |   technical: { label: "تقني", color: "bg-blue-100 text-blue-700", icon: MessageCircle },
  81 |   billing: { label: "الدفع", color: "bg-secondary/10 text-secondary-700", icon: CheckCircle },
  82 |   courses: { label: "الدورات", color: "bg-emerald-100 text-emerald-700", icon: Sparkles }
  83 | };
  84 | 
  85 | export default function FAQSection() {
  86 |   const [selectedCategory, setSelectedCategory] = useState<string>("all");
  87 |   const [openItems, setOpenItems] = useState<string[]>([]);
  88 | 
  89 |   const filteredFAQs = selectedCategory === "all" 
  90 |     ? faqs 
  91 |     : faqs.filter(faq => faq.category === selectedCategory);
  92 | 
  93 |   const categories = ["all", ...Object.keys(categoryConfig)] as const;
  94 | 
  95 |   const handleValueChange = (value: string[]) => {
  96 |     setOpenItems(value);
  97 |   };
  98 | 
  99 |   return (
 100 |     <section id="faq" className="section-padding bg-gradient-to-br from-neutral-50 via-white to-primary-50/20 relative overflow-hidden">
 101 |       
 102 |       {/* Enhanced background elements */}
 103 |       <div className="absolute inset-0 opacity-30">
 104 |         <div className="absolute top-20 left-16 w-32 h-32 bg-gradient-to-br from-primary-200/40 to-primary-300/20 rounded-full blur-3xl animate-float" />
 105 |         <div className="absolute bottom-20 right-20 w-24 h-24 bg-gradient-to-br from-secondary-200/40 to-secondary-300/20 rounded-full blur-3xl animate-float" style={{ animationDelay: '2s' }} />
 106 |         <div className="absolute top-1/3 right-1/3 w-20 h-20 bg-gradient-to-br from-blue-100/50 to-blue-200/30 rounded-full blur-2xl animate-float" style={{ animationDelay: '4s' }} />
 107 |       </div>
 108 | 
 109 |       <div className="max-w-5xl mx-auto px-4 relative z-10">
 110 |         
 111 |         {/* Enhanced section header */}
 112 |         <div className="text-center mb-16">
 113 |           <div className="inline-flex items-center gap-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-6">
 114 |             <HelpCircle className="w-4 h-4" />
 115 |             الأسئلة الشائعة
 116 |           </div>
 117 |           
 118 |           <h2 className="text-4xl md:text-5xl font-bold font-display mb-6 leading-arabic-tight">
 119 |             <span className="text-neutral-800">إجابات لجميع</span>
 120 |             <br />
 121 |             <span className="bg-gradient-to-br from-primary-500 via-primary-600 to-primary-700 bg-clip-text text-transparent">
 122 |               استفساراتك
 123 |             </span>
 124 |           </h2>
 125 |           
 126 |           <p className="text-xl text-neutral-600 max-w-3xl mx-auto leading-arabic-relaxed">
 127 |             هل لديك سؤال؟ تصفح الأسئلة الأكثر شيوعاً أو تواصل معنا مباشرة للحصول على إجابة فورية
 128 |           </p>
 129 |         </div>
 130 | 
 131 |         {/* Category Filter */}
 132 |         <div className="flex flex-wrap justify-center gap-3 mb-12">
 133 |           <button
 134 |             onClick={() => setSelectedCategory("all")}
 135 |             className={cn(
 136 |               "px-6 py-3 rounded-xl font-medium transition-all duration-300 btn-hover-effect",
 137 |               selectedCategory === "all"
 138 |                 ? "bg-primary-500 text-black shadow-elevation-3"
 139 |                 : "bg-white/60 text-neutral-700 border border-neutral-200/50 hover:border-primary/30 hover:bg-primary/5"
 140 |             )}
 141 |           >
 142 |             جميع الأسئلة ({faqs.length})
 143 |           </button>
 144 |           
 145 |           {Object.entries(categoryConfig).map(([key, config]) => {
 146 |             const count = faqs.filter(faq => faq.category === key).length;
 147 |             const Icon = config.icon;
 148 |             
 149 |             return (
 150 |               <button
 151 |                 key={key}
 152 |                 onClick={() => setSelectedCategory(key)}
 153 |                 className={cn(
 154 |                   "flex items-center gap-2 px-6 py-3 rounded-xl font-medium transition-all duration-300 btn-hover-effect",
 155 |                   selectedCategory === key
 156 |                     ? "bg-primary-500 text-black shadow-elevation-3"
 157 |                     : "bg-white/60 text-neutral-700 border border-neutral-200/50 hover:border-primary/30 hover:bg-primary/5"
 158 |                 )}
 159 |               >
 160 |                 <Icon className="w-4 h-4" />
 161 |                 <span>{config.label} ({count})</span>
 162 |               </button>
 163 |             );
 164 |           })}
 165 |         </div>
 166 | 
 167 |         {/* FAQ Accordion */}
 168 |         <div className="max-w-4xl mx-auto mb-16">
 169 |           <Accordion 
 170 |             type="multiple" 
 171 |             value={openItems} 
 172 |             onValueChange={handleValueChange}
 173 |             className="space-y-4"
 174 |           >
 175 |             {filteredFAQs.map((faq, index) => {
 176 |               const categoryInfo = categoryConfig[faq.category];
 177 |               const isOpen = openItems.includes(`item-${index}`);
 178 |               
 179 |               return (
 180 |                 <AccordionItem 
 181 |                   key={index} 
 182 |                   value={`item-${index}`}
 183 |                   className="bg-white/60 backdrop-blur-sm border border-neutral-200/50 rounded-2xl card-hover-effect shadow-elevation-2 hover:shadow-elevation-3 overflow-hidden"
 184 |                 >
 185 |                   <AccordionTrigger className={cn(
 186 |                     "px-8 py-6 text-right hover:no-underline group transition-all duration-300",
 187 |                     "text-lg font-bold text-neutral-800 font-display leading-arabic-tight",
 188 |                     isOpen && "bg-primary/5"
 189 |                   )}>
 190 |                     <div className="flex items-start justify-between w-full">
 191 |                       <div className="text-right flex-1">
 192 |                         {faq.question}
 193 |                         <div className="flex items-center gap-3 mt-3">
 194 |                           <Badge className={cn("text-xs font-medium border-0", categoryInfo.color)}>
 195 |                             <categoryInfo.icon className="w-3 h-3 mr-1" />
 196 |                             {categoryInfo.label}
 197 |                           </Badge>
 198 |                           {faq.popular && (
 199 |                             <Badge className="bg-secondary/10 text-secondary-700 text-xs font-medium border-0">
 200 |                               <Sparkles className="w-3 h-3 mr-1" />
 201 |                               الأكثر طلباً
 202 |                             </Badge>
 203 |                           )}
 204 |                         </div>
 205 |                       </div>
 206 |                     </div>
 207 |                   </AccordionTrigger>
 208 |                   
 209 |                   <AccordionContent className="px-8 pb-8 pt-4">
 210 |                     <div className={cn(
 211 |                       "text-neutral-700 leading-arabic-relaxed text-lg",
 212 |                       "bg-neutral-50/50 rounded-xl p-6 border border-neutral-200/30"
 213 |                     )}>
 214 |                       {faq.answer}
 215 |                     </div>
 216 |                   </AccordionContent>
 217 |                 </AccordionItem>
 218 |               );
 219 |             })}
 220 |           </Accordion>
 221 |         </div>
 222 | 
 223 |         {/* Enhanced Contact CTA */}
 224 |         <div className="text-center">
 225 |           <div className="glass-medium rounded-3xl p-12 shadow-elevation-4 border border-white/30 max-w-4xl mx-auto">
 226 |             <div className="mb-8">
 227 |               <h3 className="text-3xl font-bold text-neutral-800 font-display mb-4 leading-arabic-tight">
 228 |                 لم تجد إجابة لسؤالك؟
 229 |               </h3>
 230 |               <p className="text-neutral-600 text-lg max-w-2xl mx-auto leading-arabic-relaxed">
 231 |                 فريق الدعم لدينا متاح على مدار الساعة لمساعدتك. تواصل معنا وستحصل على رد خلال دقائق
 232 |               </p>
 233 |             </div>
 234 | 
 235 |             <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
 236 |               {/* WhatsApp */}
 237 |               <div className="text-center p-6 bg-green-50/50 rounded-2xl border border-green-200/30">
 238 |                 <div className="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4">
 239 |                   <Phone className="w-6 h-6 text-black" />
 240 |                 </div>
 241 |                 <h4 className="font-bold text-green-800 mb-2">واتساب</h4>
 242 |                 <p className="text-sm text-green-600 mb-3">رد فوري خلال دقائق</p>
 243 |                 <Button size="sm" className="bg-green-500 hover:bg-green-600 text-black">
 244 |                   تواصل الآن
 245 |                 </Button>
 246 |               </div>
 247 | 
 248 |               {/* Email */}
 249 |               <div className="text-center p-6 bg-blue-50/50 rounded-2xl border border-blue-200/30">
 250 |                 <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
 251 |                   <Mail className="w-6 h-6 text-black" />
 252 |                 </div>
 253 |                 <h4 className="font-bold text-blue-800 mb-2">البريد الإلكتروني</h4>
 254 |                 <p className="text-sm text-blue-600 mb-3">استفسارات مفصلة</p>
 255 |                 <Button size="sm" variant="outline" className="border-blue-300 text-blue-600 hover:bg-blue-50">
 256 |                   أرسل إيميل
 257 |                 </Button>
 258 |               </div>
 259 | 
 260 |               {/* Live Chat */}
 261 |               <div className="text-center p-6 bg-primary-50/50 rounded-2xl border border-primary-200/30">
 262 |                 <div className="w-12 h-12 bg-primary-500 rounded-full flex items-center justify-center mx-auto mb-4">
 263 |                   <MessageCircle className="w-6 h-6 text-black" />
 264 |                 </div>
 265 |                 <h4 className="font-bold text-primary-800 mb-2">دردشة مباشرة</h4>
 266 |                 <p className="text-sm text-primary-600 mb-3">متاح 24/7</p>
 267 |                 <Button size="sm" className="bg-primary-500 hover:bg-primary-600 text-black">
 268 |                   ابدأ المحادثة
 269 |                 </Button>
 270 |               </div>
 271 |             </div>
 272 | 
 273 |             <div className="pt-8 border-t border-neutral-200/30">
 274 |               <p className="text-sm text-neutral-500 mb-4">
 275 |                 أو تصفح مكتبة المساعدة الشاملة
 276 |               </p>
 277 |               <Link href="/help">
 278 |                 <Button variant="outline" size="lg" className="border-2 border-neutral-200/50 hover:border-primary/30 hover:bg-primary/5 btn-hover-effect">
 279 |                   <HelpCircle className="w-5 h-5 mr-2" />
 280 |                   مركز المساعدة
 281 |                   <ArrowLeft className="w-5 h-5 mr-2" />
 282 |                 </Button>
 283 |               </Link>
 284 |             </div>
 285 |           </div>
 286 |         </div>
 287 |       </div>
 288 |     </section>
 289 |   );
 290 | }
 291 | 
```

================================================================================

## 32. src\components\navigation\MobileNavigation.tsx

**File Type:** TSX
**File Name:** MobileNavigation.tsx
**Full Path:** src\components\navigation\MobileNavigation.tsx

**File Size:** 13366 characters, 360 lines

### Content:

```tsx
   1 | // src/components/navigation/MobileNavigation.tsx - Mobile-First Navigation
   2 | "use client";
   3 | 
   4 | import { useState, useEffect } from "react";
   5 | import { motion, AnimatePresence } from "framer-motion";
   6 | import { TouchTarget, MobileDrawer } from "@/components/ui/mobile-interactions";
   7 | import { Badge } from "@/components/ui/badge";
   8 | import Link from "next/link";
   9 | import { usePathname } from "next/navigation";
  10 | import {
  11 |   Home,
  12 |   BookOpen,
  13 |   User,
  14 |   Search,
  15 |   Bell,
  16 |   Menu,
  17 |   X,
  18 |   Settings,
  19 |   LogOut,
  20 |   Award,
  21 |   BarChart3,
  22 |   CreditCard,
  23 |   Heart,
  24 |   HelpCircle,
  25 |   ChevronRight,
  26 |   Zap,
  27 |   Trophy,
  28 |   Target,
  29 |   Calendar
  30 | } from "lucide-react";
  31 | import { cn } from "@/lib/utils";
  32 | 
  33 | interface MobileNavigationProps {
  34 |   user?: {
  35 |     name: string;
  36 |     email: string;
  37 |     avatar?: string;
  38 |     level?: number;
  39 |     xp?: number;
  40 |   };
  41 |   notifications?: number;
  42 | }
  43 | 
  44 | const mainNavItems = [
  45 |   { href: "/dashboard", label: "الرئيسية", icon: Home },
  46 |   { href: "/courses", label: "الدورات", icon: BookOpen },
  47 |   { href: "/search", label: "البحث", icon: Search },
  48 |   { href: "/profile", label: "الملف الشخصي", icon: User }
  49 | ];
  50 | 
  51 | const drawerNavItems = [
  52 |   { href: "/dashboard", label: "لوحة التحكم", icon: Home },
  53 |   { href: "/courses", label: "دوراتي", icon: BookOpen },
  54 |   { href: "/achievements", label: "الإنجازات", icon: Trophy },
  55 |   { href: "/progress", label: "التقدم", icon: BarChart3 },
  56 |   { href: "/goals", label: "الأهداف", icon: Target },
  57 |   { href: "/schedule", label: "الجدول", icon: Calendar },
  58 |   { href: "/certificates", label: "الشهادات", icon: Award },
  59 |   { href: "/payments", label: "المدفوعات", icon: CreditCard },
  60 |   { href: "/favorites", label: "المفضلة", icon: Heart },
  61 |   { href: "/settings", label: "الإعدادات", icon: Settings },
  62 |   { href: "/help", label: "المساعدة", icon: HelpCircle }
  63 | ];
  64 | 
  65 | export function MobileNavigation({ user, notifications = 0 }: MobileNavigationProps) {
  66 |   const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  67 |   const [isScrolled, setIsScrolled] = useState(false);
  68 |   const pathname = usePathname();
  69 | 
  70 |   // Handle scroll for header styling
  71 |   useEffect(() => {
  72 |     const handleScroll = () => {
  73 |       setIsScrolled(window.scrollY > 10);
  74 |     };
  75 | 
  76 |     window.addEventListener('scroll', handleScroll, { passive: true });
  77 |     return () => window.removeEventListener('scroll', handleScroll);
  78 |   }, []);
  79 | 
  80 |   // Close drawer on route change
  81 |   useEffect(() => {
  82 |     setIsDrawerOpen(false);
  83 |   }, [pathname]);
  84 | 
  85 |   const isActive = (href: string) => pathname === href;
  86 | 
  87 |   return (
  88 |     <>
  89 |       {/* Mobile Header */}
  90 |       <motion.header
  91 |         className={cn(
  92 |           "fixed top-0 left-0 right-0 z-30 bg-white transition-all duration-200",
  93 |           isScrolled && "shadow-md backdrop-blur-sm bg-white/95"
  94 |         )}
  95 |         initial={{ y: -100 }}
  96 |         animate={{ y: 0 }}
  97 |         transition={{ duration: 0.3 }}
  98 |       >
  99 |         <div className="flex items-center justify-between px-4 py-3">
 100 |           {/* Logo */}
 101 |           <Link href="/dashboard" className="flex items-center gap-2">
 102 |             <div className="w-8 h-8 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-lg flex items-center justify-center">
 103 |               <Zap className="w-5 h-5 text-black" />
 104 |             </div>
 105 |             <span className="text-lg font-bold text-neutral-900 font-display">
 106 |               المنصة
 107 |             </span>
 108 |           </Link>
 109 | 
 110 |           {/* Right Actions */}
 111 |           <div className="flex items-center gap-2">
 112 |             {/* Notifications */}
 113 |             <TouchTarget className="relative">
 114 |               <Bell className="w-6 h-6 text-neutral-600" />
 115 |               {notifications > 0 && (
 116 |                 <Badge className="absolute -top-2 -right-2 w-5 h-5 p-0 flex items-center justify-center text-xs bg-red-500">
 117 |                   {notifications > 9 ? '9+' : notifications}
 118 |                 </Badge>
 119 |               )}
 120 |             </TouchTarget>
 121 | 
 122 |             {/* Menu Button */}
 123 |             <TouchTarget onClick={() => setIsDrawerOpen(true)}>
 124 |               <Menu className="w-6 h-6 text-neutral-600" />
 125 |             </TouchTarget>
 126 |           </div>
 127 |         </div>
 128 |       </motion.header>
 129 | 
 130 |       {/* Bottom Navigation */}
 131 |       <motion.nav
 132 |         className="fixed bottom-0 left-0 right-0 z-30 bg-white border-t border-neutral-200 safe-area-pb"
 133 |         initial={{ y: 100 }}
 134 |         animate={{ y: 0 }}
 135 |         transition={{ duration: 0.3, delay: 0.1 }}
 136 |       >
 137 |         <div className="flex items-center justify-around py-2">
 138 |           {mainNavItems.map((item) => {
 139 |             const active = isActive(item.href);
 140 |             return (
 141 |               <Link key={item.href} href={item.href} className="flex-1">
 142 |                 <TouchTarget
 143 |                   className={cn(
 144 |                     "flex flex-col items-center gap-1 py-2 transition-colors duration-200",
 145 |                     active ? "text-primary-600" : "text-neutral-500"
 146 |                   )}
 147 |                   haptic={true}
 148 |                 >
 149 |                   <motion.div
 150 |                     animate={active ? { scale: 1.1 } : { scale: 1 }}
 151 |                     transition={{ duration: 0.2 }}
 152 |                   >
 153 |                     <item.icon className="w-6 h-6" />
 154 |                   </motion.div>
 155 |                   <span className="text-xs font-primary leading-none">
 156 |                     {item.label}
 157 |                   </span>
 158 |                   {active && (
 159 |                     <motion.div
 160 |                       className="w-1 h-1 bg-primary-600 rounded-full"
 161 |                       layoutId="activeIndicator"
 162 |                       transition={{ duration: 0.2 }}
 163 |                     />
 164 |                   )}
 165 |                 </TouchTarget>
 166 |               </Link>
 167 |             );
 168 |           })}
 169 |         </div>
 170 |       </motion.nav>
 171 | 
 172 |       {/* Navigation Drawer */}
 173 |       <AnimatePresence>
 174 |         {isDrawerOpen && (
 175 |           <MobileDrawer
 176 |             isOpen={isDrawerOpen}
 177 |             onClose={() => setIsDrawerOpen(false)}
 178 |             position="right"
 179 |           >
 180 |             <div className="flex flex-col h-full">
 181 |               {/* Drawer Header */}
 182 |               <div className="flex items-center justify-between p-4 border-b border-neutral-200">
 183 |                 <h2 className="text-lg font-semibold text-neutral-900 font-display">
 184 |                   القائمة
 185 |                 </h2>
 186 |                 <TouchTarget onClick={() => setIsDrawerOpen(false)}>
 187 |                   <X className="w-6 h-6 text-neutral-600" />
 188 |                 </TouchTarget>
 189 |               </div>
 190 | 
 191 |               {/* User Profile Section */}
 192 |               {user && (
 193 |                 <div className="p-4 bg-gradient-to-r from-primary-50 to-secondary-50">
 194 |                   <div className="flex items-center gap-3 mb-3">
 195 |                     <div className="w-12 h-12 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-full flex items-center justify-center">
 196 |                       {user.avatar ? (
 197 |                         <img 
 198 |                           src={user.avatar} 
 199 |                           alt={user.name}
 200 |                           className="w-full h-full rounded-full object-cover"
 201 |                         />
 202 |                       ) : (
 203 |                         <User className="w-6 h-6 text-black" />
 204 |                       )}
 205 |                     </div>
 206 |                     <div className="flex-1">
 207 |                       <h3 className="font-semibold text-neutral-900 font-display">
 208 |                         {user.name}
 209 |                       </h3>
 210 |                       <p className="text-sm text-neutral-600 font-primary">
 211 |                         {user.email}
 212 |                       </p>
 213 |                     </div>
 214 |                   </div>
 215 |                   
 216 |                   {user.level && user.xp && (
 217 |                     <div className="flex items-center gap-4 text-sm">
 218 |                       <div className="flex items-center gap-1">
 219 |                         <Trophy className="w-4 h-4 text-yellow-600" />
 220 |                         <span className="font-primary text-neutral-700">
 221 |                           المستوى {user.level}
 222 |                         </span>
 223 |                       </div>
 224 |                       <div className="flex items-center gap-1">
 225 |                         <Zap className="w-4 h-4 text-blue-600" />
 226 |                         <span className="font-primary text-neutral-700">
 227 |                           {user.xp.toLocaleString()} XP
 228 |                         </span>
 229 |                       </div>
 230 |                     </div>
 231 |                   )}
 232 |                 </div>
 233 |               )}
 234 | 
 235 |               {/* Navigation Items */}
 236 |               <div className="flex-1 overflow-y-auto">
 237 |                 <div className="py-2">
 238 |                   {drawerNavItems.map((item) => {
 239 |                     const active = isActive(item.href);
 240 |                     return (
 241 |                       <Link key={item.href} href={item.href}>
 242 |                         <TouchTarget
 243 |                           className={cn(
 244 |                             "w-full flex items-center gap-3 px-4 py-3 text-left transition-colors duration-200",
 245 |                             active 
 246 |                               ? "bg-primary-50 text-primary-700 border-r-4 border-primary-500" 
 247 |                               : "text-neutral-700 hover:bg-neutral-50"
 248 |                           )}
 249 |                           haptic={true}
 250 |                         >
 251 |                           <item.icon className="w-5 h-5" />
 252 |                           <span className="flex-1 font-primary">{item.label}</span>
 253 |                           <ChevronRight className="w-4 h-4 text-neutral-400" />
 254 |                         </TouchTarget>
 255 |                       </Link>
 256 |                     );
 257 |                   })}
 258 |                 </div>
 259 |               </div>
 260 | 
 261 |               {/* Drawer Footer */}
 262 |               <div className="border-t border-neutral-200 p-4">
 263 |                 <TouchTarget
 264 |                   className="w-full flex items-center gap-3 px-4 py-3 text-left text-red-600 hover:bg-red-50 rounded-lg transition-colors duration-200"
 265 |                   haptic={true}
 266 |                 >
 267 |                   <LogOut className="w-5 h-5" />
 268 |                   <span className="font-primary">تسجيل الخروج</span>
 269 |                 </TouchTarget>
 270 |               </div>
 271 |             </div>
 272 |           </MobileDrawer>
 273 |         )}
 274 |       </AnimatePresence>
 275 | 
 276 |       {/* Safe area spacers */}
 277 |       <div className="h-16" /> {/* Top spacer for header */}
 278 |       <div className="h-20" /> {/* Bottom spacer for navigation */}
 279 |     </>
 280 |   );
 281 | }
 282 | 
 283 | // Mobile Search Bar Component
 284 | interface MobileSearchBarProps {
 285 |   onSearch: (query: string) => void;
 286 |   placeholder?: string;
 287 |   suggestions?: string[];
 288 | }
 289 | 
 290 | export function MobileSearchBar({ 
 291 |   onSearch, 
 292 |   placeholder = "ابحث عن الدورات...",
 293 |   suggestions = []
 294 | }: MobileSearchBarProps) {
 295 |   const [query, setQuery] = useState("");
 296 |   const [isFocused, setIsFocused] = useState(false);
 297 |   const [showSuggestions, setShowSuggestions] = useState(false);
 298 | 
 299 |   const handleSearch = (searchQuery: string) => {
 300 |     setQuery(searchQuery);
 301 |     onSearch(searchQuery);
 302 |     setShowSuggestions(false);
 303 |   };
 304 | 
 305 |   return (
 306 |     <div className="relative">
 307 |       <div className="relative">
 308 |         <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
 309 |         <input
 310 |           type="search"
 311 |           value={query}
 312 |           onChange={(e) => setQuery(e.target.value)}
 313 |           onFocus={() => {
 314 |             setIsFocused(true);
 315 |             setShowSuggestions(true);
 316 |           }}
 317 |           onBlur={() => {
 318 |             setIsFocused(false);
 319 |             setTimeout(() => setShowSuggestions(false), 200);
 320 |           }}
 321 |           placeholder={placeholder}
 322 |           className={cn(
 323 |             "w-full min-h-[44px] pl-10 pr-4 py-3 text-base",
 324 |             "border-2 rounded-xl transition-all duration-200",
 325 |             "touch-manipulation font-primary bg-neutral-50",
 326 |             isFocused 
 327 |               ? "border-primary-500 ring-2 ring-primary-200 bg-white" 
 328 |               : "border-transparent"
 329 |           )}
 330 |           autoCapitalize="none"
 331 |           autoCorrect="off"
 332 |           spellCheck={false}
 333 |         />
 334 |       </div>
 335 | 
 336 |       {/* Search Suggestions */}
 337 |       <AnimatePresence>
 338 |         {showSuggestions && suggestions.length > 0 && (
 339 |           <motion.div
 340 |             className="absolute top-full left-0 right-0 mt-2 bg-white border border-neutral-200 rounded-xl shadow-lg z-50"
 341 |             initial={{ opacity: 0, y: -10 }}
 342 |             animate={{ opacity: 1, y: 0 }}
 343 |             exit={{ opacity: 0, y: -10 }}
 344 |           >
 345 |             {suggestions.slice(0, 5).map((suggestion, index) => (
 346 |               <TouchTarget
 347 |                 key={index}
 348 |                 className="w-full flex items-center gap-3 px-4 py-3 text-left hover:bg-neutral-50 first:rounded-t-xl last:rounded-b-xl"
 349 |                 onClick={() => handleSearch(suggestion)}
 350 |               >
 351 |                 <Search className="w-4 h-4 text-neutral-400" />
 352 |                 <span className="font-primary text-neutral-700">{suggestion}</span>
 353 |               </TouchTarget>
 354 |             ))}
 355 |           </motion.div>
 356 |         )}
 357 |       </AnimatePresence>
 358 |     </div>
 359 |   );
 360 | }
```

================================================================================

## 33. src\components\payment\CourseInfo.tsx

**File Type:** TSX
**File Name:** CourseInfo.tsx
**Full Path:** src\components\payment\CourseInfo.tsx

**File Size:** 5296 characters, 149 lines

### Content:

```tsx
   1 | // src/components/payment/CourseInfo.tsx
   2 | "use client";
   3 | 
   4 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
   5 | import { Badge } from "@/components/ui/badge";
   6 | import { Course } from "@/lib/api/courses";
   7 | import { 
   8 |   Play, 
   9 |   Clock, 
  10 |   Users, 
  11 |   Star,
  12 |   BookOpen
  13 | } from "lucide-react";
  14 | 
  15 | interface CourseInfoProps {
  16 |   course: Course;
  17 | }
  18 | 
  19 | export function CourseInfo({ course }: CourseInfoProps) {
  20 |   const formatPrice = () => {
  21 |     if (!course.price) return 'مجاني';
  22 |     
  23 |     return new Intl.NumberFormat('ar-EG', {
  24 |       style: 'currency',
  25 |       currency: course.currency || 'EGP',
  26 |       minimumFractionDigits: 0,
  27 |       maximumFractionDigits: 2
  28 |     }).format(Number(course.price));
  29 |   };
  30 | 
  31 |   return (
  32 |     <div className="space-y-6">
  33 |       <Card>
  34 |         <CardHeader>
  35 |           <CardTitle className="text-lg">ملخص الطلب</CardTitle>
  36 |         </CardHeader>
  37 |         <CardContent className="space-y-4">
  38 |           {/* Course Image */}
  39 |           <div className="aspect-video rounded-lg overflow-hidden">
  40 |             <img 
  41 |               src={course.thumbnailUrl} 
  42 |               alt={course.title}
  43 |               className="w-full h-full object-cover"
  44 |               onError={(e) => {
  45 |                 (e.target as HTMLImageElement).src = '/placeholder-course.jpg';
  46 |               }}
  47 |             />
  48 |           </div>
  49 | 
  50 |           {/* Course Details */}
  51 |           <div className="space-y-3">
  52 |             <h3 className="font-semibold text-lg leading-tight">
  53 |               {course.title}
  54 |             </h3>
  55 |             
  56 |             <div className="flex items-center gap-2 text-sm text-muted-foreground">
  57 |               <Users className="w-4 h-4" />
  58 |               <span>بواسطة: {course.professor.name}</span>
  59 |             </div>
  60 | 
  61 |             <Badge variant="outline" className="w-fit">
  62 |               {course.category.name}
  63 |             </Badge>
  64 | 
  65 |             {course.description && (
  66 |               <p className="text-sm text-muted-foreground line-clamp-3">
  67 |                 {course.description}
  68 |               </p>
  69 |             )}
  70 |           </div>
  71 | 
  72 |           {/* Course Stats */}
  73 |           <div className="grid grid-cols-2 gap-4 pt-4 border-t">
  74 |             <div className="text-center">
  75 |               <div className="flex items-center justify-center gap-1 text-sm text-muted-foreground">
  76 |                 <Play className="w-4 h-4" />
  77 |                 <span>{course._count.lessons} درس</span>
  78 |               </div>
  79 |             </div>
  80 |             <div className="text-center">
  81 |               <div className="flex items-center justify-center gap-1 text-sm text-muted-foreground">
  82 |                 <BookOpen className="w-4 h-4" />
  83 |                 <span>شهادة إتمام</span>
  84 |               </div>
  85 |             </div>
  86 |           </div>
  87 | 
  88 |           {/* Price */}
  89 |           <div className="pt-4 border-t">
  90 |             <div className="flex items-center justify-between">
  91 |               <span className="text-lg font-semibold">السعر:</span>
  92 |               <span className="text-2xl font-bold text-primary">
  93 |                 {formatPrice()}
  94 |               </span>
  95 |             </div>
  96 |           </div>
  97 |         </CardContent>
  98 |       </Card>
  99 | 
 100 |       {/* Security Assurance */}
 101 |       <Card>
 102 |         <CardContent className="p-4">
 103 |           <div className="text-center space-y-2">
 104 |             <div className="flex items-center justify-center gap-2 text-green-600">
 105 |               <div className="w-2 h-2 bg-green-600 rounded-full"></div>
 106 |               <span className="text-sm font-medium">دفع آمن ومحمي</span>
 107 |             </div>
 108 |             <p className="text-xs text-muted-foreground">
 109 |               جميع المعاملات محمية بتشفير SSL
 110 |             </p>
 111 |           </div>
 112 |         </CardContent>
 113 |       </Card>
 114 | 
 115 |       {/* What You'll Get */}
 116 |       <Card>
 117 |         <CardHeader>
 118 |           <CardTitle className="text-base">ما ستحصل عليه</CardTitle>
 119 |         </CardHeader>
 120 |         <CardContent className="space-y-3">
 121 |           <div className="flex items-center gap-3 text-sm">
 122 |             <div className="w-5 h-5 rounded-full bg-green-100 flex items-center justify-center">
 123 |               <div className="w-2 h-2 bg-green-600 rounded-full"></div>
 124 |             </div>
 125 |             <span>وصول مدى الحياة للدورة</span>
 126 |           </div>
 127 |           <div className="flex items-center gap-3 text-sm">
 128 |             <div className="w-5 h-5 rounded-full bg-green-100 flex items-center justify-center">
 129 |               <div className="w-2 h-2 bg-green-600 rounded-full"></div>
 130 |             </div>
 131 |             <span>جميع الدروس والمواد</span>
 132 |           </div>
 133 |           <div className="flex items-center gap-3 text-sm">
 134 |             <div className="w-5 h-5 rounded-full bg-green-100 flex items-center justify-center">
 135 |               <div className="w-2 h-2 bg-green-600 rounded-full"></div>
 136 |             </div>
 137 |             <span>شهادة إتمام معتمدة</span>
 138 |           </div>
 139 |           <div className="flex items-center gap-3 text-sm">
 140 |             <div className="w-5 h-5 rounded-full bg-green-100 flex items-center justify-center">
 141 |               <div className="w-2 h-2 bg-green-600 rounded-full"></div>
 142 |             </div>
 143 |             <span>دعم فني مباشر</span>
 144 |           </div>
 145 |         </CardContent>
 146 |       </Card>
 147 |     </div>
 148 |   );
 149 | }
```

================================================================================

## 34. src\components\payment\PaymentButton.tsx

**File Type:** TSX
**File Name:** PaymentButton.tsx
**Full Path:** src\components\payment\PaymentButton.tsx

**File Size:** 4290 characters, 176 lines

### Content:

```tsx
   1 | // src/components/payment/PaymentButton.tsx
   2 | "use client";
   3 | 
   4 | import { Button } from "@/components/ui/button";
   5 | import { Course } from "@/lib/api/courses";
   6 | import { useAuth } from "@/hooks/useAuth";
   7 | import {
   8 |   CreditCard,
   9 |   CheckCircle,
  10 |   UserCheck,
  11 | } from "lucide-react";
  12 | import { toast } from "sonner";
  13 | import { useRouter } from "next/navigation";
  14 | 
  15 | interface PaymentButtonProps {
  16 |   course: Course;
  17 |   variant?: "primary" | "secondary" | "outline" | "ghost" | "destructive";
  18 |   size?: "default" | "sm" | "lg";
  19 |   className?: string;
  20 |   showPrice?: boolean;
  21 |   onPaymentSuccess?: () => void;
  22 | }
  23 | 
  24 | export function PaymentButton({
  25 |   course,
  26 |   variant = "primary",
  27 |   size = "default",
  28 |   className = "",
  29 |   showPrice = true,
  30 |   onPaymentSuccess,
  31 | }: PaymentButtonProps) {
  32 |   const { isAuthenticated, session } = useAuth();
  33 |   const isStudent = session?.user?.isStudent;
  34 |   const isAdmin = session?.user?.isAdmin;
  35 |   const router = useRouter();
  36 | 
  37 |   // Format price for display
  38 |   const formatPrice = () => {
  39 |     if (!course.price || course.price === 0) {
  40 |       return "مجاني";
  41 |     }
  42 | 
  43 |     return new Intl.NumberFormat("ar-EG", {
  44 |       style: "currency",
  45 |       currency: course.currency || "EGP",
  46 |       minimumFractionDigits: 0,
  47 |       maximumFractionDigits: 2,
  48 |     }).format(Number(course.price));
  49 |   };
  50 | 
  51 |   // Handle button click
  52 |   const handleClick = () => {
  53 |     // Check authentication
  54 |     if (!isAuthenticated) {
  55 |       toast.error("يجب تسجيل الدخول أولاً");
  56 |       router.push("/login");
  57 |       return;
  58 |     }
  59 | 
  60 |     // Check user role
  61 |     if (!isStudent && !isAdmin) {
  62 |       toast.error("غير مصرح لك بشراء الدورات");
  63 |       return;
  64 |     }
  65 | 
  66 |     // Check if already enrolled
  67 |     if (course.isEnrolled) {
  68 |       toast.info("أنت مسجل في هذه الدورة بالفعل");
  69 |       router.push(`/courses/${course.id}`);
  70 |       return;
  71 |     }
  72 | 
  73 |     // Check if course is free
  74 |     if (!course.price || course.price === 0) {
  75 |       // Handle free enrollment (would need to implement this)
  76 |       toast.info("هذه الدورة مجانية - سيتم تنفيذ التسجيل المباشر");
  77 |       return;
  78 |     }
  79 | 
  80 |     // Navigate to payment page for paid courses
  81 |     router.push(`/courses/${course.id}/payment`);
  82 |   };
  83 | 
  84 |   // Handle payment success (called from payment page)
  85 |   const handlePaymentSuccess = () => {
  86 |     toast.success("تم الدفع بنجاح! تم تسجيلك في الدورة.");
  87 |     onPaymentSuccess?.();
  88 |   };
  89 | 
  90 |   // Determine button content based on course state
  91 |   const getButtonContent = () => {
  92 |     if (course.isEnrolled) {
  93 |       return {
  94 |         icon: <CheckCircle className="w-4 h-4" />,
  95 |         text: "مسجل بالفعل",
  96 |         disabled: false,
  97 |       };
  98 |     }
  99 | 
 100 |     if (!course.price || course.price === 0) {
 101 |       return {
 102 |         icon: <UserCheck className="w-4 h-4" />,
 103 |         text: "التسجيل مجاناً",
 104 |         disabled: false,
 105 |       };
 106 |     }
 107 | 
 108 |     return {
 109 |       icon: <CreditCard className="w-4 h-4" />,
 110 |       text: showPrice ? `اشتري بـ ${formatPrice()}` : "اشتري الآن",
 111 |       disabled: false,
 112 |     };
 113 |   };
 114 | 
 115 |   // Check if user can access the course
 116 |   const canAccess = () => {
 117 |     if (!isAuthenticated) return false;
 118 |     if (!isStudent && !isAdmin) return false;
 119 |     return true;
 120 |   };
 121 | 
 122 |   const buttonContent = getButtonContent();
 123 | 
 124 |   return (
 125 |     <Button
 126 |       variant={course.isEnrolled ? "outline" : variant}
 127 |       size={size}
 128 |       className={className}
 129 |       onClick={handleClick}
 130 |       disabled={buttonContent.disabled || !canAccess()}
 131 |     >
 132 |       {buttonContent.icon}
 133 |       {buttonContent.text}
 134 |     </Button>
 135 |   );
 136 | }
 137 | 
 138 | // Simplified version for quick use
 139 | export function BuyNowButton({
 140 |   course,
 141 |   onPaymentSuccess,
 142 | }: {
 143 |   course: Course;
 144 |   onPaymentSuccess?: () => void;
 145 | }) {
 146 |   return (
 147 |     <PaymentButton
 148 |       course={course}
 149 |       variant="primary"
 150 |       size="lg"
 151 |       className="w-full"
 152 |       showPrice={true}
 153 |       onPaymentSuccess={onPaymentSuccess}
 154 |     />
 155 |   );
 156 | }
 157 | 
 158 | // Compact version for course cards
 159 | export function CompactPaymentButton({
 160 |   course,
 161 |   onPaymentSuccess,
 162 | }: {
 163 |   course: Course;
 164 |   onPaymentSuccess?: () => void;
 165 | }) {
 166 |   return (
 167 |     <PaymentButton
 168 |       course={course}
 169 |       variant="outline"
 170 |       size="sm"
 171 |       showPrice={false}
 172 |       onPaymentSuccess={onPaymentSuccess}
 173 |     />
 174 |   );
 175 | }
 176 | 
```

================================================================================

## 35. src\components\payment\PaymentDetailsModal.tsx

**File Type:** TSX
**File Name:** PaymentDetailsModal.tsx
**Full Path:** src\components\payment\PaymentDetailsModal.tsx

**File Size:** 12214 characters, 332 lines

### Content:

```tsx
   1 | // src/components/payment/PaymentDetailsModal.tsx
   2 | 'use client';
   3 | 
   4 | import { useState, useEffect } from 'react';
   5 | import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
   6 | import { Button } from '@/components/ui/button';
   7 | import { Badge } from '@/components/ui/badge';
   8 | import { Separator } from '@/components/ui/separator';
   9 | import { 
  10 |   CreditCard, 
  11 |   Calendar,
  12 |   Hash,
  13 |   DollarSign,
  14 |   CheckCircle,
  15 |   XCircle,
  16 |   Clock,
  17 |   AlertCircle,
  18 |   Copy,
  19 |   ExternalLink,
  20 |   Receipt,
  21 |   User,
  22 |   BookOpen
  23 | } from 'lucide-react';
  24 | import { toast } from 'sonner';
  25 | 
  26 | interface PaymentDetailsModalProps {
  27 |   paymentId: string | null;
  28 |   isOpen: boolean;
  29 |   onClose: () => void;
  30 | }
  31 | 
  32 | interface PaymentDetails {
  33 |   id: string;
  34 |   status: string;
  35 |   statusMessage: string;
  36 |   amount: number;
  37 |   currency: string;
  38 |   createdAt: string;
  39 |   completedAt?: string;
  40 |   failureReason?: string;
  41 |   paymobTransactionId?: number;
  42 |   paymobOrderId?: string;
  43 |   course: {
  44 |     id: string;
  45 |     title: string;
  46 |     thumbnailUrl: string;
  47 |     professor: string;
  48 |   };
  49 |   enrollment?: {
  50 |     id: string;
  51 |     enrolledAt: string;
  52 |     progressPercent: number;
  53 |   };
  54 |   webhooks?: Array<{
  55 |     id: string;
  56 |     transactionId: number;
  57 |     processedAt: string;
  58 |     processingAttempts: number;
  59 |     lastError?: string;
  60 |   }>;
  61 | }
  62 | 
  63 | export default function PaymentDetailsModal({ 
  64 |   paymentId, 
  65 |   isOpen, 
  66 |   onClose 
  67 | }: PaymentDetailsModalProps) {
  68 |   const [paymentDetails, setPaymentDetails] = useState<PaymentDetails | null>(null);
  69 |   const [isLoading, setIsLoading] = useState(false);
  70 | 
  71 |   useEffect(() => {
  72 |     if (paymentId && isOpen) {
  73 |       fetchPaymentDetails();
  74 |     }
  75 |   }, [paymentId, isOpen]);
  76 | 
  77 |   const fetchPaymentDetails = async () => {
  78 |     if (!paymentId) return;
  79 | 
  80 |     setIsLoading(true);
  81 |     try {
  82 |       const response = await fetch(`/api/payments/${paymentId}/status`);
  83 |       const result = await response.json();
  84 | 
  85 |       if (result.success) {
  86 |         setPaymentDetails(result.data);
  87 |       } else {
  88 |         toast.error('فشل في تحميل تفاصيل الدفع');
  89 |       }
  90 |     } catch (error) {
  91 |       console.error('Failed to fetch payment details:', error);
  92 |       toast.error('حدث خطأ في تحميل التفاصيل');
  93 |     } finally {
  94 |       setIsLoading(false);
  95 |     }
  96 |   };
  97 | 
  98 |   const copyToClipboard = (text: string, label: string) => {
  99 |     navigator.clipboard.writeText(text);
 100 |     toast.success(`تم نسخ ${label}`);
 101 |   };
 102 | 
 103 |   const getStatusIcon = (status: string) => {
 104 |     switch (status.toLowerCase()) {
 105 |       case 'completed':
 106 |         return <CheckCircle className="w-5 h-5 text-green-600" />;
 107 |       case 'failed':
 108 |         return <XCircle className="w-5 h-5 text-red-600" />;
 109 |       case 'cancelled':
 110 |         return <XCircle className="w-5 h-5 text-gray-600" />;
 111 |       case 'pending':
 112 |       default:
 113 |         return <Clock className="w-5 h-5 text-yellow-600" />;
 114 |     }
 115 |   };
 116 | 
 117 |   const getStatusBadge = (status: string) => {
 118 |     switch (status.toLowerCase()) {
 119 |       case 'completed':
 120 |         return <Badge className="bg-green-100 text-green-800">مكتمل</Badge>;
 121 |       case 'failed':
 122 |         return <Badge className="bg-red-100 text-red-800">فاشل</Badge>;
 123 |       case 'cancelled':
 124 |         return <Badge className="bg-gray-100 text-gray-800">ملغي</Badge>;
 125 |       case 'pending':
 126 |       default:
 127 |         return <Badge className="bg-yellow-100 text-yellow-800">معلق</Badge>;
 128 |     }
 129 |   };
 130 | 
 131 |   if (!isOpen) return null;
 132 | 
 133 |   return (
 134 |     <Dialog open={isOpen} onOpenChange={onClose}>
 135 |       <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
 136 |         <DialogHeader>
 137 |           <DialogTitle className="flex items-center gap-2">
 138 |             <Receipt className="w-5 h-5" />
 139 |             تفاصيل عملية الدفع
 140 |           </DialogTitle>
 141 |         </DialogHeader>
 142 | 
 143 |         {isLoading ? (
 144 |           <div className="space-y-4">
 145 |             {[...Array(6)].map((_, i) => (
 146 |               <div key={i} className="h-4 bg-gray-200 rounded animate-pulse"></div>
 147 |             ))}
 148 |           </div>
 149 |         ) : paymentDetails ? (
 150 |           <div className="space-y-6">
 151 |             {/* Status Section */}
 152 |             <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
 153 |               <div className="flex items-center gap-3">
 154 |                 {getStatusIcon(paymentDetails.status)}
 155 |                 <div>
 156 |                   <h3 className="font-semibold">حالة الدفع</h3>
 157 |                   <p className="text-sm text-gray-600">{paymentDetails.statusMessage}</p>
 158 |                 </div>
 159 |               </div>
 160 |               {getStatusBadge(paymentDetails.status)}
 161 |             </div>
 162 | 
 163 |             {/* Payment Information */}
 164 |             <div className="space-y-4">
 165 |               <h4 className="font-semibold flex items-center gap-2">
 166 |                 <CreditCard className="w-4 h-4" />
 167 |                 معلومات الدفع
 168 |               </h4>
 169 |               
 170 |               <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
 171 |                 <div className="space-y-2">
 172 |                   <label className="text-sm font-medium text-gray-600">المبلغ</label>
 173 |                   <div className="flex items-center gap-2">
 174 |                     <DollarSign className="w-4 h-4 text-gray-400" />
 175 |                     <span className="font-semibold text-lg">
 176 |                       {new Intl.NumberFormat('ar-EG', {
 177 |                         style: 'currency',
 178 |                         currency: paymentDetails.currency
 179 |                       }).format(paymentDetails.amount)}
 180 |                     </span>
 181 |                   </div>
 182 |                 </div>
 183 | 
 184 |                 <div className="space-y-2">
 185 |                   <label className="text-sm font-medium text-gray-600">تاريخ الإنشاء</label>
 186 |                   <div className="flex items-center gap-2">
 187 |                     <Calendar className="w-4 h-4 text-gray-400" />
 188 |                     <span>{new Date(paymentDetails.createdAt).toLocaleString('ar-SA')}</span>
 189 |                   </div>
 190 |                 </div>
 191 | 
 192 |                 {paymentDetails.completedAt && (
 193 |                   <div className="space-y-2">
 194 |                     <label className="text-sm font-medium text-gray-600">تاريخ الإكمال</label>
 195 |                     <div className="flex items-center gap-2">
 196 |                       <CheckCircle className="w-4 h-4 text-green-500" />
 197 |                       <span>{new Date(paymentDetails.completedAt).toLocaleString('ar-SA')}</span>
 198 |                     </div>
 199 |                   </div>
 200 |                 )}
 201 | 
 202 |                 {paymentDetails.paymobTransactionId && (
 203 |                   <div className="space-y-2">
 204 |                     <label className="text-sm font-medium text-gray-600">رقم المعاملة</label>
 205 |                     <div className="flex items-center gap-2">
 206 |                       <Hash className="w-4 h-4 text-gray-400" />
 207 |                       <span className="font-mono">{paymentDetails.paymobTransactionId}</span>
 208 |                       <Button
 209 |                         variant="ghost"
 210 |                         size="sm"
 211 |                         onClick={() => copyToClipboard(
 212 |                           paymentDetails.paymobTransactionId!.toString(), 
 213 |                           'رقم المعاملة'
 214 |                         )}
 215 |                       >
 216 |                         <Copy className="w-3 h-3" />
 217 |                       </Button>
 218 |                     </div>
 219 |                   </div>
 220 |                 )}
 221 |               </div>
 222 | 
 223 |               {paymentDetails.failureReason && (
 224 |                 <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
 225 |                   <div className="flex items-start gap-2">
 226 |                     <AlertCircle className="w-4 h-4 text-red-600 mt-0.5" />
 227 |                     <div>
 228 |                       <p className="text-sm font-medium text-red-800">سبب الفشل</p>
 229 |                       <p className="text-sm text-red-700">{paymentDetails.failureReason}</p>
 230 |                     </div>
 231 |                   </div>
 232 |                 </div>
 233 |               )}
 234 |             </div>
 235 | 
 236 |             <Separator />
 237 | 
 238 |             {/* Course Information */}
 239 |             <div className="space-y-4">
 240 |               <h4 className="font-semibold flex items-center gap-2">
 241 |                 <BookOpen className="w-4 h-4" />
 242 |                 معلومات الدورة
 243 |               </h4>
 244 |               
 245 |               <div className="flex items-center gap-4 p-4 border rounded-lg">
 246 |                 <img
 247 |                   src={paymentDetails.course.thumbnailUrl}
 248 |                   alt={paymentDetails.course.title}
 249 |                   className="w-16 h-12 object-cover rounded"
 250 |                 />
 251 |                 <div className="flex-1">
 252 |                   <h5 className="font-semibold">{paymentDetails.course.title}</h5>
 253 |                   <p className="text-sm text-gray-600 flex items-center gap-1">
 254 |                     <User className="w-3 h-3" />
 255 |                     {paymentDetails.course.professor}
 256 |                   </p>
 257 |                 </div>
 258 |                 <Button
 259 |                   variant="outline"
 260 |                   size="sm"
 261 |                   onClick={() => window.open(`/courses/${paymentDetails.course.id}`, '_blank')}
 262 |                 >
 263 |                   <ExternalLink className="w-4 h-4 mr-2" />
 264 |                   عرض الدورة
 265 |                 </Button>
 266 |               </div>
 267 |             </div>
 268 | 
 269 |             {/* Enrollment Status */}
 270 |             {paymentDetails.enrollment && (
 271 |               <>
 272 |                 <Separator />
 273 |                 <div className="space-y-4">
 274 |                   <h4 className="font-semibold flex items-center gap-2">
 275 |                     <CheckCircle className="w-4 h-4 text-green-600" />
 276 |                     حالة التسجيل
 277 |                   </h4>
 278 |                   
 279 |                   <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
 280 |                     <div className="flex items-center justify-between">
 281 |                       <div>
 282 |                         <p className="font-medium text-green-800">مسجل في الدورة</p>
 283 |                         <p className="text-sm text-green-600">
 284 |                           تاريخ التسجيل: {new Date(paymentDetails.enrollment.enrolledAt).toLocaleDateString('ar-SA')}
 285 |                         </p>
 286 |                       </div>
 287 |                       <div className="text-right">
 288 |                         <p className="text-2xl font-bold text-green-600">
 289 |                           {paymentDetails.enrollment.progressPercent}%
 290 |                         </p>
 291 |                         <p className="text-sm text-green-600">التقدم</p>
 292 |                       </div>
 293 |                     </div>
 294 |                   </div>
 295 |                 </div>
 296 |               </>
 297 |             )}
 298 | 
 299 |             {/* Technical Details (for debugging) */}
 300 |             {paymentDetails.webhooks && paymentDetails.webhooks.length > 0 && (
 301 |               <>
 302 |                 <Separator />
 303 |                 <div className="space-y-4">
 304 |                   <h4 className="font-semibold text-sm text-gray-600">تفاصيل تقنية</h4>
 305 |                   
 306 |                   <div className="space-y-2">
 307 |                     {paymentDetails.webhooks.map((webhook) => (
 308 |                       <div key={webhook.id} className="text-xs text-gray-500 p-2 bg-gray-50 rounded">
 309 |                         <div className="flex justify-between">
 310 |                           <span>معالجة: {new Date(webhook.processedAt).toLocaleString('ar-SA')}</span>
 311 |                           <span>محاولات: {webhook.processingAttempts}</span>
 312 |                         </div>
 313 |                         {webhook.lastError && (
 314 |                           <p className="text-red-600 mt-1">خطأ: {webhook.lastError}</p>
 315 |                         )}
 316 |                       </div>
 317 |                     ))}
 318 |                   </div>
 319 |                 </div>
 320 |               </>
 321 |             )}
 322 |           </div>
 323 |         ) : (
 324 |           <div className="text-center py-8">
 325 |             <AlertCircle className="w-12 h-12 mx-auto text-gray-400 mb-4" />
 326 |             <p className="text-gray-600">لا يمكن تحميل تفاصيل الدفع</p>
 327 |           </div>
 328 |         )}
 329 |       </DialogContent>
 330 |     </Dialog>
 331 |   );
 332 | }
```

================================================================================

## 36. src\components\payment\PaymentFlow.tsx

**File Type:** TSX
**File Name:** PaymentFlow.tsx
**Full Path:** src\components\payment\PaymentFlow.tsx

**File Size:** 15584 characters, 416 lines

### Content:

```tsx
   1 | // src/components/payment/PaymentFlow.tsx - Enterprise Payment Flow
   2 | "use client";
   3 | 
   4 | import { useState, useEffect } from "react";
   5 | import { motion, AnimatePresence } from "framer-motion";
   6 | import { Course } from "@/lib/api/courses";
   7 | import { PaymentMethodSelector } from "./PaymentMethodSelector";
   8 | import { PaymentIframe } from "./PaymentIframe";
   9 | import { PaymentStatus } from "./PaymentStatus";
  10 | import { CourseInfo } from "./CourseInfo";
  11 | import { paymentsApi, PaymentInitiationResponse } from "@/lib/api/payments";
  12 | import { Button } from "@/components/ui/button";
  13 | import { Progress } from "@/components/ui/progress";
  14 | import { toast } from "sonner";
  15 | import {
  16 |   ArrowLeft,
  17 |   Shield,
  18 |   Lock,
  19 |   CheckCircle,
  20 |   CreditCard,
  21 |   Smartphone,
  22 |   RefreshCw,
  23 | } from "lucide-react";
  24 | import { cn } from "@/lib/utils";
  25 | 
  26 | interface PaymentFlowProps {
  27 |   course: Course;
  28 |   onSuccess: (paymentId: string) => void;
  29 |   onCancel: () => void;
  30 | }
  31 | 
  32 | type PaymentStep = "method" | "details" | "review" | "complete";
  33 | type PaymentMethod = "credit-card" | "e-wallet";
  34 | 
  35 | const STEPS = [
  36 |   { id: "method", title: "طريقة الدفع", icon: CreditCard },
  37 |   { id: "details", title: "تفاصيل الدفع", icon: Lock },
  38 |   { id: "review", title: "مراجعة الطلب", icon: CheckCircle },
  39 |   { id: "complete", title: "إتمام العملية", icon: Shield },
  40 | ];
  41 | 
  42 | export function PaymentFlow({ course, onSuccess, onCancel }: PaymentFlowProps) {
  43 |   const [currentStep, setCurrentStep] = useState<PaymentStep>("method");
  44 |   const [selectedMethod, setSelectedMethod] =
  45 |     useState<PaymentMethod>("credit-card");
  46 |   const [paymentData, setPaymentData] =
  47 |     useState<PaymentInitiationResponse | null>(null);
  48 |   const [error, setError] = useState<string | null>(null);
  49 |   const [isLoading, setIsLoading] = useState(false);
  50 |   const [processingState, setProcessingState] = useState<
  51 |     "idle" | "processing" | "verifying" | "success" | "error"
  52 |   >("idle");
  53 | 
  54 |   const currentStepIndex = STEPS.findIndex((step) => step.id === currentStep);
  55 |   const progressPercentage = ((currentStepIndex + 1) / STEPS.length) * 100;
  56 | 
  57 |   useEffect(() => {
  58 |     // Reset state on mount
  59 |     setCurrentStep("method");
  60 |     setPaymentData(null);
  61 |     setError(null);
  62 |     setIsLoading(false);
  63 |     setProcessingState("idle");
  64 |   }, []);
  65 | 
  66 |   const handleMethodSelect = (method: PaymentMethod) => {
  67 |     setSelectedMethod(method);
  68 |   };
  69 | 
  70 |   const handleProceedToDetails = () => {
  71 |     setCurrentStep("details");
  72 |   };
  73 | 
  74 |   const handleInitiatePayment = async () => {
  75 |     try {
  76 |       setIsLoading(true);
  77 |       setError(null);
  78 |       setProcessingState("processing");
  79 | 
  80 |       const response = await paymentsApi.initiatePayment(
  81 |         course.id,
  82 |         selectedMethod
  83 |       );
  84 | 
  85 |       setPaymentData(response);
  86 |       setCurrentStep("complete");
  87 | 
  88 |       setProcessingState("idle");
  89 | 
  90 |       console.log("Payment initiated successfully:", {
  91 |         paymentId: response.paymentId,
  92 |         iframeUrl: response.iframeUrl,
  93 |       });
  94 |     } catch (error: any) {
  95 |       console.error("Payment initiation failed:", error);
  96 |       
  97 |       // Handle specific error cases
  98 |       if (error.message.includes('عملية دفع معلقة')) {
  99 |         // For pending payment errors, show a retry option
 100 |         setError('لديك عملية دفع معلقة. سيتم إلغاؤها تلقائياً والمحاولة مرة أخرى.');
 101 |         
 102 |         // Automatically retry after a short delay
 103 |         setTimeout(() => {
 104 |           handleInitiatePayment();
 105 |         }, 2000);
 106 |         return;
 107 |       }
 108 |       
 109 |       const errorMessage = paymentsApi.handlePaymentError(error);
 110 |       setError(errorMessage);
 111 |       setProcessingState("error");
 112 |     } finally {
 113 |       setIsLoading(false);
 114 |     }
 115 |   };
 116 | 
 117 |   const handlePaymentComplete = async (paymentId: string) => {
 118 |     try {
 119 |       setProcessingState("verifying");
 120 | 
 121 |       const payment = await paymentsApi.pollPaymentStatus(paymentId, {
 122 |         maxAttempts: 30,
 123 |         intervalMs: 3000,
 124 |         onStatusChange: (status) => {
 125 |           console.log("Payment status:", status);
 126 |         },
 127 |       });
 128 | 
 129 |       if (payment.status === "COMPLETED") {
 130 |         setProcessingState("success");
 131 |         toast.success("تم الدفع بنجاح! تم تسجيلك في الدورة.");
 132 |         setTimeout(() => onSuccess(paymentId), 2000);
 133 |       } else {
 134 |         setError("فشل في إتمام عملية الدفع");
 135 |         setProcessingState("error");
 136 |       }
 137 |     } catch (error) {
 138 |       setError("انتهت مهلة انتظار تأكيد الدفع");
 139 |       setProcessingState("error");
 140 |     }
 141 |   };
 142 | 
 143 |   const handleRetry = () => {
 144 |     setCurrentStep("method");
 145 |     setError(null);
 146 |     setPaymentData(null);
 147 |     setProcessingState("idle");
 148 |   };
 149 | 
 150 |   return (
 151 |     <div className="min-h-screen bg-neutral-50">
 152 |       {/* Enhanced Header with Trust Indicators */}
 153 |       <div className="bg-white border-b shadow-sm">
 154 |         <div className="max-w-7xl mx-auto px-4 py-6">
 155 |           <div className="flex items-center justify-between">
 156 |             <div className="flex items-center gap-4">
 157 |               <Button variant="ghost" size="sm" onClick={onCancel}>
 158 |                 <ArrowLeft className="w-4 h-4 ml-2" />
 159 |                 العودة
 160 |               </Button>
 161 |               <div>
 162 |                 <h1 className="text-2xl font-bold font-display">
 163 |                   دفع آمن ومحمي
 164 |                 </h1>
 165 |                 <p className="text-neutral-600 font-primary">
 166 |                   عملية دفع مشفرة بأعلى معايير الأمان
 167 |                 </p>
 168 |               </div>
 169 |             </div>
 170 | 
 171 |             {/* Trust Badges */}
 172 |             <div className="hidden md:flex items-center gap-4">
 173 |               <div className="flex items-center gap-2 text-sm text-green-600">
 174 |                 <Shield className="w-4 h-4" />
 175 |                 <span className="font-medium font-primary">SSL محمي</span>
 176 |               </div>
 177 |               <div className="flex items-center gap-2 text-sm text-blue-600">
 178 |                 <Lock className="w-4 h-4" />
 179 |                 <span className="font-medium font-primary">PCI DSS</span>
 180 |               </div>
 181 |               <div className="flex items-center gap-2 text-sm text-purple-600">
 182 |                 <CheckCircle className="w-4 h-4" />
 183 |                 <span className="font-medium font-primary">ضمان الاسترداد</span>
 184 |               </div>
 185 |             </div>
 186 |           </div>
 187 | 
 188 |           {/* Progress Indicator */}
 189 |           <div className="mt-6">
 190 |             <div className="flex items-center justify-between mb-2">
 191 |               <span className="text-sm font-medium font-primary">
 192 |                 تقدم العملية
 193 |               </span>
 194 |               <span className="text-sm text-neutral-600 font-primary">
 195 |                 {currentStepIndex + 1} من {STEPS.length}
 196 |               </span>
 197 |             </div>
 198 |             <Progress value={progressPercentage} className="h-2" />
 199 | 
 200 |             {/* Step Indicators */}
 201 |             <div className="flex items-center justify-between mt-4">
 202 |               {STEPS.map((step, index) => {
 203 |                 const StepIcon = step.icon;
 204 |                 const isActive = index === currentStepIndex;
 205 |                 const isCompleted = index < currentStepIndex;
 206 | 
 207 |                 return (
 208 |                   <div key={step.id} className="flex items-center">
 209 |                     <div
 210 |                       className={cn(
 211 |                         "flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-all",
 212 |                         isActive
 213 |                           ? "bg-primary-100 text-primary-700"
 214 |                           : isCompleted
 215 |                           ? "bg-green-100 text-green-700"
 216 |                           : "bg-neutral-100 text-neutral-500"
 217 |                       )}
 218 |                     >
 219 |                       <StepIcon className="w-4 h-4" />
 220 |                       <span className="font-primary">{step.title}</span>
 221 |                       {isCompleted && <CheckCircle className="w-4 h-4" />}
 222 |                     </div>
 223 |                     {index < STEPS.length - 1 && (
 224 |                       <div
 225 |                         className={cn(
 226 |                           "w-8 h-0.5 mx-2",
 227 |                           isCompleted ? "bg-green-300" : "bg-neutral-200"
 228 |                         )}
 229 |                       />
 230 |                     )}
 231 |                   </div>
 232 |                 );
 233 |               })}
 234 |             </div>
 235 |           </div>
 236 |         </div>
 237 |       </div>
 238 | 
 239 |       {/* Main Content - Wide Layout */}
 240 |       <div className="max-w-7xl mx-auto px-4 py-8">
 241 |         <div className="grid grid-cols-1 xl:grid-cols-4 gap-8">
 242 |           {/* Course Info Sidebar */}
 243 |           <div className="xl:col-span-1">
 244 |             <CourseInfo course={course} />
 245 |           </div>
 246 | 
 247 |           {/* Payment Content */}
 248 |           <div className="xl:col-span-3">
 249 |             <AnimatePresence mode="wait">
 250 |               {currentStep === "method" && (
 251 |                 <motion.div
 252 |                   key="method"
 253 |                   initial={{ opacity: 0, x: 20 }}
 254 |                   animate={{ opacity: 1, x: 0 }}
 255 |                   exit={{ opacity: 0, x: -20 }}
 256 |                   transition={{ duration: 0.3 }}
 257 |                 >
 258 |                   <PaymentMethodSelector
 259 |                     selectedMethod={selectedMethod}
 260 |                     onMethodSelect={handleMethodSelect}
 261 |                     onProceed={handleProceedToDetails}
 262 |                     isLoading={isLoading}
 263 |                     course={course}
 264 |                   />
 265 |                 </motion.div>
 266 |               )}
 267 | 
 268 |               {currentStep === "details" && (
 269 |                 <motion.div
 270 |                   key="details"
 271 |                   initial={{ opacity: 0, x: 20 }}
 272 |                   animate={{ opacity: 1, x: 0 }}
 273 |                   exit={{ opacity: 0, x: -20 }}
 274 |                   transition={{ duration: 0.3 }}
 275 |                   className="space-y-6"
 276 |                 >
 277 |                   <div className="bg-white rounded-lg border p-6">
 278 |                     <h2 className="text-xl font-bold font-display mb-4">
 279 |                       تأكيد طريقة الدفع
 280 |                     </h2>
 281 |                     <div className="flex items-center gap-4 p-4 bg-neutral-50 rounded-lg">
 282 |                       {selectedMethod === "credit-card" ? (
 283 |                         <CreditCard className="w-8 h-8 text-blue-600" />
 284 |                       ) : (
 285 |                         <Smartphone className="w-8 h-8 text-green-600" />
 286 |                       )}
 287 |                       <div>
 288 |                         <p className="font-semibold font-display">
 289 |                           {selectedMethod === "credit-card"
 290 |                             ? "بطاقة ائتمان"
 291 |                             : "محفظة إلكترونية"}
 292 |                         </p>
 293 |                         <p className="text-sm text-neutral-600 font-primary">
 294 |                           {selectedMethod === "credit-card"
 295 |                             ? "دفع آمن باستخدام بطاقة الائتمان أو الخصم"
 296 |                             : "دفع سريع باستخدام المحفظة الإلكترونية"}
 297 |                         </p>
 298 |                       </div>
 299 |                     </div>
 300 | 
 301 |                     <div className="flex gap-3 mt-6">
 302 |                       <Button
 303 |                         onClick={() => setCurrentStep("method")}
 304 |                         variant="outline"
 305 |                       >
 306 |                         تغيير الطريقة
 307 |                       </Button>
 308 |                       <Button
 309 |                         onClick={handleInitiatePayment}
 310 |                         disabled={isLoading}
 311 |                         className="flex-1"
 312 |                       >
 313 |                         {isLoading ? (
 314 |                           <>
 315 |                             <RefreshCw className="w-4 h-4 animate-spin ml-2" />
 316 |                             جاري التحضير...
 317 |                           </>
 318 |                         ) : (
 319 |                           "متابعة الدفع"
 320 |                         )}
 321 |                       </Button>
 322 |                     </div>
 323 |                   </div>
 324 |                 </motion.div>
 325 |               )}
 326 | 
 327 |               {currentStep === "complete" && (
 328 |                 <motion.div
 329 |                   key="complete"
 330 |                   initial={{ opacity: 0, x: 20 }}
 331 |                   animate={{ opacity: 1, x: 0 }}
 332 |                   exit={{ opacity: 0, x: -20 }}
 333 |                   transition={{ duration: 0.3 }}
 334 |                 >
 335 |                   {processingState === "processing" && (
 336 |                     <PaymentStatus
 337 |                       type="processing"
 338 |                       title="جاري تحضير عملية الدفع"
 339 |                       message="يرجى الانتظار بينما نحضر نموذج الدفع الآمن..."
 340 |                     />
 341 |                   )}
 342 | 
 343 |                   {processingState === "idle" && paymentData && (
 344 |                     <PaymentIframe
 345 |                       paymentData={paymentData}
 346 |                       paymentMethod={selectedMethod}
 347 |                       onComplete={handlePaymentComplete}
 348 |                       onError={(error: string) => {
 349 |                         setError(error);
 350 |                         setProcessingState("error");
 351 |                       }}
 352 |                     />
 353 |                   )}
 354 | 
 355 |                   {processingState === "verifying" && (
 356 |                     <PaymentStatus
 357 |                       type="verifying"
 358 |                       title="جاري التحقق من عملية الدفع"
 359 |                       message="يرجى الانتظار بينما نتحقق من حالة الدفع..."
 360 |                       paymentData={paymentData}
 361 |                     />
 362 |                   )}
 363 | 
 364 |                   {processingState === "success" && (
 365 |                     <PaymentStatus
 366 |                       type="success"
 367 |                       title="تم الدفع بنجاح!"
 368 |                       message="تم تسجيلك في الدورة بنجاح. سيتم توجيهك إلى الدورة قريباً..."
 369 |                     />
 370 |                   )}
 371 | 
 372 |                   {processingState === "error" && (
 373 |                     <PaymentStatus
 374 |                       type="error"
 375 |                       title="فشل في عملية الدفع"
 376 |                       message={error || "حدث خطأ أثناء معالجة عملية الدفع"}
 377 |                       onRetry={handleRetry}
 378 |                       onCancel={onCancel}
 379 |                     />
 380 |                   )}
 381 |                 </motion.div>
 382 |               )}
 383 |             </AnimatePresence>
 384 |           </div>
 385 |         </div>
 386 |       </div>
 387 | 
 388 |       {/* Security Footer */}
 389 |       <div className="bg-white border-t mt-12">
 390 |         <div className="max-w-7xl mx-auto px-4 py-6">
 391 |           <div className="flex flex-col md:flex-row items-center justify-between gap-4">
 392 |             <div className="flex items-center gap-6 text-sm text-neutral-600">
 393 |               <div className="flex items-center gap-2">
 394 |                 <Shield className="w-4 h-4 text-green-600" />
 395 |                 <span className="font-primary">تشفير SSL 256-bit</span>
 396 |               </div>
 397 |               <div className="flex items-center gap-2">
 398 |                 <Lock className="w-4 h-4 text-blue-600" />
 399 |                 <span className="font-primary">معتمد PCI DSS</span>
 400 |               </div>
 401 |               <div className="flex items-center gap-2">
 402 |                 <CheckCircle className="w-4 h-4 text-purple-600" />
 403 |                 <span className="font-primary">ضمان استرداد 30 يوم</span>
 404 |               </div>
 405 |             </div>
 406 | 
 407 |             <div className="text-sm text-neutral-500 font-primary">
 408 |               محمي بواسطة تقنيات الأمان المتقدمة
 409 |             </div>
 410 |           </div>
 411 |         </div>
 412 |       </div>
 413 |     </div>
 414 |   );
 415 | }
 416 | 
```

================================================================================

## 37. src\components\payment\PaymentForm.tsx

**File Type:** TSX
**File Name:** PaymentForm.tsx
**Full Path:** src\components\payment\PaymentForm.tsx

**File Size:** 20723 characters, 572 lines

### Content:

```tsx
   1 | // src/components/payment/PaymentForm.tsx - Secure Payment Form with Advanced Validation
   2 | "use client";
   3 | 
   4 | import { useState, useEffect, useRef } from "react";
   5 | import { motion, AnimatePresence } from "framer-motion";
   6 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
   7 | import { Button } from "@/components/ui/button";
   8 | import { Input } from "@/components/ui/input";
   9 | import { Label } from "@/components/ui/label";
  10 | import { Badge } from "@/components/ui/badge";
  11 | import { 
  12 |   CreditCard, 
  13 |   Lock, 
  14 |   Shield, 
  15 |   Eye, 
  16 |   EyeOff,
  17 |   AlertCircle,
  18 |   CheckCircle,
  19 |   Info,
  20 |   Loader2
  21 | } from "lucide-react";
  22 | import { cn } from "@/lib/utils";
  23 | 
  24 | interface PaymentFormProps {
  25 |   onSubmit: (formData: PaymentFormData) => void;
  26 |   isLoading?: boolean;
  27 |   error?: string | null;
  28 | }
  29 | 
  30 | interface PaymentFormData {
  31 |   cardNumber: string;
  32 |   expiryDate: string;
  33 |   cvv: string;
  34 |   cardholderName: string;
  35 |   email: string;
  36 |   billingAddress: {
  37 |     street: string;
  38 |     city: string;
  39 |     postalCode: string;
  40 |     country: string;
  41 |   };
  42 | }
  43 | 
  44 | interface CardType {
  45 |   name: string;
  46 |   pattern: RegExp;
  47 |   gaps: number[];
  48 |   lengths: number[];
  49 |   code: { name: string; size: number };
  50 |   icon: string;
  51 | }
  52 | 
  53 | const CARD_TYPES: CardType[] = [
  54 |   {
  55 |     name: 'visa',
  56 |     pattern: /^4/,
  57 |     gaps: [4, 8, 12],
  58 |     lengths: [16, 18, 19],
  59 |     code: { name: 'CVV', size: 3 },
  60 |     icon: '💳'
  61 |   },
  62 |   {
  63 |     name: 'mastercard',
  64 |     pattern: /^(5[1-5]|2[2-7])/,
  65 |     gaps: [4, 8, 12],
  66 |     lengths: [16],
  67 |     code: { name: 'CVC', size: 3 },
  68 |     icon: '💳'
  69 |   },
  70 |   {
  71 |     name: 'amex',
  72 |     pattern: /^3[47]/,
  73 |     gaps: [4, 10],
  74 |     lengths: [15],
  75 |     code: { name: 'CID', size: 4 },
  76 |     icon: '💳'
  77 |   }
  78 | ];
  79 | 
  80 | export function PaymentForm({ onSubmit, isLoading = false, error }: PaymentFormProps) {
  81 |   const [formData, setFormData] = useState<PaymentFormData>({
  82 |     cardNumber: '',
  83 |     expiryDate: '',
  84 |     cvv: '',
  85 |     cardholderName: '',
  86 |     email: '',
  87 |     billingAddress: {
  88 |       street: '',
  89 |       city: '',
  90 |       postalCode: '',
  91 |       country: 'EG'
  92 |     }
  93 |   });
  94 | 
  95 |   const [validation, setValidation] = useState<Record<string, string>>({});
  96 |   const [cardType, setCardType] = useState<CardType | null>(null);
  97 |   const [showCvvInfo, setShowCvvInfo] = useState(false);
  98 |   const [focusedField, setFocusedField] = useState<string | null>(null);
  99 |   const [isSecure, setIsSecure] = useState(false);
 100 | 
 101 |   const cardNumberRef = useRef<HTMLInputElement>(null);
 102 | 
 103 |   // Detect card type
 104 |   useEffect(() => {
 105 |     const number = formData.cardNumber.replace(/\s/g, '');
 106 |     const detectedType = CARD_TYPES.find(type => type.pattern.test(number));
 107 |     setCardType(detectedType || null);
 108 |   }, [formData.cardNumber]);
 109 | 
 110 |   // Check if connection is secure
 111 |   useEffect(() => {
 112 |     setIsSecure(window.location.protocol === 'https:');
 113 |   }, []);
 114 | 
 115 |   const formatCardNumber = (value: string) => {
 116 |     const number = value.replace(/\s/g, '');
 117 |     const type = CARD_TYPES.find(t => t.pattern.test(number));
 118 |     
 119 |     if (!type) return number;
 120 |     
 121 |     let formatted = '';
 122 |     let index = 0;
 123 |     
 124 |     for (let i = 0; i < number.length; i++) {
 125 |       if (type.gaps.includes(i)) {
 126 |         formatted += ' ';
 127 |       }
 128 |       formatted += number[i];
 129 |     }
 130 |     
 131 |     return formatted;
 132 |   };
 133 | 
 134 |   const formatExpiryDate = (value: string) => {
 135 |     const cleaned = value.replace(/\D/g, '');
 136 |     if (cleaned.length >= 2) {
 137 |       return cleaned.substring(0, 2) + '/' + cleaned.substring(2, 4);
 138 |     }
 139 |     return cleaned;
 140 |   };
 141 | 
 142 |   const validateField = (name: string, value: string): string => {
 143 |     switch (name) {
 144 |       case 'cardNumber':
 145 |         const number = value.replace(/\s/g, '');
 146 |         if (!number) return 'رقم البطاقة مطلوب';
 147 |         if (number.length < 13) return 'رقم البطاقة قصير جداً';
 148 |         if (!cardType) return 'نوع البطاقة غير مدعوم';
 149 |         if (!cardType.lengths.includes(number.length)) return 'رقم البطاقة غير صحيح';
 150 |         return '';
 151 | 
 152 |       case 'expiryDate':
 153 |         if (!value) return 'تاريخ الانتهاء مطلوب';
 154 |         const [month, year] = value.split('/');
 155 |         if (!month || !year) return 'تنسيق التاريخ غير صحيح';
 156 |         const monthNum = parseInt(month);
 157 |         const yearNum = parseInt('20' + year);
 158 |         if (monthNum < 1 || monthNum > 12) return 'الشهر غير صحيح';
 159 |         const now = new Date();
 160 |         const expiry = new Date(yearNum, monthNum - 1);
 161 |         if (expiry < now) return 'البطاقة منتهية الصلاحية';
 162 |         return '';
 163 | 
 164 |       case 'cvv':
 165 |         if (!value) return 'رمز الأمان مطلوب';
 166 |         const expectedLength = cardType?.code.size || 3;
 167 |         if (value.length !== expectedLength) return `رمز الأمان يجب أن يكون ${expectedLength} أرقام`;
 168 |         return '';
 169 | 
 170 |       case 'cardholderName':
 171 |         if (!value.trim()) return 'اسم حامل البطاقة مطلوب';
 172 |         if (value.trim().length < 2) return 'الاسم قصير جداً';
 173 |         return '';
 174 | 
 175 |       case 'email':
 176 |         if (!value) return 'البريد الإلكتروني مطلوب';
 177 |         const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
 178 |         if (!emailRegex.test(value)) return 'البريد الإلكتروني غير صحيح';
 179 |         return '';
 180 | 
 181 |       default:
 182 |         return '';
 183 |     }
 184 |   };
 185 | 
 186 |   const handleInputChange = (name: string, value: string) => {
 187 |     let formattedValue = value;
 188 | 
 189 |     // Apply formatting
 190 |     if (name === 'cardNumber') {
 191 |       formattedValue = formatCardNumber(value);
 192 |     } else if (name === 'expiryDate') {
 193 |       formattedValue = formatExpiryDate(value);
 194 |     } else if (name === 'cvv') {
 195 |       formattedValue = value.replace(/\D/g, '').substring(0, cardType?.code.size || 4);
 196 |     }
 197 | 
 198 |     // Update form data
 199 |     if (name.includes('.')) {
 200 |       const [parent, child] = name.split('.');
 201 |       setFormData(prev => ({
 202 |         ...prev,
 203 |         [parent]: {
 204 |           ...prev[parent as keyof PaymentFormData] as any,
 205 |           [child]: formattedValue
 206 |         }
 207 |       }));
 208 |     } else {
 209 |       setFormData(prev => ({
 210 |         ...prev,
 211 |         [name]: formattedValue
 212 |       }));
 213 |     }
 214 | 
 215 |     // Validate field
 216 |     const error = validateField(name, formattedValue);
 217 |     setValidation(prev => ({
 218 |       ...prev,
 219 |       [name]: error
 220 |     }));
 221 |   };
 222 | 
 223 |   const handleSubmit = (e: React.FormEvent) => {
 224 |     e.preventDefault();
 225 |     
 226 |     // Validate all fields
 227 |     const errors: Record<string, string> = {};
 228 |     Object.keys(formData).forEach(key => {
 229 |       if (key !== 'billingAddress') {
 230 |         const error = validateField(key, formData[key as keyof PaymentFormData] as string);
 231 |         if (error) errors[key] = error;
 232 |       }
 233 |     });
 234 | 
 235 |     setValidation(errors);
 236 | 
 237 |     if (Object.keys(errors).length === 0) {
 238 |       onSubmit(formData);
 239 |     }
 240 |   };
 241 | 
 242 |   const getFieldStatus = (fieldName: string) => {
 243 |     const hasError = validation[fieldName];
 244 |     const hasValue = formData[fieldName as keyof PaymentFormData];
 245 |     const isFocused = focusedField === fieldName;
 246 | 
 247 |     if (hasError) return 'error';
 248 |     if (hasValue && !hasError) return 'success';
 249 |     if (isFocused) return 'focus';
 250 |     return 'default';
 251 |   };
 252 | 
 253 |   return (
 254 |     <div className="space-y-6">
 255 |       {/* Security Header */}
 256 |       <Card className="border-green-200 bg-green-50">
 257 |         <CardContent className="p-4">
 258 |           <div className="flex items-center gap-3">
 259 |             <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
 260 |               <Shield className="w-5 h-5 text-green-600" />
 261 |             </div>
 262 |             <div>
 263 |               <p className="font-semibold text-green-800 font-display">
 264 |                 {isSecure ? 'اتصال آمن ومشفر' : 'تحذير: الاتصال غير آمن'}
 265 |               </p>
 266 |               <p className="text-sm text-green-600 font-primary">
 267 |                 {isSecure 
 268 |                   ? 'جميع بياناتك محمية بتشفير SSL 256-bit' 
 269 |                   : 'يرجى التأكد من استخدام اتصال HTTPS آمن'}
 270 |               </p>
 271 |             </div>
 272 |             {isSecure && <Lock className="w-5 h-5 text-green-600" />}
 273 |           </div>
 274 |         </CardContent>
 275 |       </Card>
 276 | 
 277 |       <form onSubmit={handleSubmit} className="space-y-6">
 278 |         {/* Card Information */}
 279 |         <Card>
 280 |           <CardHeader>
 281 |             <CardTitle className="flex items-center gap-2 font-display">
 282 |               <CreditCard className="w-5 h-5" />
 283 |               معلومات البطاقة
 284 |             </CardTitle>
 285 |           </CardHeader>
 286 |           <CardContent className="space-y-4">
 287 |             {/* Card Number */}
 288 |             <div className="space-y-2">
 289 |               <Label htmlFor="cardNumber" className="font-primary">رقم البطاقة</Label>
 290 |               <div className="relative">
 291 |                 <Input
 292 |                   ref={cardNumberRef}
 293 |                   id="cardNumber"
 294 |                   type="text"
 295 |                   placeholder="1234 5678 9012 3456"
 296 |                   value={formData.cardNumber}
 297 |                   onChange={(e) => handleInputChange('cardNumber', e.target.value)}
 298 |                   onFocus={() => setFocusedField('cardNumber')}
 299 |                   onBlur={() => setFocusedField(null)}
 300 |                   className={cn(
 301 |                     "pl-12 pr-16 font-mono text-lg",
 302 |                     getFieldStatus('cardNumber') === 'error' && "border-red-500 focus:border-red-500",
 303 |                     getFieldStatus('cardNumber') === 'success' && "border-green-500",
 304 |                     getFieldStatus('cardNumber') === 'focus' && "border-primary-500"
 305 |                   )}
 306 |                   maxLength={23}
 307 |                 />
 308 |                 
 309 |                 {/* Card Type Icon */}
 310 |                 <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
 311 |                   {cardType ? (
 312 |                     <div className="text-2xl">{cardType.icon}</div>
 313 |                   ) : (
 314 |                     <CreditCard className="w-5 h-5 text-neutral-400" />
 315 |                   )}
 316 |                 </div>
 317 | 
 318 |                 {/* Validation Icon */}
 319 |                 <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
 320 |                   {getFieldStatus('cardNumber') === 'success' && (
 321 |                     <CheckCircle className="w-5 h-5 text-green-500" />
 322 |                   )}
 323 |                   {getFieldStatus('cardNumber') === 'error' && (
 324 |                     <AlertCircle className="w-5 h-5 text-red-500" />
 325 |                   )}
 326 |                 </div>
 327 |               </div>
 328 |               
 329 |               {validation.cardNumber && (
 330 |                 <motion.p
 331 |                   initial={{ opacity: 0, y: -10 }}
 332 |                   animate={{ opacity: 1, y: 0 }}
 333 |                   className="text-sm text-red-600 font-primary"
 334 |                 >
 335 |                   {validation.cardNumber}
 336 |                 </motion.p>
 337 |               )}
 338 | 
 339 |               {cardType && (
 340 |                 <motion.div
 341 |                   initial={{ opacity: 0 }}
 342 |                   animate={{ opacity: 1 }}
 343 |                   className="flex items-center gap-2"
 344 |                 >
 345 |                   <Badge variant="secondary" className="text-xs font-primary">
 346 |                     {cardType.name.toUpperCase()}
 347 |                   </Badge>
 348 |                   <span className="text-xs text-neutral-500 font-primary">
 349 |                     {cardType.lengths.join(' أو ')} رقم
 350 |                   </span>
 351 |                 </motion.div>
 352 |               )}
 353 |             </div>
 354 | 
 355 |             <div className="grid grid-cols-2 gap-4">
 356 |               {/* Expiry Date */}
 357 |               <div className="space-y-2">
 358 |                 <Label htmlFor="expiryDate" className="font-primary">تاريخ الانتهاء</Label>
 359 |                 <div className="relative">
 360 |                   <Input
 361 |                     id="expiryDate"
 362 |                     type="text"
 363 |                     placeholder="MM/YY"
 364 |                     value={formData.expiryDate}
 365 |                     onChange={(e) => handleInputChange('expiryDate', e.target.value)}
 366 |                     onFocus={() => setFocusedField('expiryDate')}
 367 |                     onBlur={() => setFocusedField(null)}
 368 |                     className={cn(
 369 |                       "font-mono text-center",
 370 |                       getFieldStatus('expiryDate') === 'error' && "border-red-500",
 371 |                       getFieldStatus('expiryDate') === 'success' && "border-green-500"
 372 |                     )}
 373 |                     maxLength={5}
 374 |                   />
 375 |                   <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
 376 |                     {getFieldStatus('expiryDate') === 'success' && (
 377 |                       <CheckCircle className="w-4 h-4 text-green-500" />
 378 |                     )}
 379 |                     {getFieldStatus('expiryDate') === 'error' && (
 380 |                       <AlertCircle className="w-4 h-4 text-red-500" />
 381 |                     )}
 382 |                   </div>
 383 |                 </div>
 384 |                 {validation.expiryDate && (
 385 |                   <p className="text-sm text-red-600 font-primary">{validation.expiryDate}</p>
 386 |                 )}
 387 |               </div>
 388 | 
 389 |               {/* CVV */}
 390 |               <div className="space-y-2">
 391 |                 <div className="flex items-center gap-2">
 392 |                   <Label htmlFor="cvv" className="font-primary">
 393 |                     {cardType?.code.name || 'CVV'}
 394 |                   </Label>
 395 |                   <button
 396 |                     type="button"
 397 |                     onClick={() => setShowCvvInfo(!showCvvInfo)}
 398 |                     className="text-neutral-400 hover:text-neutral-600"
 399 |                   >
 400 |                     <Info className="w-4 h-4" />
 401 |                   </button>
 402 |                 </div>
 403 |                 <div className="relative">
 404 |                   <Input
 405 |                     id="cvv"
 406 |                     type="text"
 407 |                     placeholder={cardType?.code.size === 4 ? "1234" : "123"}
 408 |                     value={formData.cvv}
 409 |                     onChange={(e) => handleInputChange('cvv', e.target.value)}
 410 |                     onFocus={() => setFocusedField('cvv')}
 411 |                     onBlur={() => setFocusedField(null)}
 412 |                     className={cn(
 413 |                       "font-mono text-center",
 414 |                       getFieldStatus('cvv') === 'error' && "border-red-500",
 415 |                       getFieldStatus('cvv') === 'success' && "border-green-500"
 416 |                     )}
 417 |                     maxLength={cardType?.code.size || 4}
 418 |                   />
 419 |                   <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
 420 |                     {getFieldStatus('cvv') === 'success' && (
 421 |                       <CheckCircle className="w-4 h-4 text-green-500" />
 422 |                     )}
 423 |                     {getFieldStatus('cvv') === 'error' && (
 424 |                       <AlertCircle className="w-4 h-4 text-red-500" />
 425 |                     )}
 426 |                   </div>
 427 |                 </div>
 428 |                 
 429 |                 <AnimatePresence>
 430 |                   {showCvvInfo && (
 431 |                     <motion.div
 432 |                       initial={{ opacity: 0, height: 0 }}
 433 |                       animate={{ opacity: 1, height: 'auto' }}
 434 |                       exit={{ opacity: 0, height: 0 }}
 435 |                       className="text-xs text-neutral-600 bg-neutral-50 p-2 rounded font-primary"
 436 |                     >
 437 |                       رمز الأمان المكون من {cardType?.code.size || 3} أرقام على ظهر البطاقة
 438 |                     </motion.div>
 439 |                   )}
 440 |                 </AnimatePresence>
 441 |                 
 442 |                 {validation.cvv && (
 443 |                   <p className="text-sm text-red-600 font-primary">{validation.cvv}</p>
 444 |                 )}
 445 |               </div>
 446 |             </div>
 447 | 
 448 |             {/* Cardholder Name */}
 449 |             <div className="space-y-2">
 450 |               <Label htmlFor="cardholderName" className="font-primary">اسم حامل البطاقة</Label>
 451 |               <div className="relative">
 452 |                 <Input
 453 |                   id="cardholderName"
 454 |                   type="text"
 455 |                   placeholder="الاسم كما هو مكتوب على البطاقة"
 456 |                   value={formData.cardholderName}
 457 |                   onChange={(e) => handleInputChange('cardholderName', e.target.value)}
 458 |                   onFocus={() => setFocusedField('cardholderName')}
 459 |                   onBlur={() => setFocusedField(null)}
 460 |                   className={cn(
 461 |                     getFieldStatus('cardholderName') === 'error' && "border-red-500",
 462 |                     getFieldStatus('cardholderName') === 'success' && "border-green-500"
 463 |                   )}
 464 |                 />
 465 |                 <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
 466 |                   {getFieldStatus('cardholderName') === 'success' && (
 467 |                     <CheckCircle className="w-4 h-4 text-green-500" />
 468 |                   )}
 469 |                   {getFieldStatus('cardholderName') === 'error' && (
 470 |                     <AlertCircle className="w-4 h-4 text-red-500" />
 471 |                   )}
 472 |                 </div>
 473 |               </div>
 474 |               {validation.cardholderName && (
 475 |                 <p className="text-sm text-red-600 font-primary">{validation.cardholderName}</p>
 476 |               )}
 477 |             </div>
 478 |           </CardContent>
 479 |         </Card>
 480 | 
 481 |         {/* Contact Information */}
 482 |         <Card>
 483 |           <CardHeader>
 484 |             <CardTitle className="font-display">معلومات الاتصال</CardTitle>
 485 |           </CardHeader>
 486 |           <CardContent>
 487 |             <div className="space-y-2">
 488 |               <Label htmlFor="email" className="font-primary">البريد الإلكتروني</Label>
 489 |               <div className="relative">
 490 |                 <Input
 491 |                   id="email"
 492 |                   type="email"
 493 |                   placeholder="your@email.com"
 494 |                   value={formData.email}
 495 |                   onChange={(e) => handleInputChange('email', e.target.value)}
 496 |                   onFocus={() => setFocusedField('email')}
 497 |                   onBlur={() => setFocusedField(null)}
 498 |                   className={cn(
 499 |                     getFieldStatus('email') === 'error' && "border-red-500",
 500 |                     getFieldStatus('email') === 'success' && "border-green-500"
 501 |                   )}
 502 |                 />
 503 |                 <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
 504 |                   {getFieldStatus('email') === 'success' && (
 505 |                     <CheckCircle className="w-4 h-4 text-green-500" />
 506 |                   )}
 507 |                   {getFieldStatus('email') === 'error' && (
 508 |                     <AlertCircle className="w-4 h-4 text-red-500" />
 509 |                   )}
 510 |                 </div>
 511 |               </div>
 512 |               {validation.email && (
 513 |                 <p className="text-sm text-red-600 font-primary">{validation.email}</p>
 514 |               )}
 515 |             </div>
 516 |           </CardContent>
 517 |         </Card>
 518 | 
 519 |         {/* Error Display */}
 520 |         {error && (
 521 |           <motion.div
 522 |             initial={{ opacity: 0, y: -10 }}
 523 |             animate={{ opacity: 1, y: 0 }}
 524 |             className="bg-red-50 border border-red-200 rounded-lg p-4"
 525 |           >
 526 |             <div className="flex items-center gap-3">
 527 |               <AlertCircle className="w-5 h-5 text-red-600" />
 528 |               <p className="text-red-800 font-primary">{error}</p>
 529 |             </div>
 530 |           </motion.div>
 531 |         )}
 532 | 
 533 |         {/* Submit Button */}
 534 |         <Button
 535 |           type="submit"
 536 |           disabled={isLoading}
 537 |           className="w-full h-14 text-lg font-semibold"
 538 |           size="lg"
 539 |         >
 540 |           {isLoading ? (
 541 |             <>
 542 |               <Loader2 className="w-5 h-5 animate-spin ml-2" />
 543 |               جاري معالجة الدفع...
 544 |             </>
 545 |           ) : (
 546 |             <>
 547 |               <Lock className="w-5 h-5 ml-2" />
 548 |               دفع آمن ومشفر
 549 |             </>
 550 |           )}
 551 |         </Button>
 552 | 
 553 |         {/* Security Footer */}
 554 |         <div className="text-center text-sm text-neutral-500 space-y-2">
 555 |           <div className="flex items-center justify-center gap-4">
 556 |             <div className="flex items-center gap-1">
 557 |               <Shield className="w-4 h-4" />
 558 |               <span className="font-primary">SSL محمي</span>
 559 |             </div>
 560 |             <div className="flex items-center gap-1">
 561 |               <Lock className="w-4 h-4" />
 562 |               <span className="font-primary">PCI DSS معتمد</span>
 563 |             </div>
 564 |           </div>
 565 |           <p className="font-primary">
 566 |             بياناتك محمية ولن يتم حفظ معلومات البطاقة على خوادمنا
 567 |           </p>
 568 |         </div>
 569 |       </form>
 570 |     </div>
 571 |   );
 572 | }
```

================================================================================

## 38. src\components\payment\PaymentIframe.tsx

**File Type:** TSX
**File Name:** PaymentIframe.tsx
**Full Path:** src\components\payment\PaymentIframe.tsx

**File Size:** 12394 characters, 325 lines

### Content:

```tsx
   1 | "use client";
   2 | 
   3 | import { useEffect, useState } from "react";
   4 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
   5 | import { Button } from "@/components/ui/button";
   6 | import { PaymentInitiationResponse } from "@/lib/api/payments";
   7 | import { 
   8 |   Shield, 
   9 |   ExternalLink, 
  10 |   CreditCard, 
  11 |   Smartphone,
  12 |   Loader2,
  13 |   AlertCircle
  14 | } from "lucide-react";
  15 | 
  16 | type PaymentMethod = 'credit-card' | 'e-wallet';
  17 | 
  18 | interface PaymentIframeProps {
  19 |   paymentData: PaymentInitiationResponse;
  20 |   paymentMethod: PaymentMethod;
  21 |   onComplete: (paymentId: string) => void;
  22 |   onError: (error: string) => void;
  23 | }
  24 | 
  25 | export function PaymentIframe({ 
  26 |   paymentData, 
  27 |   paymentMethod, 
  28 |   onComplete, 
  29 |   onError 
  30 | }: PaymentIframeProps) {
  31 |   const [iframeLoaded, setIframeLoaded] = useState(false);
  32 |   const [showFallback, setShowFallback] = useState(false);
  33 |   const [iframeError, setIframeError] = useState(false);
  34 | 
  35 |   useEffect(() => {
  36 |     console.log('PaymentIframe mounted with data:', {
  37 |       paymentId: paymentData.paymentId,
  38 |       iframeUrl: paymentData.iframeUrl,
  39 |       checkoutUrl: paymentData.checkoutUrl,
  40 |       paymentMethod
  41 |     });
  42 | 
  43 |     // For e-wallets, redirect immediately to external checkout
  44 |     if (paymentMethod === 'e-wallet' && paymentData.checkoutUrl) {
  45 |       console.log('E-wallet detected, redirecting to external checkout:', paymentData.checkoutUrl);
  46 |       // Redirect to external UnifiedCheckout (no iframe needed for e-wallets)
  47 |       window.location.href = paymentData.checkoutUrl;
  48 |       return;
  49 |     }
  50 | 
  51 |     // Listen for payment completion messages (credit cards only)
  52 |     const messageHandler = (event: MessageEvent) => {
  53 |       console.log('Message received from iframe:', {
  54 |         origin: event.origin,
  55 |         data: event.data
  56 |       });
  57 | 
  58 |       // Verify origin for security
  59 |       if (!event.origin.includes('paymob.com') && !event.origin.includes('accept.paymob.com')) {
  60 |         console.warn('Message from unauthorized origin:', event.origin);
  61 |         return;
  62 |       }
  63 |       
  64 |       try {
  65 |         const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;
  66 |         
  67 |         if (data.type === 'payment_success' || data.success === true) {
  68 |           console.log('Payment success message received:', data);
  69 |           onComplete(paymentData.paymentId);
  70 |         } else if (data.type === 'payment_error' || data.error === true) {
  71 |           console.log('Payment error message received:', data);
  72 |           onError('فشل في إتمام عملية الدفع');
  73 |         }
  74 |       } catch (error) {
  75 |         console.error('Error parsing payment message:', error);
  76 |       }
  77 |     };
  78 |     
  79 |     window.addEventListener('message', messageHandler);
  80 |     
  81 |     const timeout = setTimeout(() => {
  82 |       if (!iframeLoaded && !iframeError && paymentMethod === 'credit-card') {
  83 |         console.warn('PayMob iframe loading timeout reached');
  84 |         setShowFallback(true);
  85 |       }
  86 |     }, 10000);
  87 |     
  88 |     return () => {
  89 |       window.removeEventListener('message', messageHandler);
  90 |       clearTimeout(timeout);
  91 |     };
  92 |   }, [paymentData.paymentId, paymentData.iframeUrl, paymentData.checkoutUrl, iframeLoaded, iframeError, onComplete, onError, paymentMethod]);
  93 | 
  94 |   const handleIframeLoad = () => {
  95 |     console.log('✅ PayMob iframe loaded successfully');
  96 |     setIframeLoaded(true);
  97 |     setShowFallback(false);
  98 |   };
  99 | 
 100 |   const handleIframeError = (error: any) => {
 101 |     console.error('❌ PayMob iframe failed to load:', error);
 102 |     setIframeError(true);
 103 |     setShowFallback(true);
 104 |   };
 105 | 
 106 |   const retryIframe = () => {
 107 |     console.log('🔄 Retrying iframe load...');
 108 |     setIframeLoaded(false);
 109 |     setIframeError(false);
 110 |     setShowFallback(false);
 111 |   };
 112 | 
 113 |   const openInNewTab = () => {
 114 |     console.log('🔗 Opening PayMob in new tab:', paymentData.iframeUrl);
 115 |     window.open(paymentData.iframeUrl, '_blank', 'width=800,height=700,scrollbars=yes,resizable=yes');
 116 |   };
 117 | 
 118 |   // Handle e-wallet payments (external redirect)
 119 |   if (paymentMethod === 'e-wallet') {
 120 |     if (!paymentData.checkoutUrl) {
 121 |       console.error('❌ Missing checkout URL for e-wallet payment');
 122 |       return (
 123 |         <Card>
 124 |           <CardContent className="p-8 text-center">
 125 |             <AlertCircle className="w-12 h-12 text-red-600 mx-auto mb-4" />
 126 |             <h3 className="text-lg font-semibold mb-2">خطأ في إعداد المحفظة الإلكترونية</h3>
 127 |             <p className="text-muted-foreground mb-4">
 128 |               لم يتم إنشاء رابط الدفع للمحفظة الإلكترونية بشكل صحيح
 129 |             </p>
 130 |             <Button onClick={() => window.location.reload()}>
 131 |               إعادة المحاولة
 132 |             </Button>
 133 |           </CardContent>
 134 |         </Card>
 135 |       );
 136 |     }
 137 | 
 138 |     // Show redirect message for e-wallets
 139 |     return (
 140 |       <Card>
 141 |         <CardHeader>
 142 |           <CardTitle className="flex items-center gap-2">
 143 |             <Smartphone className="w-5 h-5" />
 144 |             دفع بالمحفظة الإلكترونية
 145 |           </CardTitle>
 146 |         </CardHeader>
 147 |         <CardContent className="p-8 text-center">
 148 |           <div className="space-y-6">
 149 |             <div className="w-24 h-24 bg-green-100 rounded-full flex items-center justify-center mx-auto">
 150 |               <Smartphone className="w-12 h-12 text-green-600" />
 151 |             </div>
 152 |             
 153 |             <div>
 154 |               <h3 className="text-xl font-semibold mb-2">جاري التوجيه للدفع</h3>
 155 |               <p className="text-muted-foreground mb-4">
 156 |                 سيتم توجيهك إلى صفحة الدفع الآمنة لإتمام عملية الدفع بالمحفظة الإلكترونية
 157 |               </p>
 158 |               <p className="text-sm text-muted-foreground mb-6">
 159 |                 اختر محفظتك الإلكترونية (فودافون كاش، أورانج موني، إتصالات كاش) وأدخل رقم هاتفك
 160 |               </p>
 161 |             </div>
 162 | 
 163 |             <div className="space-y-3">
 164 |               <Button 
 165 |                 onClick={() => window.location.href = paymentData.checkoutUrl!}
 166 |                 className="w-full"
 167 |                 size="lg"
 168 |               >
 169 |                 <ExternalLink className="w-4 h-4 mr-2" />
 170 |                 متابعة الدفع
 171 |               </Button>
 172 |               
 173 |               <p className="text-xs text-muted-foreground">
 174 |                 إذا لم يتم التوجيه تلقائياً، اضغط على الزر أعلاه
 175 |               </p>
 176 |             </div>
 177 | 
 178 |             <div className="bg-blue-50 p-4 rounded-lg">
 179 |               <div className="flex items-center gap-2 text-blue-700 mb-2">
 180 |                 <Shield className="w-4 h-4" />
 181 |                 <span className="font-medium text-sm">معلومات مهمة</span>
 182 |               </div>
 183 |               <ul className="text-xs text-blue-600 space-y-1 text-right">
 184 |                 <li>• تأكد من وجود رصيد كافي في محفظتك</li>
 185 |                 <li>• ستحتاج إلى رقم الهاتف المسجل بالمحفظة</li>
 186 |                 <li>• ستصلك رسالة تأكيد على هاتفك</li>
 187 |                 <li>• العملية آمنة ومحمية بالكامل</li>
 188 |               </ul>
 189 |             </div>
 190 |           </div>
 191 |         </CardContent>
 192 |       </Card>
 193 |     );
 194 |   }
 195 | 
 196 |   // Validate iframe URL for credit cards
 197 |   if (!paymentData.iframeUrl) {
 198 |     console.error('❌ Missing iframe URL in payment data');
 199 |     return (
 200 |       <Card>
 201 |         <CardContent className="p-8 text-center">
 202 |           <AlertCircle className="w-12 h-12 text-red-600 mx-auto mb-4" />
 203 |           <h3 className="text-lg font-semibold mb-2">خطأ في إعداد الدفع</h3>
 204 |           <p className="text-muted-foreground mb-4">
 205 |             لم يتم إنشاء رابط نموذج الدفع بشكل صحيح
 206 |           </p>
 207 |           <Button onClick={() => window.location.reload()}>
 208 |             إعادة المحاولة
 209 |           </Button>
 210 |         </CardContent>
 211 |       </Card>
 212 |     );
 213 |   }
 214 | 
 215 |   return (
 216 |     <div className="space-y-6">
 217 |       <Card>
 218 |         <CardHeader>
 219 |           <CardTitle className="flex items-center gap-2">
 220 |             {paymentMethod === 'credit-card' ? (
 221 |               <CreditCard className="w-5 h-5" />
 222 |             ) : (
 223 |               <Smartphone className="w-5 h-5" />
 224 |             )}
 225 |             {paymentMethod === 'credit-card' ? 'دفع بالبطاقة الائتمانية' : 'دفع بالمحفظة الإلكترونية'}
 226 |           </CardTitle>
 227 |         </CardHeader>
 228 |         <CardContent>
 229 |           <div className="space-y-4">
 230 |             <div className="text-center">
 231 |               <p className="text-muted-foreground">
 232 |                 {paymentMethod === 'credit-card' 
 233 |                   ? 'أدخل بيانات بطاقتك الائتمانية في النموذج أدناه'
 234 |                   : 'اختر محفظتك الإلكترونية وأدخل رقم هاتفك'
 235 |                 }
 236 |               </p>
 237 |             </div>
 238 |             
 239 |             <div className="border rounded-lg overflow-hidden bg-white relative" style={{ minHeight: '700px', height: '700px' }}>
 240 |               {showFallback ? (
 241 |                 <div className="absolute inset-0 flex flex-col items-center justify-center bg-white p-8 text-center">
 242 |                   <AlertCircle className="w-12 h-12 text-yellow-600 mb-4" />
 243 |                   <h3 className="text-lg font-semibold mb-2">تأخر في تحميل نموذج الدفع</h3>
 244 |                   <p className="text-muted-foreground mb-4">
 245 |                     يمكنك فتح نموذج الدفع في نافذة جديدة للمتابعة
 246 |                   </p>
 247 |                   <div className="space-x-2 space-x-reverse">
 248 |                     <Button onClick={openInNewTab} className="mb-2">
 249 |                       <ExternalLink className="w-4 h-4 mr-2" />
 250 |                       فتح في نافذة جديدة
 251 |                     </Button>
 252 |                     <Button variant="outline" onClick={retryIframe}>
 253 |                       إعادة المحاولة
 254 |                     </Button>
 255 |                   </div>
 256 |                 </div>
 257 |               ) : (
 258 |                 <>
 259 |                   {!iframeLoaded && (
 260 |                     <div className="absolute inset-0 flex flex-col items-center justify-center bg-white z-10">
 261 |                       <Loader2 className="w-8 h-8 animate-spin text-primary mb-4" />
 262 |                       <p className="text-sm text-muted-foreground mb-2">جاري تحميل نموذج الدفع...</p>
 263 |                       <p className="text-xs text-muted-foreground">قد يستغرق هذا بضع ثوانٍ</p>
 264 |                     </div>
 265 |                   )}
 266 |                   
 267 |                   <iframe
 268 |                     key={`iframe-${paymentData.paymentId}`}
 269 |                     src={paymentData.iframeUrl}
 270 |                     width="100%"
 271 |                     height="700"
 272 |                     style={{ 
 273 |                       border: 'none', 
 274 |                       borderRadius: '8px', 
 275 |                       minHeight: '700px',
 276 |                       display: iframeLoaded ? 'block' : 'none'
 277 |                     }}
 278 |                     allowTransparency={true}
 279 |                     allowFullScreen={true}
 280 |                     allow="payment"
 281 |                     sandbox="allow-same-origin allow-scripts allow-forms allow-top-navigation allow-popups allow-popups-to-escape-sandbox"
 282 |                     onLoad={handleIframeLoad}
 283 |                     onError={handleIframeError}
 284 |                   />
 285 |                 </>
 286 |               )}
 287 |             </div>
 288 | 
 289 |             <div className="space-y-2">
 290 |               <div className="flex items-center gap-2 text-sm text-muted-foreground justify-center">
 291 |                 <Shield className="w-4 h-4" />
 292 |                 <span>هذا النموذج محمي ومشفر بواسطة PayMob</span>
 293 |               </div>
 294 |               
 295 |               <div className="text-center">
 296 |                 <Button
 297 |                   variant="outline"
 298 |                   size="sm"
 299 |                   onClick={openInNewTab}
 300 |                   className="text-xs"
 301 |                 >
 302 |                   <ExternalLink className="w-3 h-3 mr-1" />
 303 |                   فتح في نافذة جديدة
 304 |                 </Button>
 305 |               </div>
 306 |             </div>
 307 |           </div>
 308 |         </CardContent>
 309 |       </Card>
 310 | 
 311 |       {/* Payment Information */}
 312 |       <Card>
 313 |         <CardContent className="p-4">
 314 |           <div className="text-xs text-muted-foreground text-center space-y-1">
 315 |             <p>رقم العملية: {paymentData.paymentId}</p>
 316 |             <p>المبلغ: {paymentData.amount} {paymentData.currency}</p>
 317 |             <p>الطريقة: {paymentMethod === 'credit-card' ? 'بطاقة ائتمانية' : 'محفظة إلكترونية'}</p>
 318 |             <p className="text-green-600">✅ تم إنشاء رابط الدفع بنجاح</p>
 319 |           </div>
 320 |         </CardContent>
 321 |       </Card>
 322 |     </div>
 323 |   );
 324 | }
 325 | 
```

================================================================================

## 39. src\components\payment\PaymentMethodSelector.tsx

**File Type:** TSX
**File Name:** PaymentMethodSelector.tsx
**Full Path:** src\components\payment\PaymentMethodSelector.tsx

**File Size:** 9670 characters, 254 lines

### Content:

```tsx
   1 | // src/components/payment/PaymentMethodSelector.tsx - Enhanced Payment Method Selection
   2 | "use client";
   3 | 
   4 | import { motion } from "framer-motion";
   5 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
   6 | import { Button } from "@/components/ui/button";
   7 | import { Badge } from "@/components/ui/badge";
   8 | import { Course } from "@/lib/api/courses";
   9 | import { 
  10 |   CreditCard, 
  11 |   Smartphone, 
  12 |   Shield, 
  13 |   Clock, 
  14 |   CheckCircle,
  15 |   Loader2,
  16 |   Lock,
  17 |   Zap,
  18 |   Award,
  19 |   RefreshCw
  20 | } from "lucide-react";
  21 | import { cn } from "@/lib/utils";
  22 | 
  23 | type PaymentMethod = 'credit-card' | 'e-wallet';
  24 | 
  25 | interface PaymentMethodSelectorProps {
  26 |   selectedMethod: PaymentMethod;
  27 |   onMethodSelect: (method: PaymentMethod) => void;
  28 |   onProceed: () => void;
  29 |   isLoading: boolean;
  30 |   course: Course;
  31 | }
  32 | 
  33 | export function PaymentMethodSelector({
  34 |   selectedMethod,
  35 |   onMethodSelect,
  36 |   onProceed,
  37 |   isLoading,
  38 |   course
  39 | }: PaymentMethodSelectorProps) {
  40 |   
  41 |   const formatPrice = () => {
  42 |     if (!course.price) return 'مجاني';
  43 |     
  44 |     return new Intl.NumberFormat('ar-EG', {
  45 |       style: 'currency',
  46 |       currency: course.currency || 'EGP',
  47 |       minimumFractionDigits: 0,
  48 |       maximumFractionDigits: 2
  49 |     }).format(Number(course.price));
  50 |   };
  51 | 
  52 |   const paymentMethods = [
  53 |     {
  54 |       id: 'credit-card' as PaymentMethod,
  55 |       title: 'بطاقة ائتمان أو خصم',
  56 |       description: 'Visa, Mastercard, American Express',
  57 |       icon: CreditCard,
  58 |       features: ['تشفير SSL', 'دفع فوري', 'حماية المشتري'],
  59 |       processingTime: 'فوري',
  60 |       popular: true,
  61 |       color: 'blue'
  62 |     },
  63 |     {
  64 |       id: 'e-wallet' as PaymentMethod,
  65 |       title: 'محفظة إلكترونية',
  66 |       description: 'فودافون كاش، أورانج موني، إتصالات كاش',
  67 |       icon: Smartphone,
  68 |       features: ['بدون بطاقة', 'سهل وسريع', 'محلي'],
  69 |       processingTime: 'فوري',
  70 |       popular: false,
  71 |       color: 'green'
  72 |     }
  73 |   ];
  74 | 
  75 |   return (
  76 |     <div className="space-y-8">
  77 |       {/* Payment Methods */}
  78 |       <Card className="border-0 shadow-lg">
  79 |         <CardHeader className="pb-4">
  80 |           <CardTitle className="flex items-center gap-3 text-xl font-display">
  81 |             <div className="w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center">
  82 |               <Shield className="w-5 h-5 text-primary-600" />
  83 |             </div>
  84 |             اختر طريقة الدفع المناسبة
  85 |           </CardTitle>
  86 |           <p className="text-neutral-600 font-primary">
  87 |             جميع طرق الدفع محمية بأعلى معايير الأمان
  88 |           </p>
  89 |         </CardHeader>
  90 |         <CardContent className="space-y-4">
  91 |           {paymentMethods.map((method) => {
  92 |             const Icon = method.icon;
  93 |             const isSelected = selectedMethod === method.id;
  94 |             
  95 |             return (
  96 |               <motion.div
  97 |                 key={method.id}
  98 |                 className={cn(
  99 |                   "relative border-2 rounded-xl p-6 cursor-pointer transition-all duration-200",
 100 |                   isSelected 
 101 |                     ? "border-primary-500 bg-primary-50 shadow-lg" 
 102 |                     : "border-neutral-200 bg-white hover:border-neutral-300 hover:shadow-md"
 103 |                 )}
 104 |                 onClick={() => onMethodSelect(method.id)}
 105 |                 whileHover={{ scale: 1.01 }}
 106 |                 whileTap={{ scale: 0.99 }}
 107 |               >
 108 |                 {method.popular && (
 109 |                   <Badge className="absolute -top-3 right-6 bg-gradient-to-r from-orange-500 to-red-500 text-black">
 110 |                     الأكثر استخداماً
 111 |                   </Badge>
 112 |                 )}
 113 |                 
 114 |                 <div className="flex items-start gap-4">
 115 |                   <div className={cn(
 116 |                     "p-4 rounded-xl transition-all duration-200",
 117 |                     isSelected 
 118 |                       ? method.color === 'blue' 
 119 |                         ? "bg-blue-500 text-black" 
 120 |                         : "bg-green-500 text-black"
 121 |                       : method.color === 'blue'
 122 |                         ? "bg-blue-100 text-blue-600"
 123 |                         : "bg-green-100 text-green-600"
 124 |                   )}>
 125 |                     <Icon className="w-7 h-7" />
 126 |                   </div>
 127 |                   
 128 |                   <div className="flex-1">
 129 |                     <div className="flex items-center gap-3 mb-2">
 130 |                       <h3 className="text-lg font-semibold font-display">{method.title}</h3>
 131 |                       {isSelected && (
 132 |                         <motion.div
 133 |                           initial={{ scale: 0 }}
 134 |                           animate={{ scale: 1 }}
 135 |                           className="w-6 h-6 bg-primary-500 rounded-full flex items-center justify-center"
 136 |                         >
 137 |                           <CheckCircle className="w-4 h-4 text-black" />
 138 |                         </motion.div>
 139 |                       )}
 140 |                     </div>
 141 |                     
 142 |                     <p className="text-neutral-600 font-primary mb-3">
 143 |                       {method.description}
 144 |                     </p>
 145 |                     
 146 |                     <div className="flex items-center gap-4 mb-3">
 147 |                       <div className="flex items-center gap-1 text-sm text-neutral-500">
 148 |                         <Zap className="w-4 h-4" />
 149 |                         <span className="font-primary">{method.processingTime}</span>
 150 |                       </div>
 151 |                     </div>
 152 |                     
 153 |                     <div className="flex flex-wrap gap-2">
 154 |                       {method.features.map((feature, index) => (
 155 |                         <Badge 
 156 |                           key={index} 
 157 |                           variant="secondary" 
 158 |                           className="text-xs font-primary"
 159 |                         >
 160 |                           {feature}
 161 |                         </Badge>
 162 |                       ))}
 163 |                     </div>
 164 |                   </div>
 165 |                 </div>
 166 |               </motion.div>
 167 |             );
 168 |           })}
 169 |         </CardContent>
 170 |       </Card>
 171 | 
 172 |       {/* Security Assurance */}
 173 |       <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
 174 |         {[
 175 |           { icon: Shield, title: "تشفير SSL 256", desc: "حماية متقدمة", color: "green" },
 176 |           { icon: Lock, title: "PCI DSS معتمد", desc: "معايير دولية", color: "blue" },
 177 |           { icon: Clock, title: "وصول فوري", desc: "بعد الدفع مباشرة", color: "purple" },
 178 |           { icon: Award, title: "ضمان الاسترداد", desc: "30 يوم كاملة", color: "orange" }
 179 |         ].map((item, index) => (
 180 |           <motion.div
 181 |             key={index}
 182 |             className="p-4 bg-white rounded-lg border text-center hover:shadow-md transition-all duration-200"
 183 |             initial={{ opacity: 0, y: 20 }}
 184 |             animate={{ opacity: 1, y: 0 }}
 185 |             transition={{ delay: index * 0.1 }}
 186 |           >
 187 |             <div className={cn(
 188 |               "w-12 h-12 mx-auto mb-3 rounded-full flex items-center justify-center",
 189 |               item.color === "green" && "bg-green-100 text-green-600",
 190 |               item.color === "blue" && "bg-blue-100 text-blue-600",
 191 |               item.color === "purple" && "bg-purple-100 text-purple-600",
 192 |               item.color === "orange" && "bg-orange-100 text-orange-600"
 193 |             )}>
 194 |               <item.icon className="w-6 h-6" />
 195 |             </div>
 196 |             <p className="text-sm font-semibold font-display mb-1">{item.title}</p>
 197 |             <p className="text-xs text-neutral-600 font-primary">{item.desc}</p>
 198 |           </motion.div>
 199 |         ))}
 200 |       </div>
 201 | 
 202 |       {/* Proceed Section */}
 203 |       <Card className="border-0 shadow-lg bg-gradient-to-r from-neutral-50 to-white">
 204 |         <CardContent className="p-8">
 205 |           <div className="flex items-center justify-between mb-6">
 206 |             <div>
 207 |               <p className="text-neutral-600 font-primary mb-1">المبلغ الإجمالي</p>
 208 |               <p className="text-3xl font-bold text-primary-600 font-display">{formatPrice()}</p>
 209 |             </div>
 210 |             <div className="text-right">
 211 |               <p className="text-sm text-neutral-500 font-primary">شامل جميع الرسوم</p>
 212 |               <p className="text-sm text-green-600 font-primary">✓ بدون رسوم إضافية</p>
 213 |             </div>
 214 |           </div>
 215 |           
 216 |           <Button 
 217 |             onClick={onProceed}
 218 |             disabled={isLoading}
 219 |             className="w-full h-14 text-lg font-semibold"
 220 |             size="lg"
 221 |           >
 222 |             {isLoading ? (
 223 |               <>
 224 |                 <RefreshCw className="w-5 h-5 animate-spin ml-2" />
 225 |                 جاري التحضير...
 226 |               </>
 227 |             ) : (
 228 |               <>
 229 |                 {selectedMethod === 'credit-card' ? (
 230 |                   <CreditCard className="w-5 h-5 ml-2" />
 231 |                 ) : (
 232 |                   <Smartphone className="w-5 h-5 ml-2" />
 233 |                 )}
 234 |                 متابعة إلى الدفع الآمن
 235 |               </>
 236 |             )}
 237 |           </Button>
 238 |           
 239 |           <div className="flex items-center justify-center gap-4 mt-4 text-xs text-neutral-500">
 240 |             <span className="font-primary">محمي بواسطة</span>
 241 |             <div className="flex items-center gap-2">
 242 |               <Shield className="w-3 h-3" />
 243 |               <span className="font-primary">SSL</span>
 244 |             </div>
 245 |             <div className="flex items-center gap-2">
 246 |               <Lock className="w-3 h-3" />
 247 |               <span className="font-primary">PCI DSS</span>
 248 |             </div>
 249 |           </div>
 250 |         </CardContent>
 251 |       </Card>
 252 |     </div>
 253 |   );
 254 | }
```

================================================================================

## 40. src\components\payment\PaymentResult.tsx

**File Type:** TSX
**File Name:** PaymentResult.tsx
**Full Path:** src\components\payment\PaymentResult.tsx

**File Size:** 22527 characters, 568 lines

### Content:

```tsx
   1 | // src/components/payment/PaymentResult.tsx - Payment Result with Celebrations
   2 | "use client";
   3 | 
   4 | import { useState, useEffect } from "react";
   5 | import { motion, AnimatePresence } from "framer-motion";
   6 | import { Card, CardContent } from "@/components/ui/card";
   7 | import { Button } from "@/components/ui/button";
   8 | import { Badge } from "@/components/ui/badge";
   9 | import { Course } from "@/lib/api/courses";
  10 | import { 
  11 |   CheckCircle, 
  12 |   XCircle, 
  13 |   AlertTriangle,
  14 |   Download,
  15 |   Share2,
  16 |   Play,
  17 |   RefreshCw,
  18 |   ArrowRight,
  19 |   Gift,
  20 |   Star,
  21 |   Trophy,
  22 |   Sparkles,
  23 |   Heart,
  24 |   Facebook,
  25 |   Twitter,
  26 |   Linkedin,
  27 |   Copy,
  28 |   Mail,
  29 |   MessageSquare
  30 | } from "lucide-react";
  31 | import { cn } from "@/lib/utils";
  32 | 
  33 | interface PaymentResultProps {
  34 |   type: 'success' | 'failure' | 'pending';
  35 |   course: Course;
  36 |   paymentId?: string;
  37 |   transactionId?: string;
  38 |   amount?: number;
  39 |   currency?: string;
  40 |   error?: string;
  41 |   onRetry?: () => void;
  42 |   onGoToCourse?: () => void;
  43 |   onDownloadReceipt?: () => void;
  44 | }
  45 | 
  46 | // Confetti component
  47 | const Confetti = () => {
  48 |   const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3'];
  49 |   
  50 |   return (
  51 |     <div className="fixed inset-0 pointer-events-none z-50">
  52 |       {Array.from({ length: 50 }).map((_, i) => (
  53 |         <motion.div
  54 |           key={i}
  55 |           className="absolute w-2 h-2 rounded-full"
  56 |           style={{
  57 |             backgroundColor: colors[Math.floor(Math.random() * colors.length)],
  58 |             left: `${Math.random() * 100}%`,
  59 |             top: '-10px'
  60 |           }}
  61 |           initial={{ y: -10, rotate: 0 }}
  62 |           animate={{ 
  63 |             y: window.innerHeight + 10, 
  64 |             rotate: 360,
  65 |             x: Math.random() * 200 - 100
  66 |           }}
  67 |           transition={{ 
  68 |             duration: Math.random() * 3 + 2,
  69 |             ease: "easeOut",
  70 |             delay: Math.random() * 2
  71 |           }}
  72 |         />
  73 |       ))}
  74 |     </div>
  75 |   );
  76 | };
  77 | 
  78 | export function PaymentResult({
  79 |   type,
  80 |   course,
  81 |   paymentId,
  82 |   transactionId,
  83 |   amount,
  84 |   currency = 'EGP',
  85 |   error,
  86 |   onRetry,
  87 |   onGoToCourse,
  88 |   onDownloadReceipt
  89 | }: PaymentResultProps) {
  90 |   const [showConfetti, setShowConfetti] = useState(false);
  91 |   const [showShareModal, setShowShareModal] = useState(false);
  92 |   const [copied, setCopied] = useState(false);
  93 | 
  94 |   useEffect(() => {
  95 |     if (type === 'success') {
  96 |       setShowConfetti(true);
  97 |       const timer = setTimeout(() => setShowConfetti(false), 5000);
  98 |       return () => clearTimeout(timer);
  99 |     }
 100 |   }, [type]);
 101 | 
 102 |   const formatAmount = () => {
 103 |     if (!amount) return '';
 104 |     return new Intl.NumberFormat('ar-EG', {
 105 |       style: 'currency',
 106 |       currency,
 107 |       minimumFractionDigits: 0,
 108 |       maximumFractionDigits: 2
 109 |     }).format(amount);
 110 |   };
 111 | 
 112 |   const handleShare = (platform: string) => {
 113 |     const shareText = `🎉 لقد أكملت دورة "${course.title}" بنجاح! انضم إلي في رحلة التعلم.`;
 114 |     const shareUrl = `${window.location.origin}/courses/${course.id}`;
 115 |     
 116 |     switch (platform) {
 117 |       case 'facebook':
 118 |         window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareText)}`);
 119 |         break;
 120 |       case 'twitter':
 121 |         window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`);
 122 |         break;
 123 |       case 'linkedin':
 124 |         window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}`);
 125 |         break;
 126 |       case 'copy':
 127 |         navigator.clipboard.writeText(`${shareText} ${shareUrl}`);
 128 |         setCopied(true);
 129 |         setTimeout(() => setCopied(false), 2000);
 130 |         break;
 131 |     }
 132 |     setShowShareModal(false);
 133 |   };
 134 | 
 135 |   if (type === 'success') {
 136 |     return (
 137 |       <>
 138 |         {showConfetti && <Confetti />}
 139 |         
 140 |         <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50 flex items-center justify-center p-4">
 141 |           <motion.div
 142 |             initial={{ scale: 0.8, opacity: 0 }}
 143 |             animate={{ scale: 1, opacity: 1 }}
 144 |             transition={{ type: "spring", stiffness: 300, damping: 25 }}
 145 |             className="w-full max-w-2xl"
 146 |           >
 147 |             <Card className="border-0 shadow-2xl overflow-hidden">
 148 |               {/* Success Header */}
 149 |               <div className="bg-gradient-to-r from-green-500 to-emerald-600 p-8 text-black text-center relative">
 150 |                 <motion.div
 151 |                   initial={{ scale: 0 }}
 152 |                   animate={{ scale: 1 }}
 153 |                   transition={{ delay: 0.2, type: "spring", stiffness: 400 }}
 154 |                   className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 backdrop-blur-sm"
 155 |                 >
 156 |                   <CheckCircle className="w-12 h-12" />
 157 |                 </motion.div>
 158 |                 
 159 |                 <motion.h1
 160 |                   initial={{ y: 20, opacity: 0 }}
 161 |                   animate={{ y: 0, opacity: 1 }}
 162 |                   transition={{ delay: 0.3 }}
 163 |                   className="text-3xl font-bold font-display mb-2"
 164 |                 >
 165 |                   🎉 تم الدفع بنجاح!
 166 |                 </motion.h1>
 167 |                 
 168 |                 <motion.p
 169 |                   initial={{ y: 20, opacity: 0 }}
 170 |                   animate={{ y: 0, opacity: 1 }}
 171 |                   transition={{ delay: 0.4 }}
 172 |                   className="text-black/90 text-lg font-primary"
 173 |                 >
 174 |                   مرحباً بك في رحلة التعلم الجديدة
 175 |                 </motion.p>
 176 | 
 177 |                 {/* Floating Elements */}
 178 |                 <motion.div
 179 |                   className="absolute top-4 right-4"
 180 |                   animate={{ rotate: 360, scale: [1, 1.2, 1] }}
 181 |                   transition={{ duration: 3, repeat: Infinity }}
 182 |                 >
 183 |                   <Sparkles className="w-6 h-6 text-yellow-300" />
 184 |                 </motion.div>
 185 |                 <motion.div
 186 |                   className="absolute bottom-4 left-4"
 187 |                   animate={{ rotate: -360, scale: [1, 1.1, 1] }}
 188 |                   transition={{ duration: 4, repeat: Infinity }}
 189 |                 >
 190 |                   <Trophy className="w-6 h-6 text-yellow-300" />
 191 |                 </motion.div>
 192 |               </div>
 193 | 
 194 |               <CardContent className="p-8 space-y-6">
 195 |                 {/* Course Info */}
 196 |                 <motion.div
 197 |                   initial={{ y: 30, opacity: 0 }}
 198 |                   animate={{ y: 0, opacity: 1 }}
 199 |                   transition={{ delay: 0.5 }}
 200 |                   className="text-center"
 201 |                 >
 202 |                   <div className="w-24 h-24 mx-auto mb-4 rounded-lg overflow-hidden shadow-lg">
 203 |                     <img 
 204 |                       src={course.thumbnailUrl} 
 205 |                       alt={course.title}
 206 |                       className="w-full h-full object-cover"
 207 |                       onError={(e) => {
 208 |                         (e.target as HTMLImageElement).src = '/placeholder-course.jpg';
 209 |                       }}
 210 |                     />
 211 |                   </div>
 212 |                   <h2 className="text-xl font-bold font-display mb-2">{course.title}</h2>
 213 |                   <p className="text-neutral-600 font-primary">
 214 |                     بواسطة {course.professor.name}
 215 |                   </p>
 216 |                 </motion.div>
 217 | 
 218 |                 {/* Payment Details */}
 219 |                 <motion.div
 220 |                   initial={{ y: 30, opacity: 0 }}
 221 |                   animate={{ y: 0, opacity: 1 }}
 222 |                   transition={{ delay: 0.6 }}
 223 |                   className="bg-neutral-50 rounded-lg p-4 space-y-2"
 224 |                 >
 225 |                   <div className="flex justify-between items-center">
 226 |                     <span className="text-neutral-600 font-primary">المبلغ المدفوع:</span>
 227 |                     <span className="font-bold text-green-600 font-display">{formatAmount()}</span>
 228 |                   </div>
 229 |                   {transactionId && (
 230 |                     <div className="flex justify-between items-center">
 231 |                       <span className="text-neutral-600 font-primary">رقم العملية:</span>
 232 |                       <span className="font-mono text-sm">{transactionId}</span>
 233 |                     </div>
 234 |                   )}
 235 |                   <div className="flex justify-between items-center">
 236 |                     <span className="text-neutral-600 font-primary">تاريخ الدفع:</span>
 237 |                     <span className="font-primary">{new Date().toLocaleDateString('ar-EG')}</span>
 238 |                   </div>
 239 |                 </motion.div>
 240 | 
 241 |                 {/* What's Next */}
 242 |                 <motion.div
 243 |                   initial={{ y: 30, opacity: 0 }}
 244 |                   animate={{ y: 0, opacity: 1 }}
 245 |                   transition={{ delay: 0.7 }}
 246 |                   className="bg-blue-50 rounded-lg p-4"
 247 |                 >
 248 |                   <h3 className="font-semibold text-blue-800 font-display mb-3 flex items-center gap-2">
 249 |                     <Gift className="w-5 h-5" />
 250 |                     ما ستحصل عليه الآن:
 251 |                   </h3>
 252 |                   <div className="space-y-2">
 253 |                     {[
 254 |                       'وصول فوري لجميع دروس الدورة',
 255 |                       'مواد تعليمية قابلة للتحميل',
 256 |                       'شهادة إتمام معتمدة',
 257 |                       'دعم فني مباشر'
 258 |                     ].map((item, index) => (
 259 |                       <motion.div
 260 |                         key={index}
 261 |                         initial={{ x: -20, opacity: 0 }}
 262 |                         animate={{ x: 0, opacity: 1 }}
 263 |                         transition={{ delay: 0.8 + index * 0.1 }}
 264 |                         className="flex items-center gap-2 text-blue-700"
 265 |                       >
 266 |                         <CheckCircle className="w-4 h-4" />
 267 |                         <span className="text-sm font-primary">{item}</span>
 268 |                       </motion.div>
 269 |                     ))}
 270 |                   </div>
 271 |                 </motion.div>
 272 | 
 273 |                 {/* Action Buttons */}
 274 |                 <motion.div
 275 |                   initial={{ y: 30, opacity: 0 }}
 276 |                   animate={{ y: 0, opacity: 1 }}
 277 |                   transition={{ delay: 0.9 }}
 278 |                   className="flex flex-col sm:flex-row gap-3"
 279 |                 >
 280 |                   <Button 
 281 |                     onClick={onGoToCourse}
 282 |                     className="flex-1 h-12 text-lg font-semibold"
 283 |                     size="lg"
 284 |                   >
 285 |                     <Play className="w-5 h-5 ml-2" />
 286 |                     ابدأ التعلم الآن
 287 |                   </Button>
 288 |                   
 289 |                   <Button 
 290 |                     variant="outline"
 291 |                     onClick={onDownloadReceipt}
 292 |                     className="h-12"
 293 |                   >
 294 |                     <Download className="w-5 h-5 ml-2" />
 295 |                     تحميل الإيصال
 296 |                   </Button>
 297 |                   
 298 |                   <Button 
 299 |                     variant="outline"
 300 |                     onClick={() => setShowShareModal(true)}
 301 |                     className="h-12"
 302 |                   >
 303 |                     <Share2 className="w-5 h-5 ml-2" />
 304 |                     مشاركة
 305 |                   </Button>
 306 |                 </motion.div>
 307 | 
 308 |                 {/* Motivational Message */}
 309 |                 <motion.div
 310 |                   initial={{ y: 30, opacity: 0 }}
 311 |                   animate={{ y: 0, opacity: 1 }}
 312 |                   transition={{ delay: 1 }}
 313 |                   className="text-center p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg"
 314 |                 >
 315 |                   <div className="flex items-center justify-center gap-2 mb-2">
 316 |                     <Heart className="w-5 h-5 text-pink-500" />
 317 |                     <Star className="w-5 h-5 text-yellow-500" />
 318 |                     <Heart className="w-5 h-5 text-pink-500" />
 319 |                   </div>
 320 |                   <p className="text-neutral-700 font-primary">
 321 |                     "كل خطوة في التعلم هي استثمار في مستقبلك. أحسنت الاختيار!"
 322 |                   </p>
 323 |                 </motion.div>
 324 |               </CardContent>
 325 |             </Card>
 326 |           </motion.div>
 327 |         </div>
 328 | 
 329 |         {/* Share Modal */}
 330 |         <AnimatePresence>
 331 |           {showShareModal && (
 332 |             <motion.div
 333 |               className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm"
 334 |               initial={{ opacity: 0 }}
 335 |               animate={{ opacity: 1 }}
 336 |               exit={{ opacity: 0 }}
 337 |               onClick={() => setShowShareModal(false)}
 338 |             >
 339 |               <motion.div
 340 |                 className="bg-white rounded-2xl p-6 max-w-md w-full mx-4"
 341 |                 initial={{ scale: 0.5, y: 50 }}
 342 |                 animate={{ scale: 1, y: 0 }}
 343 |                 exit={{ scale: 0.5, y: 50 }}
 344 |                 onClick={(e) => e.stopPropagation()}
 345 |               >
 346 |                 <div className="text-center mb-6">
 347 |                   <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
 348 |                     <Share2 className="w-8 h-8 text-black" />
 349 |                   </div>
 350 |                   <h3 className="text-xl font-bold text-neutral-900 font-display mb-2">
 351 |                     شارك إنجازك
 352 |                   </h3>
 353 |                   <p className="text-neutral-600 font-primary">
 354 |                     أخبر أصدقاءك عن رحلتك التعليمية الجديدة
 355 |                   </p>
 356 |                 </div>
 357 | 
 358 |                 <div className="grid grid-cols-2 gap-3 mb-6">
 359 |                   {[
 360 |                     { id: 'facebook', name: 'Facebook', icon: Facebook, color: 'bg-blue-600' },
 361 |                     { id: 'twitter', name: 'Twitter', icon: Twitter, color: 'bg-sky-500' },
 362 |                     { id: 'linkedin', name: 'LinkedIn', icon: Linkedin, color: 'bg-blue-700' },
 363 |                     { id: 'copy', name: 'نسخ الرابط', icon: Copy, color: 'bg-neutral-600' }
 364 |                   ].map((platform) => (
 365 |                     <Button
 366 |                       key={platform.id}
 367 |                       variant="outline"
 368 |                       onClick={() => handleShare(platform.id)}
 369 |                       className="flex items-center gap-2 p-4 h-auto"
 370 |                     >
 371 |                       <div className={cn("w-8 h-8 rounded-full flex items-center justify-center", platform.color)}>
 372 |                         <platform.icon className="w-4 h-4 text-black" />
 373 |                       </div>
 374 |                       <span className="font-primary">{platform.name}</span>
 375 |                     </Button>
 376 |                   ))}
 377 |                 </div>
 378 | 
 379 |                 {copied && (
 380 |                   <motion.div
 381 |                     initial={{ opacity: 0, y: 10 }}
 382 |                     animate={{ opacity: 1, y: 0 }}
 383 |                     className="text-center text-green-600 text-sm font-primary mb-4"
 384 |                   >
 385 |                     ✓ تم نسخ الرابط بنجاح
 386 |                   </motion.div>
 387 |                 )}
 388 | 
 389 |                 <Button
 390 |                   variant="ghost"
 391 |                   onClick={() => setShowShareModal(false)}
 392 |                   className="w-full"
 393 |                 >
 394 |                   إغلاق
 395 |                 </Button>
 396 |               </motion.div>
 397 |             </motion.div>
 398 |           )}
 399 |         </AnimatePresence>
 400 |       </>
 401 |     );
 402 |   }
 403 | 
 404 |   if (type === 'failure') {
 405 |     return (
 406 |       <div className="min-h-screen bg-gradient-to-br from-red-50 via-white to-orange-50 flex items-center justify-center p-4">
 407 |         <motion.div
 408 |           initial={{ scale: 0.8, opacity: 0 }}
 409 |           animate={{ scale: 1, opacity: 1 }}
 410 |           transition={{ type: "spring", stiffness: 300, damping: 25 }}
 411 |           className="w-full max-w-2xl"
 412 |         >
 413 |           <Card className="border-0 shadow-2xl overflow-hidden">
 414 |             {/* Error Header */}
 415 |             <div className="bg-gradient-to-r from-red-500 to-pink-600 p-8 text-black text-center">
 416 |               <motion.div
 417 |                 initial={{ scale: 0 }}
 418 |                 animate={{ scale: 1 }}
 419 |                 transition={{ delay: 0.2, type: "spring", stiffness: 400 }}
 420 |                 className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 backdrop-blur-sm"
 421 |               >
 422 |                 <XCircle className="w-12 h-12" />
 423 |               </motion.div>
 424 |               
 425 |               <h1 className="text-3xl font-bold font-display mb-2">
 426 |                 فشل في عملية الدفع
 427 |               </h1>
 428 |               <p className="text-black/90 text-lg font-primary">
 429 |                 لم نتمكن من إتمام عملية الدفع
 430 |               </p>
 431 |             </div>
 432 | 
 433 |             <CardContent className="p-8 space-y-6">
 434 |               {/* Error Details */}
 435 |               <div className="bg-red-50 border border-red-200 rounded-lg p-4">
 436 |                 <div className="flex items-start gap-3">
 437 |                   <AlertTriangle className="w-5 h-5 text-red-600 mt-0.5" />
 438 |                   <div>
 439 |                     <h3 className="font-semibold text-red-800 font-display mb-1">
 440 |                       سبب الفشل:
 441 |                     </h3>
 442 |                     <p className="text-red-700 font-primary">
 443 |                       {error || 'حدث خطأ غير متوقع أثناء معالجة عملية الدفع'}
 444 |                     </p>
 445 |                   </div>
 446 |                 </div>
 447 |               </div>
 448 | 
 449 |               {/* Course Info */}
 450 |               <div className="text-center">
 451 |                 <div className="w-24 h-24 mx-auto mb-4 rounded-lg overflow-hidden shadow-lg opacity-75">
 452 |                   <img 
 453 |                     src={course.thumbnailUrl} 
 454 |                     alt={course.title}
 455 |                     className="w-full h-full object-cover"
 456 |                     onError={(e) => {
 457 |                       (e.target as HTMLImageElement).src = '/placeholder-course.jpg';
 458 |                     }}
 459 |                   />
 460 |                 </div>
 461 |                 <h2 className="text-xl font-bold font-display mb-2">{course.title}</h2>
 462 |                 <p className="text-neutral-600 font-primary">
 463 |                   بواسطة {course.professor.name}
 464 |                 </p>
 465 |               </div>
 466 | 
 467 |               {/* What to do next */}
 468 |               <div className="bg-blue-50 rounded-lg p-4">
 469 |                 <h3 className="font-semibold text-blue-800 font-display mb-3">
 470 |                   ماذا يمكنك فعله الآن:
 471 |                 </h3>
 472 |                 <div className="space-y-2">
 473 |                   {[
 474 |                     'تحقق من بيانات البطاقة وحاول مرة أخرى',
 475 |                     'تأكد من وجود رصيد كافي في البطاقة',
 476 |                     'جرب طريقة دفع أخرى',
 477 |                     'تواصل مع البنك إذا استمرت المشكلة'
 478 |                   ].map((item, index) => (
 479 |                     <div key={index} className="flex items-center gap-2 text-blue-700">
 480 |                       <div className="w-2 h-2 bg-blue-500 rounded-full" />
 481 |                       <span className="text-sm font-primary">{item}</span>
 482 |                     </div>
 483 |                   ))}
 484 |                 </div>
 485 |               </div>
 486 | 
 487 |               {/* Action Buttons */}
 488 |               <div className="flex flex-col sm:flex-row gap-3">
 489 |                 <Button 
 490 |                   onClick={onRetry}
 491 |                   className="flex-1 h-12 text-lg font-semibold"
 492 |                   size="lg"
 493 |                 >
 494 |                   <RefreshCw className="w-5 h-5 ml-2" />
 495 |                   حاول مرة أخرى
 496 |                 </Button>
 497 |                 
 498 |                 <Button 
 499 |                   variant="outline"
 500 |                   onClick={() => window.history.back()}
 501 |                   className="h-12"
 502 |                 >
 503 |                   <ArrowRight className="w-5 h-5 ml-2" />
 504 |                   العودة للدورة
 505 |                 </Button>
 506 |               </div>
 507 | 
 508 |               {/* Support */}
 509 |               <div className="text-center p-4 bg-neutral-50 rounded-lg">
 510 |                 <p className="text-neutral-600 font-primary mb-2">
 511 |                   تحتاج مساعدة؟ فريق الدعم جاهز لمساعدتك
 512 |                 </p>
 513 |                 <Button variant="outline" size="sm">
 514 |                   <MessageSquare className="w-4 h-4 ml-2" />
 515 |                   تواصل مع الدعم
 516 |                 </Button>
 517 |               </div>
 518 |             </CardContent>
 519 |           </Card>
 520 |         </motion.div>
 521 |       </div>
 522 |     );
 523 |   }
 524 | 
 525 |   // Pending state
 526 |   return (
 527 |     <div className="min-h-screen bg-gradient-to-br from-yellow-50 via-white to-orange-50 flex items-center justify-center p-4">
 528 |       <motion.div
 529 |         initial={{ scale: 0.8, opacity: 0 }}
 530 |         animate={{ scale: 1, opacity: 1 }}
 531 |         transition={{ type: "spring", stiffness: 300, damping: 25 }}
 532 |         className="w-full max-w-2xl"
 533 |       >
 534 |         <Card className="border-0 shadow-2xl overflow-hidden">
 535 |           <div className="bg-gradient-to-r from-yellow-500 to-orange-600 p-8 text-black text-center">
 536 |             <motion.div
 537 |               className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 backdrop-blur-sm"
 538 |               animate={{ rotate: 360 }}
 539 |               transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
 540 |             >
 541 |               <RefreshCw className="w-12 h-12" />
 542 |             </motion.div>
 543 |             
 544 |             <h1 className="text-3xl font-bold font-display mb-2">
 545 |               جاري معالجة الدفع
 546 |             </h1>
 547 |             <p className="text-black/90 text-lg font-primary">
 548 |               يرجى الانتظار بينما نتحقق من عملية الدفع
 549 |             </p>
 550 |           </div>
 551 | 
 552 |           <CardContent className="p-8 text-center">
 553 |             <div className="space-y-4">
 554 |               <div className="flex items-center justify-center gap-2">
 555 |                 <div className="w-2 h-2 bg-yellow-500 rounded-full animate-bounce" />
 556 |                 <div className="w-2 h-2 bg-yellow-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
 557 |                 <div className="w-2 h-2 bg-yellow-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
 558 |               </div>
 559 |               <p className="text-neutral-600 font-primary">
 560 |                 لا تغلق هذه الصفحة حتى اكتمال العملية
 561 |               </p>
 562 |             </div>
 563 |           </CardContent>
 564 |         </Card>
 565 |       </motion.div>
 566 |     </div>
 567 |   );
 568 | }
```

================================================================================

## 41. src\components\payment\PaymentResultPage.tsx

**File Type:** TSX
**File Name:** PaymentResultPage.tsx
**Full Path:** src\components\payment\PaymentResultPage.tsx

**File Size:** 13227 characters, 386 lines

### Content:

```tsx
   1 | // src/components/payment/PaymentResultPage.tsx
   2 | 'use client';
   3 | 
   4 | import { useState, useEffect } from 'react';
   5 | import { useRouter } from 'next/navigation';
   6 | import Image from 'next/image';
   7 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   8 | import { Button } from '@/components/ui/button';
   9 | import { Badge } from '@/components/ui/badge';
  10 | import { Separator } from '@/components/ui/separator';
  11 | import { 
  12 |   CheckCircle, 
  13 |   XCircle, 
  14 |   Clock,
  15 |   BookOpen,
  16 |   ArrowLeft,
  17 |   RefreshCw,
  18 |   AlertCircle,
  19 |   ExternalLink,
  20 |   CreditCard
  21 | } from 'lucide-react';
  22 | import { CourseWithMetadata } from '@/types/course';
  23 | import { formatCoursePrice } from '@/lib/course-utils';
  24 | import { toast } from 'sonner';
  25 | 
  26 | interface PaymentResultPageProps {
  27 |   course: CourseWithMetadata;
  28 |   payment: {
  29 |     id: string;
  30 |     status: string;
  31 |     amount: number;
  32 |     currency: string;
  33 |     createdAt: Date;
  34 |     completedAt?: Date | null;
  35 |     failureReason?: string | null;
  36 |     paymobTransactionId?: number | null;
  37 |   };
  38 |   enrollment?: {
  39 |     id: string;
  40 |     enrolledAt: Date;
  41 |   } | null;
  42 |   resultStatus: 'success' | 'pending' | 'failed';
  43 |   user: {
  44 |     id: string;
  45 |     name: string;
  46 |     email: string;
  47 |   };
  48 | }
  49 | 
  50 | export default function PaymentResultPage({ 
  51 |   course, 
  52 |   payment, 
  53 |   enrollment, 
  54 |   resultStatus,
  55 |   user 
  56 | }: PaymentResultPageProps) {
  57 |   const router = useRouter();
  58 |   const [isRefreshing, setIsRefreshing] = useState(false);
  59 |   const [currentStatus, setCurrentStatus] = useState(resultStatus);
  60 | 
  61 |   // Auto-refresh for pending payments
  62 |   useEffect(() => {
  63 |     if (currentStatus === 'pending') {
  64 |       const interval = setInterval(async () => {
  65 |         await checkPaymentStatus();
  66 |       }, 10000); // Check every 10 seconds
  67 | 
  68 |       return () => clearInterval(interval);
  69 |     }
  70 |   }, [currentStatus]);
  71 | 
  72 |   const checkPaymentStatus = async () => {
  73 |     try {
  74 |       const response = await fetch(`/api/payments/${payment.id}/status`);
  75 |       const result = await response.json();
  76 | 
  77 |       if (result.success && result.data) {
  78 |         const newStatus = result.data.status;
  79 |         
  80 |         if (newStatus === 'COMPLETED' && currentStatus !== 'success') {
  81 |           setCurrentStatus('success');
  82 |           toast.success('تم الدفع بنجاح! تم تسجيلك في الدورة.');
  83 |         } else if (newStatus === 'FAILED' && currentStatus !== 'failed') {
  84 |           setCurrentStatus('failed');
  85 |           toast.error('فشلت عملية الدفع.');
  86 |         }
  87 |       }
  88 |     } catch (error) {
  89 |       console.error('Failed to check payment status:', error);
  90 |     }
  91 |   };
  92 | 
  93 |   const handleRefresh = async () => {
  94 |     setIsRefreshing(true);
  95 |     await checkPaymentStatus();
  96 |     setIsRefreshing(false);
  97 |   };
  98 | 
  99 |   const handleGoToCourse = () => {
 100 |     router.push(`/courses/${course.id}`);
 101 |   };
 102 | 
 103 |   const handleRetryPayment = () => {
 104 |     router.push(`/courses/${course.id}/payment`);
 105 |   };
 106 | 
 107 |   const handleBackToCourses = () => {
 108 |     router.push('/courses');
 109 |   };
 110 | 
 111 |   const getStatusIcon = () => {
 112 |     switch (currentStatus) {
 113 |       case 'success':
 114 |         return <CheckCircle className="w-16 h-16 text-green-600" />;
 115 |       case 'failed':
 116 |         return <XCircle className="w-16 h-16 text-red-600" />;
 117 |       case 'pending':
 118 |       default:
 119 |         return <Clock className="w-16 h-16 text-yellow-600" />;
 120 |     }
 121 |   };
 122 | 
 123 |   const getStatusColor = () => {
 124 |     switch (currentStatus) {
 125 |       case 'success':
 126 |         return 'text-green-600';
 127 |       case 'failed':
 128 |         return 'text-red-600';
 129 |       case 'pending':
 130 |       default:
 131 |         return 'text-yellow-600';
 132 |     }
 133 |   };
 134 | 
 135 |   const getStatusTitle = () => {
 136 |     switch (currentStatus) {
 137 |       case 'success':
 138 |         return 'تم الدفع بنجاح!';
 139 |       case 'failed':
 140 |         return 'فشلت عملية الدفع';
 141 |       case 'pending':
 142 |       default:
 143 |         return 'عملية الدفع قيد المعالجة';
 144 |     }
 145 |   };
 146 | 
 147 |   const getStatusMessage = () => {
 148 |     switch (currentStatus) {
 149 |       case 'success':
 150 |         if (enrollment) {
 151 |           return 'تم تسجيلك في الدورة بنجاح. يمكنك الآن الوصول إلى جميع محتويات الدورة.';
 152 |         } else {
 153 |           return 'تم الدفع بنجاح. سيتم تسجيلك في الدورة خلال دقائق قليلة.';
 154 |         }
 155 |       case 'failed':
 156 |         return payment.failureReason || 'حدث خطأ أثناء معالجة عملية الدفع. يرجى المحاولة مرة أخرى أو التواصل مع الدعم الفني.';
 157 |       case 'pending':
 158 |       default:
 159 |         return 'يتم حالياً معالجة عملية الدفع. قد تستغرق هذه العملية بضع دقائق. سيتم تحديث الصفحة تلقائياً عند اكتمال المعالجة.';
 160 |     }
 161 |   };
 162 | 
 163 |   return (
 164 |     <div className="max-w-4xl mx-auto">
 165 |       {/* Header */}
 166 |       <div className="mb-8">
 167 |         <Button 
 168 |           variant="ghost" 
 169 |           onClick={handleBackToCourses}
 170 |           className="mb-4"
 171 |         >
 172 |           <ArrowLeft className="w-4 h-4 mr-2" />
 173 |           العودة إلى الدورات
 174 |         </Button>
 175 |         
 176 |         <h1 className="text-3xl font-bold text-gray-900 mb-2">
 177 |           نتيجة عملية الدفع
 178 |         </h1>
 179 |       </div>
 180 | 
 181 |       <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
 182 |         {/* Payment Status */}
 183 |         <div className="lg:col-span-2 space-y-6">
 184 |           {/* Status Card */}
 185 |           <Card className="text-center">
 186 |             <CardContent className="pt-8 pb-8">
 187 |               <div className="flex flex-col items-center space-y-4">
 188 |                 {getStatusIcon()}
 189 |                 
 190 |                 <div>
 191 |                   <h2 className={`text-2xl font-bold mb-2 ${getStatusColor()}`}>
 192 |                     {getStatusTitle()}
 193 |                   </h2>
 194 |                   <p className="text-gray-600 max-w-md">
 195 |                     {getStatusMessage()}
 196 |                   </p>
 197 |                 </div>
 198 | 
 199 |                 {/* Action Buttons */}
 200 |                 <div className="flex gap-4 mt-6">
 201 |                   {currentStatus === 'success' && (
 202 |                     <Button 
 203 |                       onClick={handleGoToCourse}
 204 |                       size="lg"
 205 |                       className="flex items-center gap-2"
 206 |                     >
 207 |                       <BookOpen className="w-5 h-5" />
 208 |                       الوصول إلى الدورة
 209 |                     </Button>
 210 |                   )}
 211 |                   
 212 |                   {currentStatus === 'failed' && (
 213 |                     <Button 
 214 |                       onClick={handleRetryPayment}
 215 |                       size="lg"
 216 |                       className="flex items-center gap-2"
 217 |                     >
 218 |                       <CreditCard className="w-5 h-5" />
 219 |                       إعادة المحاولة
 220 |                     </Button>
 221 |                   )}
 222 |                   
 223 |                   {currentStatus === 'pending' && (
 224 |                     <Button 
 225 |                       onClick={handleRefresh}
 226 |                       disabled={isRefreshing}
 227 |                       variant="outline"
 228 |                       size="lg"
 229 |                       className="flex items-center gap-2"
 230 |                     >
 231 |                       <RefreshCw className={`w-5 h-5 ${isRefreshing ? 'animate-spin' : ''}`} />
 232 |                       تحديث الحالة
 233 |                     </Button>
 234 |                   )}
 235 |                 </div>
 236 |               </div>
 237 |             </CardContent>
 238 |           </Card>
 239 | 
 240 |           {/* Course Info */}
 241 |           <Card>
 242 |             <CardHeader>
 243 |               <CardTitle className="flex items-center gap-2">
 244 |                 <BookOpen className="w-5 h-5" />
 245 |                 تفاصيل الدورة
 246 |               </CardTitle>
 247 |             </CardHeader>
 248 |             <CardContent>
 249 |               <div className="flex gap-4">
 250 |                 <div className="relative w-32 h-20 flex-shrink-0 rounded-lg overflow-hidden">
 251 |                   <Image
 252 |                     src={course.thumbnailUrl}
 253 |                     alt={course.title}
 254 |                     fill
 255 |                     className="object-cover"
 256 |                     sizes="128px"
 257 |                   />
 258 |                 </div>
 259 |                 
 260 |                 <div className="flex-1">
 261 |                   <h3 className="font-bold text-lg mb-2">{course.title}</h3>
 262 |                   <p className="text-gray-600 text-sm line-clamp-2 mb-3">
 263 |                     {course.description}
 264 |                   </p>
 265 |                   
 266 |                   <div className="flex items-center gap-4 text-sm text-gray-500">
 267 |                     <span>الأستاذ: {course.professor.name}</span>
 268 |                     <span>{course.lessonCount} درس</span>
 269 |                     <span>{course.enrollmentCount} ملتحق</span>
 270 |                   </div>
 271 |                 </div>
 272 |               </div>
 273 |             </CardContent>
 274 |           </Card>
 275 | 
 276 |           {/* Support Info */}
 277 |           {(currentStatus === 'failed' || currentStatus === 'pending') && (
 278 |             <Card className="border-blue-200 bg-blue-50">
 279 |               <CardContent className="pt-6">
 280 |                 <div className="flex items-start gap-3">
 281 |                   <AlertCircle className="w-6 h-6 text-blue-600 flex-shrink-0 mt-1" />
 282 |                   <div>
 283 |                     <h4 className="font-semibold text-blue-900 mb-2">
 284 |                       تحتاج مساعدة؟
 285 |                     </h4>
 286 |                     <p className="text-blue-800 text-sm mb-3">
 287 |                       إذا كنت تواجه مشاكل في عملية الدفع أو لديك أي استفسارات، 
 288 |                       يمكنك التواصل مع فريق الدعم الفني.
 289 |                     </p>
 290 |                     <Button variant="outline" size="sm" className="text-blue-700 border-blue-300">
 291 |                       <ExternalLink className="w-4 h-4 mr-2" />
 292 |                       التواصل مع الدعم
 293 |                     </Button>
 294 |                   </div>
 295 |                 </div>
 296 |               </CardContent>
 297 |             </Card>
 298 |           )}
 299 |         </div>
 300 | 
 301 |         {/* Payment Summary */}
 302 |         <div className="space-y-6">
 303 |           {/* Payment Details */}
 304 |           <Card>
 305 |             <CardHeader>
 306 |               <CardTitle className="text-lg">تفاصيل الدفع</CardTitle>
 307 |             </CardHeader>
 308 |             <CardContent className="space-y-4">
 309 |               <div className="flex justify-between items-center">
 310 |                 <span className="text-gray-600">المبلغ</span>
 311 |                 <span className="font-semibold">
 312 |                   {formatCoursePrice(payment.amount, payment.currency)}
 313 |                 </span>
 314 |               </div>
 315 |               
 316 |               <div className="flex justify-between items-center">
 317 |                 <span className="text-gray-600">الحالة</span>
 318 |                 <Badge 
 319 |                   variant={currentStatus === 'success' ? 'default' : 
 320 |                           currentStatus === 'failed' ? 'destructive' : 'secondary'}
 321 |                 >
 322 |                   {currentStatus === 'success' ? 'مكتمل' :
 323 |                    currentStatus === 'failed' ? 'فاشل' : 'قيد المعالجة'}
 324 |                 </Badge>
 325 |               </div>
 326 |               
 327 |               <div className="flex justify-between items-center">
 328 |                 <span className="text-gray-600">تاريخ الإنشاء</span>
 329 |                 <span className="text-sm">
 330 |                   {new Date(payment.createdAt).toLocaleDateString('ar-EG')}
 331 |                 </span>
 332 |               </div>
 333 |               
 334 |               {payment.completedAt && (
 335 |                 <div className="flex justify-between items-center">
 336 |                   <span className="text-gray-600">تاريخ الإكمال</span>
 337 |                   <span className="text-sm">
 338 |                     {new Date(payment.completedAt).toLocaleDateString('ar-EG')}
 339 |                   </span>
 340 |                 </div>
 341 |               )}
 342 |               
 343 |               {payment.paymobTransactionId && (
 344 |                 <div className="flex justify-between items-center">
 345 |                   <span className="text-gray-600">رقم المعاملة</span>
 346 |                   <span className="text-sm font-mono">
 347 |                     {payment.paymobTransactionId}
 348 |                   </span>
 349 |                 </div>
 350 |               )}
 351 |               
 352 |               <Separator />
 353 |               
 354 |               <div className="flex justify-between items-center text-lg font-bold">
 355 |                 <span>المجموع</span>
 356 |                 <span className="text-primary">
 357 |                   {formatCoursePrice(payment.amount, payment.currency)}
 358 |                 </span>
 359 |               </div>
 360 |             </CardContent>
 361 |           </Card>
 362 | 
 363 |           {/* Enrollment Status */}
 364 |           {enrollment && (
 365 |             <Card className="border-green-200 bg-green-50">
 366 |               <CardHeader>
 367 |                 <CardTitle className="text-lg text-green-800">
 368 |                   حالة التسجيل
 369 |                 </CardTitle>
 370 |               </CardHeader>
 371 |               <CardContent>
 372 |                 <div className="flex items-center gap-2 text-green-700">
 373 |                   <CheckCircle className="w-5 h-5" />
 374 |                   <span>مسجل في الدورة</span>
 375 |                 </div>
 376 |                 <p className="text-sm text-green-600 mt-2">
 377 |                   تم التسجيل في {new Date(enrollment.enrolledAt).toLocaleDateString('ar-EG')}
 378 |                 </p>
 379 |               </CardContent>
 380 |             </Card>
 381 |           )}
 382 |         </div>
 383 |       </div>
 384 |     </div>
 385 |   );
 386 | }
```

================================================================================

## 42. src\components\payment\PaymentStatus.tsx

**File Type:** TSX
**File Name:** PaymentStatus.tsx
**Full Path:** src\components\payment\PaymentStatus.tsx

**File Size:** 3483 characters, 117 lines

### Content:

```tsx
   1 | // src/components/payment/PaymentStatus.tsx
   2 | "use client";
   3 | 
   4 | import { Card, CardContent } from "@/components/ui/card";
   5 | import { Button } from "@/components/ui/button";
   6 | import { PaymentInitiationResponse } from "@/lib/api/payments";
   7 | import { 
   8 |   Loader2, 
   9 |   CheckCircle, 
  10 |   XCircle, 
  11 |   AlertCircle,
  12 |   RefreshCw
  13 | } from "lucide-react";
  14 | 
  15 | interface PaymentStatusProps {
  16 |   type: 'processing' | 'verifying' | 'success' | 'error';
  17 |   title: string;
  18 |   message: string;
  19 |   paymentData?: PaymentInitiationResponse | null;
  20 |   onRetry?: () => void;
  21 |   onCancel?: () => void;
  22 | }
  23 | 
  24 | export function PaymentStatus({ 
  25 |   type, 
  26 |   title, 
  27 |   message, 
  28 |   paymentData, 
  29 |   onRetry, 
  30 |   onCancel 
  31 | }: PaymentStatusProps) {
  32 |   
  33 |   const getIcon = () => {
  34 |     switch (type) {
  35 |       case 'processing':
  36 |       case 'verifying':
  37 |         return <Loader2 className="w-16 h-16 animate-spin text-primary" />;
  38 |       case 'success':
  39 |         return <CheckCircle className="w-16 h-16 text-green-600" />;
  40 |       case 'error':
  41 |         return <XCircle className="w-16 h-16 text-red-600" />;
  42 |       default:
  43 |         return <AlertCircle className="w-16 h-16 text-yellow-600" />;
  44 |     }
  45 |   };
  46 | 
  47 |   const getTextColor = () => {
  48 |     switch (type) {
  49 |       case 'success':
  50 |         return 'text-green-600';
  51 |       case 'error':
  52 |         return 'text-red-600';
  53 |       case 'processing':
  54 |       case 'verifying':
  55 |         return 'text-primary';
  56 |       default:
  57 |         return 'text-yellow-600';
  58 |     }
  59 |   };
  60 | 
  61 |   return (
  62 |     <Card>
  63 |       <CardContent className="text-center py-12">
  64 |         <div className="mb-6">
  65 |           {getIcon()}
  66 |         </div>
  67 |         
  68 |         <h2 className={`text-2xl font-bold mb-4 ${getTextColor()}`}>
  69 |           {title}
  70 |         </h2>
  71 |         
  72 |         <p className="text-muted-foreground mb-8 max-w-md mx-auto">
  73 |           {message}
  74 |         </p>
  75 | 
  76 |         {/* Payment Information */}
  77 |         {paymentData && (
  78 |           <div className="bg-muted/50 rounded-lg p-4 mb-6 text-sm">
  79 |             <div className="space-y-1 text-muted-foreground">
  80 |               <p>رقم العملية: {paymentData.paymentId}</p>
  81 |               <p>المبلغ: {paymentData.amount} {paymentData.currency}</p>
  82 |             </div>
  83 |           </div>
  84 |         )}
  85 | 
  86 |         {/* Action Buttons */}
  87 |         {type === 'error' && (
  88 |           <div className="flex gap-3 justify-center">
  89 |             {onRetry && (
  90 |               <Button onClick={onRetry} size="lg">
  91 |                 <RefreshCw className="w-5 h-5 mr-2" />
  92 |                 حاول مرة أخرى
  93 |               </Button>
  94 |             )}
  95 |             {onCancel && (
  96 |               <Button variant="outline" onClick={onCancel} size="lg">
  97 |                 إلغاء
  98 |               </Button>
  99 |             )}
 100 |           </div>
 101 |         )}
 102 | 
 103 |         {/* Loading indicators */}
 104 |         {(type === 'processing' || type === 'verifying') && (
 105 |           <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground">
 106 |             <div className="flex space-x-1">
 107 |               <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
 108 |               <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
 109 |               <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
 110 |             </div>
 111 |             <span>يرجى عدم إغلاق هذه الصفحة</span>
 112 |           </div>
 113 |         )}
 114 |       </CardContent>
 115 |     </Card>
 116 |   );
 117 | }
```

================================================================================

## 43. src\components\professor\EarningsReport.tsx

**File Type:** TSX
**File Name:** EarningsReport.tsx
**Full Path:** src\components\professor\EarningsReport.tsx

**File Size:** 3018 characters, 93 lines

### Content:

```tsx
   1 | // src/components/professor/EarningsReport.tsx
   2 | 'use client';
   3 | 
   4 | import { Button } from '@/components/ui/button';
   5 | import { Download, Wallet } from 'lucide-react';
   6 | import { useEarningsReport } from '@/hooks/useEarningsReport';
   7 | import { EarningsSummaryCards } from './earnings-report/EarningsSummaryCards';
   8 | import { TopEarningCourses } from './earnings-report/TopEarningCourses';
   9 | import { RecentTransactions } from './earnings-report/RecentTransactions';
  10 | import { MonthlyBreakdown } from './earnings-report/MonthlyBreakdown';
  11 | import { LoadingState } from './earnings-report/LoadingState';
  12 | 
  13 | export function EarningsReport() {
  14 |   const {
  15 |     earningsData,
  16 |     isLoading,
  17 |     selectedPeriod,
  18 |     setSelectedPeriod,
  19 |     exportReport
  20 |   } = useEarningsReport();
  21 | 
  22 |   if (isLoading) {
  23 |     return <LoadingState />;
  24 |   }
  25 | 
  26 |   if (!earningsData) {
  27 |     return (
  28 |       <div className="text-center py-8">
  29 |         <p className="text-muted-foreground">فشل في تحميل بيانات الأرباح</p>
  30 |       </div>
  31 |     );
  32 |   }
  33 | 
  34 |   return (
  35 |     <div className="space-y-6">
  36 |       {/* Header */}
  37 |       <div className="flex items-center justify-between">
  38 |         <div>
  39 |           <h2 className="text-2xl font-bold flex items-center gap-2">
  40 |             <Wallet className="h-6 w-6 text-green-600" />
  41 |             تقرير الأرباح
  42 |           </h2>
  43 |           <p className="text-muted-foreground">
  44 |             تتبع أرباحك ومبيعاتك بالتفصيل
  45 |           </p>
  46 |         </div>
  47 |         <div className="flex items-center gap-2">
  48 |           <div className="flex items-center border rounded-lg">
  49 |             <Button
  50 |               variant={selectedPeriod === 'week' ? 'primary' : 'ghost'}
  51 |               size="sm"
  52 |               onClick={() => setSelectedPeriod('week')}
  53 |             >
  54 |               أسبوع
  55 |             </Button>
  56 |             <Button
  57 |               variant={selectedPeriod === 'month' ? 'primary' : 'ghost'}
  58 |               size="sm"
  59 |               onClick={() => setSelectedPeriod('month')}
  60 |             >
  61 |               شهر
  62 |             </Button>
  63 |             <Button
  64 |               variant={selectedPeriod === 'year' ? 'primary' : 'ghost'}
  65 |               size="sm"
  66 |               onClick={() => setSelectedPeriod('year')}
  67 |             >
  68 |               سنة
  69 |             </Button>
  70 |           </div>
  71 |           <Button onClick={exportReport} variant="outline" size="sm">
  72 |             <Download className="h-4 w-4 mr-2" />
  73 |             تصدير التقرير
  74 |           </Button>
  75 |         </div>
  76 |       </div>
  77 | 
  78 |       {/* Earnings Summary */}
  79 |       <EarningsSummaryCards earningsData={earningsData} />
  80 | 
  81 |       <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
  82 |         {/* Top Earning Courses */}
  83 |         <TopEarningCourses courses={earningsData.topEarningCourses} />
  84 | 
  85 |         {/* Recent Transactions */}
  86 |         <RecentTransactions transactions={earningsData.recentTransactions} />
  87 |       </div>
  88 | 
  89 |       {/* Monthly Breakdown */}
  90 |       <MonthlyBreakdown monthlyData={earningsData.monthlyBreakdown} />
  91 |     </div>
  92 |   );
  93 | }
```

================================================================================

## 44. src\components\professor\earnings-report\RecentTransactions.tsx

**File Type:** TSX
**File Name:** RecentTransactions.tsx
**Full Path:** src\components\professor\earnings-report\RecentTransactions.tsx

**File Size:** 2249 characters, 54 lines

### Content:

```tsx
   1 | // src/components/professor/earnings-report/RecentTransactions.tsx
   2 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
   3 | import { Badge } from "@/components/ui/badge";
   4 | import { CreditCard, DollarSign } from "lucide-react";
   5 | import { formatCurrencyWithDecimals, formatDate, getTransactionStatusText, getTransactionStatusVariant } from "@/lib/earnings-utils";
   6 | import type { Transaction } from "@/hooks/useEarningsReport";
   7 | 
   8 | interface RecentTransactionsProps {
   9 |   transactions: Transaction[];
  10 | }
  11 | 
  12 | export function RecentTransactions({ transactions }: RecentTransactionsProps) {
  13 |   return (
  14 |     <Card>
  15 |       <CardHeader>
  16 |         <CardTitle className="flex items-center gap-2">
  17 |           <CreditCard className="h-5 w-5" />
  18 |           المعاملات الحديثة
  19 |         </CardTitle>
  20 |       </CardHeader>
  21 |       <CardContent>
  22 |         <div className="space-y-3">
  23 |           {transactions.map((transaction) => (
  24 |             <div key={transaction.id} className="flex items-center justify-between p-3 border rounded-lg">
  25 |               <div className="flex items-center gap-3">
  26 |                 <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
  27 |                   <DollarSign className="h-5 w-5 text-blue-600" />
  28 |                 </div>
  29 |                 <div>
  30 |                   <p className="font-medium text-sm">{transaction.studentName}</p>
  31 |                   <p className="text-xs text-muted-foreground truncate">{transaction.courseName}</p>
  32 |                   <p className="text-xs text-muted-foreground">
  33 |                     {formatDate(transaction.date)}
  34 |                   </p>
  35 |                 </div>
  36 |               </div>
  37 |               <div className="text-right">
  38 |                 <p className="font-bold text-green-600">
  39 |                   {formatCurrencyWithDecimals(transaction.amount)}
  40 |                 </p>
  41 |                 <Badge 
  42 |                   variant={getTransactionStatusVariant(transaction.status)}
  43 |                   className="text-xs"
  44 |                 >
  45 |                   {getTransactionStatusText(transaction.status)}
  46 |                 </Badge>
  47 |               </div>
  48 |             </div>
  49 |           ))}
  50 |         </div>
  51 |       </CardContent>
  52 |     </Card>
  53 |   );
  54 | }
```

================================================================================

## 45. src\components\shared\PaymentStatusBadge.tsx

**File Type:** TSX
**File Name:** PaymentStatusBadge.tsx
**Full Path:** src\components\shared\PaymentStatusBadge.tsx

**File Size:** 1503 characters, 58 lines

### Content:

```tsx
   1 | // src/components/shared/PaymentStatusBadge.tsx
   2 | 
   3 | import { Badge } from '@/components/ui/badge';
   4 | import { CheckCircle, XCircle, Clock } from 'lucide-react';
   5 | 
   6 | interface PaymentStatusBadgeProps {
   7 |   status: string;
   8 | }
   9 | 
  10 | /**
  11 |  * A reusable component to display a styled badge for payment status.
  12 |  */
  13 | export function PaymentStatusBadge({ status }: PaymentStatusBadgeProps) {
  14 |   switch (status.toLowerCase()) {
  15 |     case 'completed':
  16 |       return (
  17 |         <Badge
  18 |           variant="outline"
  19 |           className="bg-green-100 text-green-800 border-green-200"
  20 |         >
  21 |           <CheckCircle className="h-3 w-3 mr-1" />
  22 |           مكتمل
  23 |         </Badge>
  24 |       );
  25 |     case 'pending':
  26 |       return (
  27 |         <Badge
  28 |           variant="outline"
  29 |           className="bg-yellow-100 text-yellow-800 border-yellow-200"
  30 |         >
  31 |           <Clock className="h-3 w-3 mr-1" />
  32 |           معلق
  33 |         </Badge>
  34 |       );
  35 |     case 'failed':
  36 |       return (
  37 |         <Badge
  38 |           variant="outline"
  39 |           className="bg-red-100 text-red-800 border-red-200"
  40 |         >
  41 |           <XCircle className="h-3 w-3 mr-1" />
  42 |           فاشل
  43 |         </Badge>
  44 |       );
  45 |     case 'cancelled':
  46 |       return (
  47 |         <Badge
  48 |           variant="outline"
  49 |           className="bg-gray-100 text-gray-800 border-gray-200"
  50 |         >
  51 |           <XCircle className="h-3 w-3 mr-1" />
  52 |           ملغي
  53 |         </Badge>
  54 |       );
  55 |     default:
  56 |       return <Badge variant="outline">غير محدد</Badge>;
  57 |   }
  58 | }
```

================================================================================

## 46. src\components\student\PaymentHistory.tsx

**File Type:** TSX
**File Name:** PaymentHistory.tsx
**Full Path:** src\components\student\PaymentHistory.tsx

**File Size:** 1783 characters, 56 lines

### Content:

```tsx
   1 | // src/components/student/PaymentHistory.tsx
   2 | 'use client';
   3 | 
   4 | import { usePaymentHistory } from '@/hooks/usePaymentHistory';
   5 | import { PaymentStatsCards } from './payment-history/PaymentStatsCards';
   6 | import { PaymentFilters } from './payment-history/PaymentFilters';
   7 | import { TransactionsList } from './payment-history/TransactionsList';
   8 | import { MonthlySpendingCard } from './payment-history/MonthlySpendingCard';
   9 | import { PaymentMethodsCard } from './payment-history/PaymentMethodsCard';
  10 | import { LoadingState } from './payment-history/LoadingState';
  11 | 
  12 | export function PaymentHistory() {
  13 |   const {
  14 |     stats,
  15 |     isLoading,
  16 |     searchTerm,
  17 |     setSearchTerm,
  18 |     statusFilter,
  19 |     setStatusFilter,
  20 |     dateFilter,
  21 |     setDateFilter,
  22 |     filteredTransactions,
  23 |     exportPaymentHistory
  24 |   } = usePaymentHistory();
  25 | 
  26 |   if (isLoading) {
  27 |     return <LoadingState />;
  28 |   }
  29 | 
  30 |   return (
  31 |     <div className="space-y-6">
  32 |       {stats && <PaymentStatsCards stats={stats} />}
  33 | 
  34 |       <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
  35 |         <div className="lg:col-span-2 space-y-6">
  36 |           <PaymentFilters
  37 |             searchTerm={searchTerm}
  38 |             setSearchTerm={setSearchTerm}
  39 |             statusFilter={statusFilter}
  40 |             setStatusFilter={setStatusFilter}
  41 |             dateFilter={dateFilter}
  42 |             setDateFilter={setDateFilter}
  43 |             onExport={exportPaymentHistory}
  44 |           />
  45 | 
  46 |           <TransactionsList transactions={filteredTransactions} />
  47 |         </div>
  48 | 
  49 |         <div className="space-y-6">
  50 |           {stats && <MonthlySpendingCard monthlySpending={stats.monthlySpending} />}
  51 |           {stats && <PaymentMethodsCard paymentMethods={stats.paymentMethods} />}
  52 |         </div>
  53 |       </div>
  54 |     </div>
  55 |   );
  56 | }
```

================================================================================

## 47. src\components\student\StudentDashboard.tsx

**File Type:** TSX
**File Name:** StudentDashboard.tsx
**Full Path:** src\components\student\StudentDashboard.tsx

**File Size:** 23353 characters, 619 lines

### Content:

```tsx
   1 | // src/components/student/StudentDashboard.tsx - Gamified Student Dashboard
   2 | "use client";
   3 | 
   4 | import { useState, useEffect, useCallback } from "react";
   5 | import { motion, AnimatePresence } from "framer-motion";
   6 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
   7 | import { Button } from "@/components/ui/button";
   8 | import { LoadingState } from "@/components/shared/LoadingState";
   9 | import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
  10 | import { Badge } from "@/components/ui/badge";
  11 | import { FadeInScroll } from "@/components/ui/micro-interactions";
  12 | import { useOptimizedMotion } from "@/hooks/useAnimations";
  13 | import {
  14 |   BookOpen,
  15 |   Award,
  16 |   Clock,
  17 |   Star,
  18 |   Target,
  19 |   Zap,
  20 |   Trophy,
  21 |   Crown,
  22 |   Activity,
  23 |   Eye,
  24 |   Users,
  25 |   Bell,
  26 |   Settings,
  27 |   RefreshCw,
  28 | } from "lucide-react";
  29 | import { EnrolledCourses } from "./EnrolledCourses";
  30 | import { PaymentHistory } from "./PaymentHistory";
  31 | import { RecommendedCourses } from "./RecommendedCourses";
  32 | import { StudentProgress } from "./StudentProgress";
  33 | import { StudentCertificates } from "./StudentCertificates";
  34 | 
  35 | // --- INTERFACES (Keep as is) ---
  36 | interface StudentStats {
  37 |   totalEnrolledCourses: number;
  38 |   completedCourses: number;
  39 |   inProgressCourses: number;
  40 |   totalWatchTime: number; // in minutes
  41 |   averageProgress: number;
  42 |   certificatesEarned: number;
  43 |   totalSpent: number;
  44 |   currentStreak: number;
  45 |   longestStreak: number;
  46 |   recentActivity: RecentActivity[];
  47 |   upcomingDeadlines: UpcomingDeadline[];
  48 |   achievements: Achievement[];
  49 |   // Gamification data
  50 |   currentXP: number;
  51 |   nextLevelXP: number;
  52 |   level: number;
  53 |   rank: string;
  54 |   totalPoints: number;
  55 |   monthlyRank: number;
  56 |   studyGoals: StudyGoal[];
  57 |   quickActions: QuickAction[];
  58 | }
  59 | 
  60 | interface RecentActivity {
  61 |   id: string;
  62 |   type:
  63 |     | "lesson_complete"
  64 |     | "course_enroll"
  65 |     | "certificate_earned"
  66 |     | "quiz_passed"
  67 |     | "achievement_unlocked"
  68 |     | "level_up";
  69 |   courseName: string;
  70 |   lessonName?: string;
  71 |   timestamp: Date;
  72 |   progress?: number;
  73 |   xpGained?: number;
  74 | }
  75 | 
  76 | interface UpcomingDeadline {
  77 |   id: string;
  78 |   courseName: string;
  79 |   title: string;
  80 |   dueDate: Date;
  81 |   type: "assignment" | "quiz" | "project";
  82 |   priority: "high" | "medium" | "low";
  83 | }
  84 | 
  85 | interface Achievement {
  86 |   id: string;
  87 |   title: string;
  88 |   description: string;
  89 |   icon: React.ElementType;
  90 |   earnedAt: Date;
  91 |   category: "completion" | "streak" | "engagement" | "excellence";
  92 |   rarity: "common" | "rare" | "epic" | "legendary";
  93 |   xpReward: number;
  94 | }
  95 | 
  96 | interface StudyGoal {
  97 |   id: string;
  98 |   title: string;
  99 |   description: string;
 100 |   targetValue: number;
 101 |   currentValue: number;
 102 |   unit: string;
 103 |   deadline: string;
 104 |   priority: "high" | "medium" | "low";
 105 |   category: "time" | "courses" | "skills" | "certificates";
 106 |   completed: boolean;
 107 | }
 108 | 
 109 | interface QuickAction {
 110 |   id: string;
 111 |   title: string;
 112 |   description: string;
 113 |   icon: React.ElementType;
 114 |   href: string;
 115 |   type: "course" | "lesson" | "certificate" | "goal";
 116 |   priority: number;
 117 | }
 118 | 
 119 | export function StudentDashboard() {
 120 |   const [stats, setStats] = useState<StudentStats | null>(null);
 121 |   const [isLoading, setIsLoading] = useState(true);
 122 |   const [activeTab, setActiveTab] = useState("overview");
 123 |   const [showLevelUpAnimation, setShowLevelUpAnimation] = useState(false);
 124 |   const [newAchievements, setNewAchievements] = useState<Achievement[]>([]);
 125 |   const [lastUpdate, setLastUpdate] = useState(new Date());
 126 |   const { shouldReduceMotion } = useOptimizedMotion();
 127 | 
 128 |   const fetchStudentStats = useCallback(async () => {
 129 |     try {
 130 |       // Ensure we don't fetch if already loading
 131 |       if (!isLoading) setIsLoading(true);
 132 | 
 133 |       const response = await fetch("/api/student/dashboard-stats");
 134 |       if (!response.ok) {
 135 |         throw new Error("Failed to fetch dashboard stats");
 136 |       }
 137 |       const data = await response.json();
 138 | 
 139 |       if (stats && data.level > stats.level) {
 140 |         setShowLevelUpAnimation(true);
 141 |         setTimeout(() => setShowLevelUpAnimation(false), 3000);
 142 |       }
 143 | 
 144 |       if (stats && data.achievements.length > stats.achievements.length) {
 145 |         const newAchievements = data.achievements.filter(
 146 |           (achievement: Achievement) =>
 147 |             !stats.achievements.some(
 148 |               (existing) => existing.id === achievement.id
 149 |             )
 150 |         );
 151 |         setNewAchievements(newAchievements);
 152 |         setTimeout(() => setNewAchievements([]), 5000);
 153 |       }
 154 | 
 155 |       setStats(data);
 156 |       setLastUpdate(new Date());
 157 |     } catch (error) {
 158 |       console.error("Failed to fetch student stats:", error);
 159 |       setStats(null); // Set stats to null on error
 160 |     } finally {
 161 |       setIsLoading(false);
 162 |     }
 163 |   }, [stats, isLoading]); // Add isLoading to dependencies
 164 | 
 165 |   useEffect(() => {
 166 |     fetchStudentStats();
 167 |     const interval = setInterval(fetchStudentStats, 120000);
 168 |     return () => clearInterval(interval);
 169 |   }, []); // Remove fetchStudentStats from here to prevent re-triggering
 170 | 
 171 |   const formatWatchTime = (minutes: number) => {
 172 |     const hours = Math.floor(minutes / 60);
 173 |     const mins = minutes % 60;
 174 |     return hours > 0 ? `${hours}س ${mins}د` : `${mins}د`;
 175 |   };
 176 | 
 177 |   const getRarityColor = (rarity: Achievement["rarity"]) => {
 178 |     switch (rarity) {
 179 |       case "common":
 180 |         return "text-neutral-600 bg-neutral-100 border-neutral-200";
 181 |       case "rare":
 182 |         return "text-blue-600 bg-blue-100 border-blue-200";
 183 |       case "epic":
 184 |         return "text-purple-600 bg-purple-100 border-purple-200";
 185 |       case "legendary":
 186 |         return "text-yellow-600 bg-yellow-100 border-yellow-200";
 187 |       default:
 188 |         return "text-neutral-600 bg-neutral-100 border-neutral-200";
 189 |     }
 190 |   };
 191 | 
 192 |   const getPriorityColor = (priority: "high" | "medium" | "low") => {
 193 |     switch (priority) {
 194 |       case "high":
 195 |         return "border-red-200 bg-red-50";
 196 |       case "medium":
 197 |         return "border-yellow-200 bg-yellow-50";
 198 |       case "low":
 199 |         return "border-green-200 bg-green-50";
 200 |       default:
 201 |         return "border-neutral-200 bg-neutral-50";
 202 |     }
 203 |   };
 204 | 
 205 |   const calculateXPProgress = () => {
 206 |     if (!stats) return 0;
 207 |     return ((stats.currentXP % 1000) / 1000) * 100;
 208 |   };
 209 | 
 210 |   // --- START OF THE FIX ---
 211 | 
 212 |   // 1. Loading State
 213 |   if (isLoading && !stats) {
 214 |     return (
 215 |       <LoadingState
 216 |         cardCount={8}
 217 |         gridCols="grid-cols-1 md:grid-cols-2 lg:grid-cols-4"
 218 |       />
 219 |     );
 220 |   }
 221 | 
 222 |   // 2. Error State
 223 |   if (!isLoading && !stats) {
 224 |     return (
 225 |       <div className="text-center py-12">
 226 |         <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
 227 |           <Trophy className="w-8 h-8 text-red-600" />
 228 |         </div>
 229 |         <h3 className="text-lg font-semibold text-neutral-900 font-display mb-2">
 230 |           خطأ في تحميل البيانات
 231 |         </h3>
 232 |         <p className="text-neutral-600 font-primary mb-4">
 233 |           لم نتمكن من تحميل بيانات لوحة التحكم
 234 |         </p>
 235 |         <Button onClick={fetchStudentStats}>
 236 |           <RefreshCw className="w-4 h-4 ml-2" />
 237 |           إعادة المحاولة
 238 |         </Button>
 239 |       </div>
 240 |     );
 241 |   }
 242 | 
 243 |   // 3. Render content only if stats is not null
 244 |   if (!stats) return null; // Or a more specific error component
 245 | 
 246 |   // --- END OF THE FIX ---
 247 | 
 248 |   return (
 249 |     <div className="space-y-8">
 250 |       {/* Level Up Animation */}
 251 |       <AnimatePresence>
 252 |         {showLevelUpAnimation && (
 253 |           <motion.div
 254 |             className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm"
 255 |             initial={{ opacity: 0 }}
 256 |             animate={{ opacity: 1 }}
 257 |             exit={{ opacity: 0 }}
 258 |           >
 259 |             <motion.div
 260 |               className="bg-white rounded-2xl p-8 text-center max-w-md mx-4"
 261 |               initial={{ scale: 0.5, y: 50 }}
 262 |               animate={{ scale: 1, y: 0 }}
 263 |               exit={{ scale: 0.5, y: 50 }}
 264 |               transition={{ type: "spring", stiffness: 300, damping: 25 }}
 265 |             >
 266 |               <motion.div
 267 |                 className="w-20 h-20 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center mx-auto mb-4"
 268 |                 animate={{ rotate: [0, 360] }}
 269 |                 transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
 270 |               >
 271 |                 <Crown className="w-10 h-10 text-black" />
 272 |               </motion.div>
 273 |               <h2 className="text-2xl font-bold text-neutral-900 font-display mb-2">
 274 |                 🎉 مستوى جديد!
 275 |               </h2>
 276 |               <p className="text-neutral-600 font-primary mb-4">
 277 |                 وصلت إلى المستوى {stats.level}
 278 |               </p>
 279 |               <Button onClick={() => setShowLevelUpAnimation(false)}>
 280 |                 متابعة التعلم
 281 |               </Button>
 282 |             </motion.div>
 283 |           </motion.div>
 284 |         )}
 285 |       </AnimatePresence>
 286 | 
 287 |       {/* New Achievement Notifications */}
 288 |       <AnimatePresence>
 289 |         {newAchievements.map((achievement) => (
 290 |           <motion.div
 291 |             key={achievement.id}
 292 |             className="fixed top-20 right-4 z-50 bg-gradient-to-r from-yellow-400 to-orange-500 text-black p-4 rounded-lg shadow-elevation-5 max-w-sm"
 293 |             initial={{ opacity: 0, x: 300, scale: 0.8 }}
 294 |             animate={{ opacity: 1, x: 0, scale: 1 }}
 295 |             exit={{ opacity: 0, x: 300, scale: 0.8 }}
 296 |             transition={{ type: "spring", stiffness: 400, damping: 25 }}
 297 |           >
 298 |             <div className="flex items-center gap-3">
 299 |               <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
 300 |                 <achievement.icon className="w-6 h-6" />
 301 |               </div>
 302 |               <div>
 303 |                 <h4 className="font-bold font-display">إنجاز جديد!</h4>
 304 |                 <p className="text-sm opacity-90 font-primary">
 305 |                   {achievement.title}
 306 |                 </p>
 307 |                 <p className="text-xs opacity-75 font-primary">
 308 |                   +{achievement.xpReward} XP
 309 |                 </p>
 310 |               </div>
 311 |             </div>
 312 |           </motion.div>
 313 |         ))}
 314 |       </AnimatePresence>
 315 | 
 316 |       {/* Enhanced Header */}
 317 |       <FadeInScroll>
 318 |         <div className="flex items-center justify-between">
 319 |           <div>
 320 |             <h1 className="text-3xl font-bold flex items-center gap-3 text-neutral-900 font-display">
 321 |               <div className="w-12 h-12 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-full flex items-center justify-center">
 322 |                 <Zap className="w-6 h-6 text-black" />
 323 |               </div>
 324 |               لوحة تحكم الملتحق
 325 |             </h1>
 326 |             <div className="flex items-center gap-4 mt-2">
 327 |               <p className="text-neutral-600 font-primary">
 328 |                 تتبع تقدمك وحقق أهدافك التعليمية
 329 |               </p>
 330 |               <div className="flex items-center gap-2 text-sm text-neutral-500">
 331 |                 <Activity className="w-4 h-4" />
 332 |                 <span className="font-primary">
 333 |                   آخر تحديث: {lastUpdate.toLocaleTimeString("ar-EG")}
 334 |                 </span>
 335 |               </div>
 336 |             </div>
 337 |           </div>
 338 | 
 339 |           <div className="flex items-center gap-3">
 340 |             {/* Level Badge */}
 341 |             <div className="text-center">
 342 |               <div className="relative">
 343 |                 <div className="w-16 h-16 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-full flex items-center justify-center mb-2">
 344 |                   <span className="text-xl font-bold text-black font-display">
 345 |                     {stats.level}
 346 |                   </span>
 347 |                 </div>
 348 |                 <motion.div
 349 |                   className="absolute inset-0 border-4 border-primary-300 rounded-full"
 350 |                   style={{
 351 |                     background: `conic-gradient(from 0deg, #10b981 ${calculateXPProgress()}%, transparent ${calculateXPProgress()}%)`,
 352 |                   }}
 353 |                   animate={{ rotate: 360 }}
 354 |                   transition={{ duration: 2, ease: "easeInOut" }}
 355 |                 />
 356 |               </div>
 357 |               <p className="text-xs text-neutral-600 font-primary">
 358 |                 {stats.rank}
 359 |               </p>
 360 |             </div>
 361 | 
 362 |             {/* Quick Actions */}
 363 |             <div className="flex items-center gap-2">
 364 |               <Button variant="outline" size="sm">
 365 |                 <Bell className="w-4 h-4" />
 366 |               </Button>
 367 |               <Button variant="outline" size="sm">
 368 |                 <Settings className="w-4 h-4" />
 369 |               </Button>
 370 |               <Button variant="outline" size="sm" onClick={fetchStudentStats}>
 371 |                 <RefreshCw className="w-4 h-4" />
 372 |               </Button>
 373 |             </div>
 374 |           </div>
 375 |         </div>
 376 |       </FadeInScroll>
 377 | 
 378 |       {/* XP Progress Bar */}
 379 |       <FadeInScroll>
 380 |         <Card className="overflow-hidden border-0 shadow-elevation-2">
 381 |           <div className="bg-gradient-to-r from-primary-500 to-secondary-500 p-6 text-black">
 382 |             <div className="flex items-center justify-between mb-4">
 383 |               <div>
 384 |                 <h3 className="text-lg font-bold font-display">
 385 |                   المستوى {stats.level ?? 0} •{" "}
 386 |                   {(stats.currentXP ?? 0).toLocaleString()} XP
 387 |                 </h3>
 388 |                 <p className="text-black/80 font-primary">
 389 |                   {(stats.nextLevelXP ?? 0) - (stats.currentXP ?? 0)} XP متبقية
 390 |                   للمستوى التالي
 391 |                 </p>
 392 |               </div>
 393 |               <div className="text-right">
 394 |                 <div className="text-2xl font-bold font-display">
 395 |                   #{stats.monthlyRank ?? 0}
 396 |                 </div>
 397 |                 <p className="text-black/80 text-sm font-primary">
 398 |                   ترتيبك الشهري
 399 |                 </p>
 400 |               </div>
 401 |             </div>
 402 | 
 403 |             <div className="w-full bg-white/20 rounded-full h-3 overflow-hidden">
 404 |               <motion.div
 405 |                 className="h-full bg-gradient-to-r from-yellow-300 to-yellow-500 rounded-full"
 406 |                 initial={{ width: 0 }}
 407 |                 animate={{ width: `${calculateXPProgress()}%` }}
 408 |                 transition={{ duration: 1, ease: "easeOut" }}
 409 |               />
 410 |             </div>
 411 |           </div>
 412 |         </Card>
 413 |       </FadeInScroll>
 414 | 
 415 |       {/* Quick Stats Cards */}
 416 |       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
 417 |         <Card className="border-l-4 border-l-blue-500">
 418 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 419 |             <CardTitle className="text-sm font-medium">
 420 |               الدورات المسجلة
 421 |             </CardTitle>
 422 |             <BookOpen className="h-4 w-4 text-blue-600" />
 423 |           </CardHeader>
 424 |           <CardContent>
 425 |             <div className="text-2xl font-bold text-blue-600">
 426 |               {stats.totalEnrolledCourses ?? 0}
 427 |             </div>
 428 |             <p className="text-xs text-muted-foreground">
 429 |               {stats.completedCourses} مكتملة • {stats.inProgressCourses} قيد
 430 |               التقدم
 431 |             </p>
 432 |           </CardContent>
 433 |         </Card>
 434 | 
 435 |         <Card className="border-l-4 border-l-green-500">
 436 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 437 |             <CardTitle className="text-sm font-medium">متوسط التقدم</CardTitle>
 438 |             <Target className="h-4 w-4 text-green-600" />
 439 |           </CardHeader>
 440 |           <CardContent>
 441 |             <div className="text-2xl font-bold text-green-600">
 442 |               {(stats.averageProgress ?? 0).toFixed(1)}%
 443 |             </div>
 444 |             <div className="w-full bg-muted rounded-full h-2 mt-2">
 445 |               <div
 446 |                 className="bg-green-600 h-2 rounded-full"
 447 |                 style={{ width: `${stats.averageProgress}%` }}
 448 |               ></div>
 449 |             </div>
 450 |           </CardContent>
 451 |         </Card>
 452 | 
 453 |         <Card className="border-l-4 border-l-purple-500">
 454 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 455 |             <CardTitle className="text-sm font-medium">وقت التعلم</CardTitle>
 456 |             <Clock className="h-4 w-4 text-purple-600" />
 457 |           </CardHeader>
 458 |           <CardContent>
 459 |             <div className="text-2xl font-bold text-purple-600">
 460 |               {formatWatchTime(stats.totalWatchTime)}
 461 |             </div>
 462 |             <p className="text-xs text-muted-foreground">إجمالي وقت المشاهدة</p>
 463 |           </CardContent>
 464 |         </Card>
 465 | 
 466 |         <Card className="border-l-4 border-l-orange-500">
 467 |           <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 468 |             <CardTitle className="text-sm font-medium">الشهادات</CardTitle>
 469 |             <Award className="h-4 w-4 text-orange-600" />
 470 |           </CardHeader>
 471 |           <CardContent>
 472 |             <div className="text-2xl font-bold text-orange-600">
 473 |               {stats.certificatesEarned ?? 0}
 474 |             </div>
 475 |             <p className="text-xs text-muted-foreground">شهادة مكتسبة</p>
 476 |           </CardContent>
 477 |         </Card>
 478 |       </div>
 479 | 
 480 |       {/* Main Content Tabs */}
 481 |       <Tabs
 482 |         value={activeTab}
 483 |         onValueChange={setActiveTab}
 484 |         className="space-y-6"
 485 |       >
 486 |         <TabsList className="grid w-full grid-cols-6">
 487 |           <TabsTrigger value="overview">نظرة عامة</TabsTrigger>
 488 |           <TabsTrigger value="courses">دوراتي</TabsTrigger>
 489 |           <TabsTrigger value="progress">التقدم</TabsTrigger>
 490 |           <TabsTrigger value="payments">المدفوعات</TabsTrigger>
 491 |           <TabsTrigger value="recommended">مقترحة</TabsTrigger>
 492 |           <TabsTrigger value="certificates">الشهادات</TabsTrigger>
 493 |         </TabsList>
 494 | 
 495 |         <TabsContent value="overview" className="space-y-6">
 496 |           <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
 497 |             {/* Recent Activity */}
 498 |             <Card>
 499 |               <CardHeader>
 500 |                 <CardTitle className="flex items-center gap-2">
 501 |                   <Eye className="h-5 w-5" />
 502 |                   النشاط الحديث
 503 |                 </CardTitle>
 504 |               </CardHeader>
 505 |               <CardContent>
 506 |                 <div className="space-y-4">
 507 |                   {stats.recentActivity.slice(0, 5).map((activity) => (
 508 |                     <div
 509 |                       key={activity.id}
 510 |                       className="flex items-center gap-3 p-3 border rounded-lg"
 511 |                     >
 512 |                       <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
 513 |                         {activity.type === "lesson_complete" && (
 514 |                           <BookOpen className="h-5 w-5 text-green-600" />
 515 |                         )}
 516 |                         {activity.type === "course_enroll" && (
 517 |                           <Users className="h-5 w-5 text-blue-600" />
 518 |                         )}
 519 |                         {activity.type === "certificate_earned" && (
 520 |                           <Award className="h-5 w-5 text-yellow-600" />
 521 |                         )}
 522 |                         {activity.type === "quiz_passed" && (
 523 |                           <Target className="h-5 w-5 text-purple-600" />
 524 |                         )}
 525 |                       </div>
 526 |                       <div className="flex-1">
 527 |                         <p className="font-medium text-sm">
 528 |                           {activity.type === "lesson_complete" &&
 529 |                             `أكملت درس: ${activity.lessonName}`}
 530 |                           {activity.type === "course_enroll" &&
 531 |                             `سجلت في دورة: ${activity.courseName}`}
 532 |                           {activity.type === "certificate_earned" &&
 533 |                             `حصلت على شهادة: ${activity.courseName}`}
 534 |                           {activity.type === "quiz_passed" &&
 535 |                             `نجحت في اختبار: ${activity.courseName}`}
 536 |                         </p>
 537 |                         <p className="text-xs text-muted-foreground">
 538 |                           {new Date(activity.timestamp).toLocaleDateString(
 539 |                             "ar-SA"
 540 |                           )}
 541 |                         </p>
 542 |                       </div>
 543 |                       {activity.progress && (
 544 |                         <div className="text-right">
 545 |                           <p className="text-sm font-medium text-primary">
 546 |                             {activity.progress}%
 547 |                           </p>
 548 |                         </div>
 549 |                       )}
 550 |                     </div>
 551 |                   ))}
 552 |                 </div>
 553 |               </CardContent>
 554 |             </Card>
 555 | 
 556 |             {/* Achievements */}
 557 |             <Card>
 558 |               <CardHeader>
 559 |                 <CardTitle className="flex items-center gap-2">
 560 |                   <Star className="h-5 w-5" />
 561 |                   الإنجازات الحديثة
 562 |                 </CardTitle>
 563 |               </CardHeader>
 564 |               <CardContent>
 565 |                 <div className="space-y-3">
 566 |                   {stats.achievements.slice(0, 4).map((achievement) => (
 567 |                     <div
 568 |                       key={achievement.id}
 569 |                       className="flex items-center gap-3 p-3 border rounded-lg"
 570 |                     >
 571 |                       <div className="w-10 h-10 rounded-full bg-yellow-100 flex items-center justify-center">
 572 |                         <Award className="h-5 w-5 text-yellow-600" />
 573 |                       </div>
 574 |                       <div className="flex-1">
 575 |                         <p className="font-medium text-sm">
 576 |                           {achievement.title}
 577 |                         </p>
 578 |                         <p className="text-xs text-muted-foreground">
 579 |                           {achievement.description}
 580 |                         </p>
 581 |                       </div>
 582 |                       <Badge variant="outline" className="text-xs">
 583 |                         {achievement.category === "completion" && "إكمال"}
 584 |                         {achievement.category === "streak" && "استمرارية"}
 585 |                         {achievement.category === "engagement" && "تفاعل"}
 586 |                         {achievement.category === "excellence" && "تميز"}
 587 |                       </Badge>
 588 |                     </div>
 589 |                   ))}
 590 |                 </div>
 591 |               </CardContent>
 592 |             </Card>
 593 |           </div>
 594 |         </TabsContent>
 595 | 
 596 |         <TabsContent value="courses" className="space-y-6">
 597 |           <EnrolledCourses />
 598 |         </TabsContent>
 599 | 
 600 |         <TabsContent value="progress" className="space-y-6">
 601 |           <StudentProgress />
 602 |         </TabsContent>
 603 | 
 604 |         <TabsContent value="payments" className="space-y-6">
 605 |           <PaymentHistory />
 606 |         </TabsContent>
 607 | 
 608 |         <TabsContent value="recommended" className="space-y-6">
 609 |           <RecommendedCourses />
 610 |         </TabsContent>
 611 | 
 612 |         <TabsContent value="certificates" className="space-y-6">
 613 |           <StudentCertificates />
 614 |         </TabsContent>
 615 |       </Tabs>
 616 |     </div>
 617 |   );
 618 | }
 619 | 
```

================================================================================

## 48. src\components\student\payment-history\LoadingState.tsx

**File Type:** TSX
**File Name:** LoadingState.tsx
**Full Path:** src\components\student\payment-history\LoadingState.tsx

**File Size:** 219 characters, 6 lines

### Content:

```tsx
   1 | // src/components/student/payment-history/LoadingState.tsx
   2 | import { LoadingState as SharedLoadingState } from '@/components/shared/LoadingState';
   3 | 
   4 | export function LoadingState() {
   5 |   return <SharedLoadingState />;
   6 | }
```

================================================================================

## 49. src\components\student\payment-history\MonthlySpendingCard.tsx

**File Type:** TSX
**File Name:** MonthlySpendingCard.tsx
**Full Path:** src\components\student\payment-history\MonthlySpendingCard.tsx

**File Size:** 1462 characters, 41 lines

### Content:

```tsx
   1 | // src/components/student/payment-history/MonthlySpendingCard.tsx
   2 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   3 | import { TrendingUp } from 'lucide-react';
   4 | import { formatCurrency } from '@/lib/payment-utils';
   5 | import type { MonthlySpending } from '@/hooks/usePaymentHistory';
   6 | 
   7 | interface MonthlySpendingCardProps {
   8 |   monthlySpending: MonthlySpending[];
   9 | }
  10 | 
  11 | export function MonthlySpendingCard({ monthlySpending }: MonthlySpendingCardProps) {
  12 |   return (
  13 |     <Card>
  14 |       <CardHeader>
  15 |         <CardTitle className="flex items-center gap-2">
  16 |           <TrendingUp className="h-5 w-5" />
  17 |           الإنفاق الشهري
  18 |         </CardTitle>
  19 |       </CardHeader>
  20 |       <CardContent>
  21 |         <div className="space-y-3">
  22 |           {monthlySpending.map((month, index) => (
  23 |             <div key={`${month.month}-${index}`} className="flex items-center justify-between p-3 border rounded-lg">
  24 |               <div>
  25 |                 <p className="font-medium">{month.month}</p>
  26 |                 <p className="text-sm text-muted-foreground">
  27 |                   {month.transactions} معاملة
  28 |                 </p>
  29 |               </div>
  30 |               <div className="text-right">
  31 |                 <p className="text-lg font-bold text-primary">
  32 |                   {formatCurrency(month.amount)}
  33 |                 </p>
  34 |               </div>
  35 |             </div>
  36 |           ))}
  37 |         </div>
  38 |       </CardContent>
  39 |     </Card>
  40 |   );
  41 | }
```

================================================================================

## 50. src\components\student\payment-history\PaymentFilters.tsx

**File Type:** TSX
**File Name:** PaymentFilters.tsx
**Full Path:** src\components\student\payment-history\PaymentFilters.tsx

**File Size:** 2444 characters, 84 lines

### Content:

```tsx
   1 | // src/components/student/payment-history/PaymentFilters.tsx
   2 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   3 | import { Download, Filter } from 'lucide-react';
   4 | import { SearchFilter } from '@/components/shared/SearchFilter';
   5 | import { SelectFilter } from '@/components/shared/SelectFilter';
   6 | import { ActionButton } from '@/components/shared/ActionButton';
   7 | 
   8 | interface PaymentFiltersProps {
   9 |   searchTerm: string;
  10 |   setSearchTerm: (term: string) => void;
  11 |   statusFilter: string;
  12 |   setStatusFilter: (status: string) => void;
  13 |   dateFilter: string;
  14 |   setDateFilter: (date: string) => void;
  15 |   onExport: () => void;
  16 | }
  17 | 
  18 | export function PaymentFilters({
  19 |   searchTerm,
  20 |   setSearchTerm,
  21 |   statusFilter,
  22 |   setStatusFilter,
  23 |   dateFilter,
  24 |   setDateFilter,
  25 |   onExport
  26 | }: PaymentFiltersProps) {
  27 |   const statusOptions = [
  28 |     { value: 'all', label: 'جميع الحالات' },
  29 |     { value: 'completed', label: 'مكتمل' },
  30 |     { value: 'pending', label: 'معلق' },
  31 |     { value: 'failed', label: 'فاشل' },
  32 |     { value: 'cancelled', label: 'ملغي' },
  33 |     { value: 'refunded', label: 'مسترد' }
  34 |   ];
  35 | 
  36 |   const dateOptions = [
  37 |     { value: 'all', label: 'جميع الفترات' },
  38 |     { value: 'week', label: 'آخر أسبوع' },
  39 |     { value: 'month', label: 'آخر شهر' },
  40 |     { value: 'quarter', label: 'آخر 3 أشهر' }
  41 |   ];
  42 | 
  43 |   return (
  44 |     <Card>
  45 |       <CardHeader>
  46 |         <CardTitle className="flex items-center gap-2">
  47 |           <Filter className="h-5 w-5" />
  48 |           البحث والتصفية
  49 |         </CardTitle>
  50 |       </CardHeader>
  51 |       <CardContent>
  52 |         <div className="flex flex-col md:flex-row gap-4">
  53 |           <SearchFilter
  54 |             value={searchTerm}
  55 |             onChange={setSearchTerm}
  56 |             placeholder="البحث بالدورة أو رقم المعاملة..."
  57 |             className="flex-1"
  58 |           />
  59 |           
  60 |           <SelectFilter
  61 |             value={statusFilter}
  62 |             onChange={setStatusFilter}
  63 |             options={statusOptions}
  64 |             placeholder="تصفية بالحالة"
  65 |           />
  66 | 
  67 |           <SelectFilter
  68 |             value={dateFilter}
  69 |             onChange={setDateFilter}
  70 |             options={dateOptions}
  71 |             placeholder="تصفية بالتاريخ"
  72 |           />
  73 | 
  74 |           <ActionButton
  75 |             text="تصدير"
  76 |             onClick={onExport}
  77 |             variant="outline"
  78 |             icon={Download}
  79 |           />
  80 |         </div>
  81 |       </CardContent>
  82 |     </Card>
  83 |   );
  84 | }
```

================================================================================

## 51. src\components\student\payment-history\PaymentMethodsCard.tsx

**File Type:** TSX
**File Name:** PaymentMethodsCard.tsx
**Full Path:** src\components\student\payment-history\PaymentMethodsCard.tsx

**File Size:** 1860 characters, 49 lines

### Content:

```tsx
   1 | // src/components/student/payment-history/PaymentMethodsCard.tsx
   2 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   3 | import { CreditCard } from 'lucide-react';
   4 | import { getPaymentMethodIcon, formatCurrency, formatPaymentMethod } from '@/lib/payment-utils';
   5 | import type { PaymentMethodStats } from '@/hooks/usePaymentHistory';
   6 | 
   7 | interface PaymentMethodsCardProps {
   8 |   paymentMethods: PaymentMethodStats[];
   9 | }
  10 | 
  11 | export function PaymentMethodsCard({ paymentMethods }: PaymentMethodsCardProps) {
  12 |   return (
  13 |     <Card>
  14 |       <CardHeader>
  15 |         <CardTitle className="flex items-center gap-2">
  16 |           <CreditCard className="h-5 w-5" />
  17 |           طرق الدفع
  18 |         </CardTitle>
  19 |       </CardHeader>
  20 |       <CardContent>
  21 |         <div className="space-y-3">
  22 |           {paymentMethods.map((method, index) => (
  23 |             <div key={`${method.method}-${index}`} className="flex items-center justify-between p-3 border rounded-lg">
  24 |               <div className="flex items-center gap-3">
  25 |                 {getPaymentMethodIcon(method.method)}
  26 |                 <div>
  27 |                   <p className="font-medium capitalize">
  28 |                     {formatPaymentMethod(method.method)}
  29 |                   </p>
  30 |                   <p className="text-sm text-muted-foreground">
  31 |                     {method.count} معاملة
  32 |                   </p>
  33 |                 </div>
  34 |               </div>
  35 |               <div className="text-right">
  36 |                 <p className="text-sm font-bold text-primary">
  37 |                   {method.percentage.toFixed(1)}%
  38 |                 </p>
  39 |                 <p className="text-xs text-muted-foreground">
  40 |                   {formatCurrency(method.totalAmount)}
  41 |                 </p>
  42 |               </div>
  43 |             </div>
  44 |           ))}
  45 |         </div>
  46 |       </CardContent>
  47 |     </Card>
  48 |   );
  49 | }
```

================================================================================

## 52. src\components\student\payment-history\PaymentStatsCards.tsx

**File Type:** TSX
**File Name:** PaymentStatsCards.tsx
**Full Path:** src\components\student\payment-history\PaymentStatsCards.tsx

**File Size:** 3016 characters, 76 lines

### Content:

```tsx
   1 | // src/components/student/payment-history/PaymentStatsCards.tsx
   2 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   3 | import { 
   4 |   DollarSign,
   5 |   CheckCircle,
   6 |   BarChart3,
   7 |   XCircle
   8 | } from 'lucide-react';
   9 | import { formatCurrency } from '@/lib/payment-utils';
  10 | import type { PaymentStats } from '@/hooks/usePaymentHistory';
  11 | 
  12 | interface PaymentStatsCardsProps {
  13 |   stats: PaymentStats;
  14 | }
  15 | 
  16 | export function PaymentStatsCards({ stats }: PaymentStatsCardsProps) {
  17 |   return (
  18 |     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
  19 |       <Card className="border-l-4 border-l-green-500">
  20 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  21 |           <CardTitle className="text-sm font-medium">إجمالي الإنفاق</CardTitle>
  22 |           <DollarSign className="h-4 w-4 text-green-600" />
  23 |         </CardHeader>
  24 |         <CardContent>
  25 |           <div className="text-2xl font-bold text-green-600">
  26 |             {formatCurrency(stats.totalSpent)}
  27 |           </div>
  28 |           <p className="text-xs text-muted-foreground">
  29 |             على {stats.totalTransactions} معاملة
  30 |           </p>
  31 |         </CardContent>
  32 |       </Card>
  33 | 
  34 |       <Card className="border-l-4 border-l-blue-500">
  35 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  36 |           <CardTitle className="text-sm font-medium">المعاملات الناجحة</CardTitle>
  37 |           <CheckCircle className="h-4 w-4 text-blue-600" />
  38 |         </CardHeader>
  39 |         <CardContent>
  40 |           <div className="text-2xl font-bold text-blue-600">{stats.successfulPayments}</div>
  41 |           <p className="text-xs text-muted-foreground">
  42 |             من أصل {stats.totalTransactions} معاملة
  43 |           </p>
  44 |         </CardContent>
  45 |       </Card>
  46 | 
  47 |       <Card className="border-l-4 border-l-purple-500">
  48 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  49 |           <CardTitle className="text-sm font-medium">متوسط قيمة الطلب</CardTitle>
  50 |           <BarChart3 className="h-4 w-4 text-purple-600" />
  51 |         </CardHeader>
  52 |         <CardContent>
  53 |           <div className="text-2xl font-bold text-purple-600">
  54 |             {formatCurrency(stats.averageOrderValue)}
  55 |           </div>
  56 |           <p className="text-xs text-muted-foreground">
  57 |             متوسط الإنفاق لكل دورة
  58 |           </p>
  59 |         </CardContent>
  60 |       </Card>
  61 | 
  62 |       <Card className="border-l-4 border-l-red-500">
  63 |         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
  64 |           <CardTitle className="text-sm font-medium">المعاملات الفاشلة</CardTitle>
  65 |           <XCircle className="h-4 w-4 text-red-600" />
  66 |         </CardHeader>
  67 |         <CardContent>
  68 |           <div className="text-2xl font-bold text-red-600">{stats.failedPayments}</div>
  69 |           <p className="text-xs text-muted-foreground">
  70 |             معاملة فاشلة
  71 |           </p>
  72 |         </CardContent>
  73 |       </Card>
  74 |     </div>
  75 |   );
  76 | }
```

================================================================================

## 53. src\components\student\payment-history\TransactionsList.tsx

**File Type:** TSX
**File Name:** TransactionsList.tsx
**Full Path:** src\components\student\payment-history\TransactionsList.tsx

**File Size:** 4329 characters, 112 lines

### Content:

```tsx
   1 | // src/components/student/payment-history/TransactionsList.tsx
   2 | import { useState } from 'react';
   3 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
   4 | import { Button } from '@/components/ui/button';
   5 | import { 
   6 |   CreditCard,
   7 |   Calendar,
   8 |   Eye
   9 | } from 'lucide-react';
  10 | import PaymentDetailsModal from '@/components/payment/PaymentDetailsModal';
  11 | import { 
  12 |   getStatusBadge, 
  13 |   getPaymentMethodIcon, 
  14 |   formatCurrency, 
  15 |   formatDateArabic, 
  16 |   formatPaymentMethod 
  17 | } from '@/lib/payment-utils';
  18 | import type { PaymentTransaction } from '@/hooks/usePaymentHistory';
  19 | 
  20 | interface TransactionsListProps {
  21 |   transactions: PaymentTransaction[];
  22 | }
  23 | 
  24 | export function TransactionsList({ transactions }: TransactionsListProps) {
  25 |   const [selectedPaymentId, setSelectedPaymentId] = useState<string | null>(null);
  26 |   const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  27 | 
  28 |   const handleViewDetails = (paymentId: string) => {
  29 |     setSelectedPaymentId(paymentId);
  30 |     setIsDetailsModalOpen(true);
  31 |   };
  32 | 
  33 |   return (
  34 |     <>
  35 |       <Card>
  36 |         <CardHeader>
  37 |           <CardTitle>سجل المدفوعات ({transactions.length})</CardTitle>
  38 |         </CardHeader>
  39 |         <CardContent>
  40 |           <div className="space-y-4">
  41 |             {transactions.map((transaction) => (
  42 |               <div key={transaction.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors">
  43 |                 <div className="flex items-center gap-4 flex-1">
  44 |                   <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center">
  45 |                     {getPaymentMethodIcon(transaction.paymentMethod)}
  46 |                   </div>
  47 |                   
  48 |                   <div className="flex-1 min-w-0">
  49 |                     <h3 className="font-semibold truncate">{transaction.courseName}</h3>
  50 |                     <p className="text-sm text-muted-foreground">
  51 |                       رقم المعاملة: {transaction.transactionId}
  52 |                     </p>
  53 |                     <div className="flex items-center gap-4 text-sm text-muted-foreground mt-1">
  54 |                       <div className="flex items-center gap-1">
  55 |                         <Calendar className="h-3 w-3" />
  56 |                         {formatDateArabic(transaction.createdAt)}
  57 |                       </div>
  58 |                       <div className="flex items-center gap-1">
  59 |                         {getPaymentMethodIcon(transaction.paymentMethod)}
  60 |                         <span className="capitalize">{formatPaymentMethod(transaction.paymentMethod)}</span>
  61 |                       </div>
  62 |                     </div>
  63 |                   </div>
  64 |                 </div>
  65 | 
  66 |                 <div className="text-right space-y-2">
  67 |                   {getStatusBadge(transaction.status)}
  68 |                   
  69 |                   <div className="text-lg font-bold text-primary">
  70 |                     {formatCurrency(transaction.amount, transaction.currency)}
  71 |                   </div>
  72 |                   
  73 |                   {transaction.refundReason && (
  74 |                     <p className="text-xs text-red-600">
  75 |                       سبب الاسترداد: {transaction.refundReason}
  76 |                     </p>
  77 |                   )}
  78 |                   
  79 |                   <Button
  80 |                     variant="outline"
  81 |                     size="sm"
  82 |                     onClick={() => handleViewDetails(transaction.id)}
  83 |                     className="mt-2"
  84 |                   >
  85 |                     <Eye className="h-3 w-3 mr-1" />
  86 |                     التفاصيل
  87 |                   </Button>
  88 |                 </div>
  89 |               </div>
  90 |             ))}
  91 |             
  92 |             {transactions.length === 0 && (
  93 |               <div className="text-center py-8">
  94 |                 <CreditCard className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
  95 |                 <p className="text-muted-foreground">لا توجد معاملات مطابقة للبحث</p>
  96 |               </div>
  97 |             )}
  98 |           </div>
  99 |         </CardContent>
 100 |       </Card>
 101 | 
 102 |       <PaymentDetailsModal
 103 |         paymentId={selectedPaymentId}
 104 |         isOpen={isDetailsModalOpen}
 105 |         onClose={() => {
 106 |           setIsDetailsModalOpen(false);
 107 |           setSelectedPaymentId(null);
 108 |         }}
 109 |       />
 110 |     </>
 111 |   );
 112 | }
```

================================================================================

## Summary

- **Total TSX files:** 53
- **Report generated:** 8/9/2025, 11:19:38 PM
- **File types included:** .tsx files

### File Categories:

**Other:** 53 files
  - src\app\admin\categories\page.tsx
  - src\app\admin\layout.tsx
  - src\app\admin\payments\page.tsx
  - src\app\admin\students\[studentId]\page.tsx
  - src\app\courses\[courseId]\payment\page.tsx
  - src\app\courses\[courseId]\payment\result\page.tsx
  - src\app\courses\[courseId]\payment\success\page.tsx
  - src\app\courses\page.tsx
  - src\app\professor\analytics\page.tsx
  - src\app\professor\courses\page.tsx
  - src\components\admin\AdminDashboard.tsx
  - src\components\admin\AdminPaymentManagement.tsx
  - src\components\admin\AdminStudentDetail.tsx
  - src\components\admin\PlatformOverview.tsx
  - src\components\admin\RevenueAnalytics.tsx
  - src\components\admin\SystemLogs.tsx
  - src\components\admin\payment-management\PaymentFilters.tsx
  - src\components\admin\payment-management\PaymentList.tsx
  - src\components\admin\payment-management\PaymentListItem.tsx
  - src\components\admin\payment-management\PaymentPagination.tsx
  - src\components\admin\payment-management\PaymentSummaryCards.tsx
  - src\components\admin\revenue-analytics\PaymentMethodsChart.tsx
  - src\components\admin\revenue-analytics\RecentPayments.tsx
  - src\components\admin\revenue-analytics\RevenueSummaryCards.tsx
  - src\components\admin\student-detail\PaymentList.tsx
  - src\components\admin\student-detail\StudentDataTabs.tsx
  - src\components\admin\student-detail\StudentStats.tsx
  - src\components\admin\system-logs\LogsStatsCards.tsx
  - src\components\analytics\admin\DetailedAnalyticsTabs.tsx
  - src\components\course\CourseAccessGuard.tsx
  - src\components\landing\FAQSection.tsx
  - src\components\navigation\MobileNavigation.tsx
  - src\components\payment\CourseInfo.tsx
  - src\components\payment\PaymentButton.tsx
  - src\components\payment\PaymentDetailsModal.tsx
  - src\components\payment\PaymentFlow.tsx
  - src\components\payment\PaymentForm.tsx
  - src\components\payment\PaymentIframe.tsx
  - src\components\payment\PaymentMethodSelector.tsx
  - src\components\payment\PaymentResult.tsx
  - src\components\payment\PaymentResultPage.tsx
  - src\components\payment\PaymentStatus.tsx
  - src\components\professor\EarningsReport.tsx
  - src\components\professor\earnings-report\RecentTransactions.tsx
  - src\components\shared\PaymentStatusBadge.tsx
  - src\components\student\PaymentHistory.tsx
  - src\components\student\StudentDashboard.tsx
  - src\components\student\payment-history\LoadingState.tsx
  - src\components\student\payment-history\MonthlySpendingCard.tsx
  - src\components\student\payment-history\PaymentFilters.tsx
  - src\components\student\payment-history\PaymentMethodsCard.tsx
  - src\components\student\payment-history\PaymentStatsCards.tsx
  - src\components\student\payment-history\TransactionsList.tsx

