// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// -- ENUMS --

enum UserRole {
  ADMIN
  PROFESSOR
  STUDENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// -- CORE MODELS --

model User {
  id          String   @id @default(cuid())
  email       String?  @unique
  phone       String   @unique
  name        String
  password    String
  role        UserRole @default(STUDENT)
  isActive    Boolean  @default(true)
  
  // Professor-specific fields
  bio         String?
  expertise   String[] // Array of expertise areas
  
  // Student-specific fields (optional for backwards compatibility)
  parentPhone String?
  studentId   String?  @unique
  
  // Legacy field for data migration (will be removed after migration)
  examHistory Json?

  enrollments     Enrollment[]
  ownedCourses    Course[]         @relation("ProfessorCourses")
  payments        Payment[]
  viewingHistory  ViewingHistory[]
  certificates    Certificate[]
  progressMilestones ProgressMilestone[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String
  iconUrl     String?
  slug        String  @unique
  isActive    Boolean @default(true)
  
  courses     Course[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id              String   @id @default(cuid())
  title           String
  description     String
  thumbnailUrl    String
  price           Decimal? // null for free courses
  currency        String   @default("EGP")
  isPublished     Boolean  @default(false)
  bunnyLibraryId  String
  
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  
  professorId     String
  professor       User     @relation("ProfessorCourses", fields: [professorId], references: [id])
  
  lessons         Lesson[]
  enrollments     Enrollment[]
  payments        Payment[]
  certificates    Certificate[]
  progressMilestones ProgressMilestone[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([categoryId])
  @@index([professorId])
  @@index([isPublished])
}

model Lesson {
  id           String @id @default(cuid())
  title        String
  order        Int
  bunnyVideoId String
  duration     Int?   // Duration in seconds
  
  // REPLACES the Material table.
  // We store a list of material objects directly on the lesson.
  // Example: [{"title": "Chapter 1 Notes", "url": "..."}]
  materials Json?
  
  courseId        String
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  viewingHistory  ViewingHistory[]
  
  @@index([courseId])
}

model Enrollment {
  id              String   @id @default(cuid())
  userId          String
  courseId        String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Enhanced progress tracking
  completedLessonIds String[]
  progressPercent    Int      @default(0)
  totalWatchTime     Int      @default(0) // Total watch time in seconds
  lastAccessedAt     DateTime?
  
  enrolledAt      DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Payment {
  id                    String        @id @default(cuid())
  amount                Decimal
  currency              String        @default("EGP")
  status                PaymentStatus @default(PENDING)
  paymentMethod         String?
  
  // PayMob specific fields
  paymobOrderId         String?       @unique
  paymobTransactionId   BigInt?       // PayMob transaction ID from webhook
  paymobResponse        Json?         // Store full PayMob response
  
  // Payment completion tracking
  completedAt           DateTime?     // When payment was completed
  failureReason         String?       // Reason for payment failure
  
  userId                String
  user                  User          @relation(fields: [userId], references: [id])
  
  courseId              String
  course                Course        @relation(fields: [courseId], references: [id])
  
  // Relations
  webhooks              PaymentWebhook[]
  
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@index([paymobOrderId])
  @@index([paymobTransactionId])
}

model PaymentWebhook {
  id                    String    @id @default(cuid())
  paymentId             String
  paymobTransactionId   BigInt
  webhookPayload        Json      // Full webhook payload from PayMob
  processedAt           DateTime? // When webhook was successfully processed
  processingAttempts    Int       @default(0)
  lastError             String?   // Last error message if processing failed
  
  payment               Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([paymentId])
  @@index([paymobTransactionId])
  @@index([processedAt])
}

model ViewingHistory {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  lessonId        String
  lesson          Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  watchedDuration Int      @default(0) // in seconds
  totalDuration   Int      @default(0) // in seconds
  lastPosition    Int      @default(0) // in seconds for resume functionality
  completed       Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@index([completed])
}

// -- CERTIFICATE SYSTEM MODELS --

enum CertificateStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum MilestoneType {
  COURSE_START
  LESSON_COMPLETE
  COURSE_COMPLETE
  QUIZ_PASS
  ASSIGNMENT_SUBMIT
}

model Certificate {
  id              String            @id @default(cuid())
  certificateCode String            @unique
  userId          String
  courseId        String
  status          CertificateStatus @default(ACTIVE)
  issuedAt        DateTime          @default(now())
  validUntil      DateTime?
  isRevoked       Boolean           @default(false)
  revokedAt       DateTime?
  revokedReason   String?
  
  // Certificate metadata
  studentName     String
  courseName      String
  professorName   String
  completionDate  DateTime
  grade           String?
  
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([certificateCode])
  @@index([status])
}

model ProgressMilestone {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  milestoneType MilestoneType
  metadata      Json?         // Additional milestone-specific data
  achievedAt    DateTime      @default(now())
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@unique([userId, courseId, milestoneType])
  @@index([userId])
  @@index([courseId])
  @@index([milestoneType])
}